<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>倚楼听风雨，淡看江湖路(转)</title>
    <url>/2017/08/13/%E5%80%9A%E6%A5%BC%E5%90%AC%E9%A3%8E%E9%9B%A8%EF%BC%8C%E6%B7%A1%E7%9C%8B%E6%B1%9F%E6%B9%96%E8%B7%AF/</url>
    <content><![CDATA[<p>倚楼听风雨，淡看江湖路。但见泪痕湿，不知心恨谁！雪无踪，情亦无踪，雪无形，情亦无形。冬来，雪倾城，爱来情倾城。冬过，雪化水，爱过情化泪！</p>
<p>——《风云》梦写给风的信</p>
<p>沧海桑田，天荒地老，不如有个人牵我的手，一起看夕阳老去。海枯石烂，天长地久，不如有个人陪我，倚楼听风雨，淡看江湖路。</p>
<p>前尘往事，都让他随风而逝了吧。红尘滚滚，都任他湮没在历史中去吧。硝烟弥漫，都让他消沉在尘世间里吧。</p>
<p>我，愿作世间素心人，本不想涉尘世太深的水而过，只愿独坐一隅，随世事流转，淡看红尘的故事，情感，梦想，琐碎的生活。</p>
<p>微风，淡淡的从陌上吹来，掠过窗前，我听到了他的叹息，那是岁月深处的感慨，似水流年，我们像花儿一样各自散落在了天涯。</p>
<p>朋友说，我总在碎碎念着悲伤，演绎着同样忧伤的爱情，落寞的思绪，寂寥的情愫，淡淡的情缘，浅淡的思念，痴恋的深情，心动的唯美，心碎的情殇……</p>
<p>我，无法忘记让我最初心动的人，却是那份情愫在念念不忘的日子里，淡了。那时，我相信的一生只爱一个人的信念，也彻底崩溃在边缘了。</p>
<p>从此，我不知该怎么继续我的红尘情缘，人散，情淡，心性开始变得薄凉。细数流年，转身离开的日子，亦是很久很远了，这些年，寂寞一直汩汩流淌在心溪。</p>
<p>也许，我爱上了一个人，就爱上了寂寞，也爱上了文字。有人说，爱上了文字的孩子，苍老的比较快。因为心的沧桑。我想，我便如是所说。</p>
<p>所以，而今倚楼听风雨，悲欢离合总无情，一任阶前点滴到天明。淡看江湖路，人渐渐远去，情淡淡散去，但见泪痕湿，不知心爱谁。</p>
<p>红颜易老，情缘易醉，流光容易把人抛，惹了心绪，染了尘埃。良辰美景奈何天，泪水凉了心，才懂得，最后的疼爱是手放开。</p>
<p>温暖，刹那芳菲尽。悲伤，注入半世寂寞。我，不过是一个平凡的人，一杯又一杯的红尘酒，自斟自饮，醉了这一生，淡了红尘路。</p>
<p>青烟袅袅，那是心中挥之不去的忧伤。淡淡流云，那是心中无以言说的伤痛。风轻云淡，抹淡流年，静听雨声，洗尽芳华，愿你我安好。</p>
<p>轻轻地推开窗，沁人心脾的花香飘散在风雨中，扑鼻而来。温暖，依然在眼前，是我的心太多贪恋了。不如泡一杯茶，安于一份淡然。</p>
<p>也许，爱与不爱，都是殇。毕竟，我总觉得，爱是人间最美的情愫，心动的朦胧，抵得过心喜的痴恋自醉，心痛的黯然销魂。</p>
<p>其实，不是将他忘了，也不是讲故事忘了，更不是将情感忘了。虽然云淡风轻了，却依然是，多少事，才下眉头，却上心间。只是，选择三缄其口，不说了。</p>
<p>拈花一笑，捣碎了心，寂静转身，安然守候一丝一缕的情愫，如睡莲般静躺在红尘的流水里，即使，风雨穿透世事，亦波澜不惊。</p>
<p>夏夜微凉，窗外雨潺潺，随着旋律轻轻流泻指尖的忧伤，人淡情远，静静地坐着，想着心事，任红尘纷纭一一化了虚无，散了云烟，浅了风情。</p>
<p>搁浅心思，束之高阁，转身离开。如莲禅定，潜入红尘，出淤泥而不染。倚楼听风雨，淡看江湖路……</p>
<p>作者：落叶<br>链接：<a href="http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html">http://www.duwenzhang.com/wenzhang/xinqingriji/20140621/294982.html</a><br>來源：文章阅读网</p>
]]></content>
      <categories>
        <category>听风雨</category>
      </categories>
      <tags>
        <tag>听风雨</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的API授权流程</title>
    <url>/2017/08/16/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84api%E6%8E%88%E6%9D%83%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>实际项目中我们经常会碰到给第三方开放我们项目API的这种场景。这时我们要保证api的安全，参考<code>腾讯广点通</code>的api调用。现将php的代码实现整理这此。</p>
<p>我们的算法很简单：</p>
<blockquote>
<ol>
<li>把调用方自己的appid,secret_key,当前的时间戳time连接起来用sha1方法生成一个sign</li>
<li>把appid,time,sign用英文逗号连接并用base64打包变成一个参数token</li>
</ol>
</blockquote>
<h3 id="API的几个方法"><a href="#API的几个方法" class="headerlink" title="API的几个方法"></a>API的几个方法</h3><p><code>api_functions.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $appid</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $secret_key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $time</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_token</span>(<span class="params"><span class="variable">$appid</span>, <span class="variable">$secret_key</span>, <span class="variable">$time</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$sign</span> = sha1(<span class="variable">$appid</span> . <span class="variable">$secret_key</span> . <span class="variable">$time</span>);</span><br><span class="line">    <span class="keyword">return</span> base64_encode(<span class="variable">$appid</span> . <span class="string">&#x27;,&#x27;</span> . <span class="variable">$time</span> . <span class="string">&#x27;,&#x27;</span> . <span class="variable">$sign</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解包token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $token</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unpack_token</span>(<span class="params"><span class="variable">$token</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$params</span> = base64_decode(<span class="variable">$token</span>);</span><br><span class="line">    <span class="variable">$params</span> = explode(<span class="string">&#x27;,&#x27;</span>, <span class="variable">$params</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        <span class="string">&#x27;appid&#x27;</span>=&gt; <span class="keyword">isset</span>(<span class="variable">$params</span>[<span class="number">0</span>]) ? <span class="variable">$params</span>[<span class="number">0</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;time&#x27;</span>=&gt; <span class="keyword">isset</span>(<span class="variable">$params</span>[<span class="number">1</span>]) ? <span class="variable">$params</span>[<span class="number">1</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;sign&#x27;</span>=&gt; <span class="keyword">isset</span>(<span class="variable">$params</span>[<span class="number">2</span>]) ? <span class="variable">$params</span>[<span class="number">2</span>] : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> $url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bool $is_post</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $header</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub_curl</span>(<span class="params"><span class="variable">$url</span>, <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="params"></span>), <span class="variable">$is_post</span> = <span class="literal">false</span>, <span class="variable">$header</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$ch</span> = curl_init();</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$is_post</span> &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">        <span class="variable">$url</span> = <span class="variable">$url</span> . <span class="string">&#x27;?&#x27;</span> . http_build_query(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_POST, <span class="variable">$is_post</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$is_post</span>) &#123;</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_POSTFIELDS, <span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="literal">false</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">    curl_setopt(<span class="variable">$ch</span>, CURLOPT_CONNECTTIMEOUT, <span class="number">20</span>);</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$header</span>)) &#123;</span><br><span class="line">        curl_setopt(<span class="variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="variable">$header</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$info</span> = curl_exec(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="variable">$code</span> = curl_getinfo(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$code</span> != <span class="number">200</span>)&#123;</span><br><span class="line"></span><br><span class="line">        echo_json(<span class="variable">$code</span>, <span class="string">&#x27;api调用出错&#x27;</span>.<span class="variable">$code</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    curl_close(<span class="variable">$ch</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$info</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> int $code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $msg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array $data</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo_json</span>(<span class="params"><span class="variable">$code</span>, <span class="variable">$msg</span> = <span class="string">&#x27;&#x27;</span>, <span class="variable">$data</span> = <span class="keyword">array</span>(<span class="params"></span>)</span>)</span>&#123;</span><br><span class="line">    header(<span class="string">&#x27;Content-type:application/json&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> json_encode(<span class="keyword">array</span>(<span class="string">&#x27;ret&#x27;</span> =&gt; <span class="variable">$code</span>, <span class="string">&#x27;msg&#x27;</span> =&gt; <span class="variable">$msg</span>, <span class="string">&#x27;data&#x27;</span> =&gt; <span class="variable">$data</span>));</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="API提供方"><a href="#API提供方" class="headerlink" title="API提供方"></a>API提供方</h3><p><code>api.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;api_functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//授权的使用方名单 现为演示方便直接使用数组</span></span><br><span class="line"><span class="variable">$users</span> = [</span><br><span class="line">    <span class="string">&#x27;user_001&#x27;</span>=&gt;[</span><br><span class="line">        <span class="string">&#x27;appid&#x27;</span>=&gt;<span class="string">&#x27;user_001&#x27;</span>,    <span class="comment">//使用方对于提供方api的唯一id</span></span><br><span class="line">        <span class="string">&#x27;secret_key&#x27;</span>=&gt;<span class="string">&#x27;97bc847d4ea7dd9f035d41a657302f1c&#x27;</span>    <span class="comment">//密钥 也唯一</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;user_002&#x27;</span>=&gt;[</span><br><span class="line">        <span class="string">&#x27;appid&#x27;</span>=&gt;<span class="string">&#x27;user_002&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;secret_key&#x27;</span>=&gt;<span class="string">&#x27;c763b64a62186ae6831edd22063539c4&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&#x27;user_003&#x27;</span>=&gt;[</span><br><span class="line">        <span class="string">&#x27;appid&#x27;</span>=&gt;<span class="string">&#x27;user_003&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;secret_key&#x27;</span>=&gt;<span class="string">&#x27;51a683bea5e5c138fd0342fb70e03c65&#x27;</span></span><br><span class="line">    ],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验签名</span></span><br><span class="line"><span class="variable">$token</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]) ? trim(<span class="variable">$_GET</span>[<span class="string">&#x27;token&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$token</span>))&#123;</span><br><span class="line">    echo_json(<span class="number">1000</span>, <span class="string">&#x27;token missed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解包token</span></span><br><span class="line"><span class="variable">$token_params</span> = unpack_token(<span class="variable">$token</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$token_params</span>[<span class="string">&#x27;sign&#x27;</span>]))&#123;</span><br><span class="line">    echo_json(<span class="number">1001</span>, <span class="string">&#x27;sign error&#x27;</span>);  <span class="comment">//签名为空或者错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$token_params</span>[<span class="string">&#x27;appid&#x27;</span>]))&#123;</span><br><span class="line">    echo_json(<span class="number">1002</span>, <span class="string">&#x27;appid error&#x27;</span>);  <span class="comment">//appid为空或者错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$token_params</span>[<span class="string">&#x27;time&#x27;</span>]))&#123;</span><br><span class="line">    echo_json(<span class="number">1003</span>, <span class="string">&#x27;time error&#x27;</span>);  <span class="comment">//time为空或者错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(abs(<span class="variable">$token_params</span>[<span class="string">&#x27;time&#x27;</span>] - time()) &gt; <span class="number">10</span> * <span class="number">60</span>)&#123;    <span class="comment">// api 调用时间限制左右浮动10分钟</span></span><br><span class="line">    echo_json(<span class="number">1004</span>, <span class="string">&#x27;time expired&#x27;</span>);  <span class="comment">// 10 minutes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用appid取用户</span></span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">isset</span>(<span class="variable">$users</span>[<span class="variable">$token_params</span>[<span class="string">&#x27;appid&#x27;</span>]]) ? <span class="variable">$users</span>[<span class="variable">$token_params</span>[<span class="string">&#x27;appid&#x27;</span>]] : [];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$user</span>))&#123;</span><br><span class="line">    echo_json(<span class="number">1005</span>, <span class="string">&#x27;appid not exists&#x27;</span>);  <span class="comment">//调用方不存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用调用方参数生成token</span></span><br><span class="line"><span class="variable">$create_token</span> = generate_token(<span class="variable">$user</span>[<span class="string">&#x27;appid&#x27;</span>], <span class="variable">$user</span>[<span class="string">&#x27;secret_key&#x27;</span>], <span class="variable">$token_params</span>[<span class="string">&#x27;time&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$token</span> !== <span class="variable">$create_token</span>)&#123;</span><br><span class="line">    echo_json(<span class="number">1006</span>, <span class="string">&#x27;token error&#x27;</span>);  <span class="comment">//token错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//到此 调用权限的验证就ok了</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$api</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;api&#x27;</span>]) ? trim(<span class="variable">$_GET</span>[<span class="string">&#x27;api&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接下来你可以有其他对具体接口的验证...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回结果</span></span><br><span class="line">echo_json(<span class="number">200</span>, <span class="string">&#x27;your request api &#x27;</span>.<span class="variable">$api</span>. <span class="string">&#x27; success!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="API调用方"><a href="#API调用方" class="headerlink" title="API调用方"></a>API调用方</h3><p><code>use_api.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">&#x27;api_functions.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//假设使用方是 user_001 他拥有自己的appid和secret_key</span></span><br><span class="line"><span class="variable">$user</span> = [</span><br><span class="line">    <span class="string">&#x27;appid&#x27;</span> =&gt; <span class="string">&#x27;user_001&#x27;</span>,    <span class="comment">//使用方对于提供方api的唯一id</span></span><br><span class="line">    <span class="string">&#x27;secret_key&#x27;</span> =&gt; <span class="string">&#x27;97bc847d4ea7dd9f035d41a657302f1c&#x27;</span>    <span class="comment">//密钥 也唯一</span></span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成token</span></span><br><span class="line"><span class="variable">$token</span> = generate_token(<span class="variable">$user</span>[<span class="string">&#x27;appid&#x27;</span>], <span class="variable">$user</span>[<span class="string">&#x27;secret_key&#x27;</span>], time());</span><br><span class="line"></span><br><span class="line"><span class="comment">//url换成你自己的接口url</span></span><br><span class="line"><span class="variable">$url</span> = <span class="string">&#x27;http://&#x27;</span> . <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_HOST&#x27;</span>] . dirname(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&#x27;/api.php?api=user_info&#x27;</span>; <span class="comment">//调用user_info的接口</span></span><br><span class="line"><span class="variable">$url</span> .= <span class="string">&#x27;&amp;token=&#x27;</span> . <span class="variable">$token</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$url</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求接口</span></span><br><span class="line"><span class="variable">$res</span> = sub_curl(<span class="variable">$url</span>);</span><br><span class="line"></span><br><span class="line">var_dump(json_decode(<span class="variable">$res</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用成功结果</span></span><br><span class="line"><span class="comment">array(3) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;ret&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  int(200)</span></span><br><span class="line"><span class="comment">  [&quot;msg&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(35) &quot;your request api user_info success!&quot;</span></span><br><span class="line"><span class="comment">  [&quot;data&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  array(0) &#123;</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>API</tag>
        <tag>PHP</tag>
        <tag>授权</tag>
      </tags>
  </entry>
  <entry>
    <title>用PHP进行HTTP认证</title>
    <url>/2017/08/21/%E7%94%A8PHP%E8%BF%9B%E8%A1%8CHTTP%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<p>PHP的HTTP认证机制，就是用<code>header()</code>函数来向客户端浏览器发送“Authentication Required”信息，使其弹出一个用户名／密码输入窗口。当用户输入用户名和密码后，包含有URL的PHP脚本将会加上预定义变量<code>PHP_AUTH_USER</code>，<code>PHP_AUTH_PW</code>和<code>AUTH_TYPE</code>被再次调用，这三个变量分别被设定为用户名，密码和认证类型。预定义变量保存在 <code>$_SERVER</code> 或者 <code>$HTTP_SERVER_VARS</code> 数组中。支持“Basic”和“Digest”（自 PHP 5.1.0 起）认证方法。这是php官网的解释。<br>大家看示例体会。😁</p>
<p>参考连接：<a href="http://php.net/manual/zh/features.http-auth.php">http://php.net/manual/zh/features.http-auth.php</a></p>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>])) &#123;</span><br><span class="line">    header(<span class="string">&#x27;WWW-Authenticate: Basic realm=&quot;My Realm&quot;&#x27;</span>);</span><br><span class="line">    header(<span class="string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;401 Unauthorized&#x27;</span>.<span class="string">&#x27;&lt;br&gt; &lt;button onclick=&quot;window.location.reload();&quot;&gt;Login Again&lt;/button&gt;&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_USER&#x27;</span>] !== <span class="string">&#x27;James Bond&#x27;</span> || <span class="variable">$_SERVER</span>[<span class="string">&#x27;PHP_AUTH_PW&#x27;</span>] !== <span class="string">&#x27;007&#x27;</span>)&#123;</span><br><span class="line">        header(<span class="string">&#x27;WWW-Authenticate: Basic realm=&quot;My Realm&quot;&#x27;</span>);</span><br><span class="line">        header(<span class="string">&#x27;HTTP/1.0 401 Unauthorized&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;401 Unauthorized&#x27;</span>.<span class="string">&#x27;&lt;br&gt; &lt;button onclick=&quot;window.location.reload();&quot;&gt;Login Again&lt;/button&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是你的业务代码</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<p><img src="/assets/images/20170821120459.png" alt="example-pic"></p>
<p>这样就会弹出一个登陆框，输入用户名：<code>James Bond</code> 密码：<code>007</code> 登陆吧！</p>
<p>成功了没，哈哈，大家觉得是不是很好玩~</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>HTTP</tag>
        <tag>认证</tag>
      </tags>
  </entry>
  <entry>
    <title>九月，加油！</title>
    <url>/2017/09/06/%E4%B9%9D%E6%9C%88%EF%BC%8C%E5%8A%A0%E6%B2%B9/</url>
    <content><![CDATA[<p><img src="/assets/images/IMG_20170906_101345.png" alt="example-pic"></p>
<p>不知不觉这一年已经过了大半。九月了，加油！</p>
]]></content>
      <categories>
        <category>岁月静好</category>
      </categories>
      <tags>
        <tag>岁月静好</tag>
      </tags>
  </entry>
  <entry>
    <title>一个百度地图的常用使用示例</title>
    <url>/2017/09/07/%E4%B8%80%E4%B8%AA%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BE%E7%9A%84%E5%B8%B8%E7%94%A8%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<p>今天在项目中用到了百度地图，感觉也是个基本用法的常用示例，在这和大家分享下😁</p>
<p>效果如图：</p>
<p><img src="/assets/images/20170907200341.png" alt="example-pic"></p>
<p>先说说需求吧：</p>
<blockquote>
<ol>
<li>打开地图，自动<strong>定位到当前所在位置</strong>，并在地图上添加一个<strong>可拖拽</strong>的标注（marker） </li>
<li>用户可以拖拽标注选择地图上的位置，同时标注的<strong>经纬度</strong>显示在input框中（其实这个是为了看效果，一般都用隐藏域），标注的<strong>当前地址</strong>显示在地址的输入框中</li>
<li>用户输入地址之后自动调用百度地图的API，找到输入地址对应到地图的点并移动标注到此。当然也包括显示经纬度。</li>
</ol>
</blockquote>
<p>HTML页面部分是这样子，使用bootstrap3的样式</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">form</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">lg</span>-2 <span class="title">col</span>-<span class="title">sm</span>-2 <span class="title">control</span>-<span class="title">label</span>&quot;&gt;地址&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">lg</span>-10&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span> <span class="title">pwd</span>-<span class="title">input</span>&quot; <span class="title">name</span>=&quot;<span class="title">address</span>&quot; <span class="title">id</span>=&quot;<span class="title">address</span>&quot; <span class="title">value</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> !<span class="title">empty</span>($<span class="title">info</span>[&#x27;<span class="title">address</span>&#x27;]) ? $<span class="title">info</span>[&#x27;<span class="title">address</span>&#x27;] : &#x27;&#x27;;?&gt;&quot; <span class="title">placeholder</span>=&quot;请输入地址&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">p</span> <span class="title">class</span>=&quot;<span class="title">help</span>-<span class="title">block</span>&quot;&gt;&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">group</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">lg</span>-2 <span class="title">col</span>-<span class="title">sm</span>-2 <span class="title">control</span>-<span class="title">label</span>&quot;&gt;选择位置&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">col</span>-<span class="title">lg</span>-10&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">class</span>=&quot;<span class="title">clearfix</span>&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span> <span class="title">class</span>=&quot;<span class="title">control</span>-<span class="title">label</span> <span class="title">pull</span>-<span class="title">left</span>&quot; <span class="title">style</span>=&quot;<span class="title">margin</span>-<span class="title">right</span>: 5<span class="title">px</span>;&quot;&gt;经度&lt;/<span class="title">label</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">lng</span>&quot; <span class="title">id</span>=&quot;<span class="title">lng</span>&quot; <span class="title">value</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> !<span class="title">empty</span>($<span class="title">info</span>[&#x27;<span class="title">lng</span>&#x27;]) ? $<span class="title">info</span>[&#x27;<span class="title">lng</span>&#x27;] : &#x27;&#x27;;?&gt;&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span> <span class="title">pull</span>-<span class="title">left</span>&quot; <span class="title">style</span>=&quot;<span class="title">width</span>: 120<span class="title">px</span>;<span class="title">margin</span>-<span class="title">right</span>: 15<span class="title">px</span>;&quot;&gt;</span></span><br><span class="line"><span class="class">                &lt;<span class="title">label</span> <span class="title">class</span>=&quot;<span class="title">control</span>-<span class="title">label</span> <span class="title">pull</span>-<span class="title">left</span>&quot; <span class="title">style</span>=&quot;<span class="title">margin</span>-<span class="title">right</span>: 5<span class="title">px</span>;&quot;&gt;维度&lt;/<span class="title">label</span>&gt;&lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">lat</span>&quot; <span class="title">id</span>=&quot;<span class="title">lat</span>&quot; <span class="title">value</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> !<span class="title">empty</span>($<span class="title">info</span>[&#x27;<span class="title">lat</span>&#x27;]) ? $<span class="title">info</span>[&#x27;<span class="title">lat</span>&#x27;] : &#x27;&#x27;;?&gt;&quot; <span class="title">class</span>=&quot;<span class="title">form</span>-<span class="title">control</span> <span class="title">pull</span>-<span class="title">left</span>&quot; <span class="title">style</span>=&quot;<span class="title">width</span>: 120<span class="title">px</span>;&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">div</span> <span class="title">id</span>=&quot;<span class="title">l</span>-<span class="title">map</span>&quot; <span class="title">style</span>=&quot;<span class="title">width</span>: 600<span class="title">px</span>;<span class="title">height</span>: 400<span class="title">px</span>;&quot;&gt;&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重点是js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//经纬度</span></span><br><span class="line"><span class="keyword">var</span> lat = <span class="string">&#x27;&lt;?php echo !empty($info[&#x27;</span>lat<span class="string">&#x27;]) ? $info[&#x27;</span>lat<span class="string">&#x27;] : &#x27;</span><span class="string">&#x27;;?&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> lng = <span class="string">&#x27;&lt;?php echo !empty($info[&#x27;</span>lng<span class="string">&#x27;]) ? $info[&#x27;</span>lng<span class="string">&#x27;] : &#x27;</span><span class="string">&#x27;;?&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 百度地图API功能</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> BMap.Map(<span class="string">&quot;l-map&quot;</span>);    <span class="comment">//new个地图出来</span></span><br><span class="line"><span class="keyword">var</span> point;</span><br><span class="line"><span class="keyword">var</span> marker;</span><br><span class="line"><span class="keyword">if</span>(lat &amp;&amp; lng)&#123;</span><br><span class="line">    point = <span class="keyword">new</span> BMap.Point(lng,lat);    <span class="comment">//new个点</span></span><br><span class="line">    marker = <span class="keyword">new</span> BMap.Marker(point);    <span class="comment">//new个标注</span></span><br><span class="line">    marker.enableDragging();           <span class="comment">// 可拖拽</span></span><br><span class="line">    map.addOverlay(marker);             <span class="comment">// 将标注添加到地图中</span></span><br><span class="line">    getPosition(marker);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    point = <span class="keyword">new</span> BMap.Point(<span class="number">107.475903</span>, <span class="number">31.214995</span>);</span><br><span class="line">    <span class="comment">//map.addControl(new BMap.GeolocationControl());  //定位</span></span><br><span class="line">    map.addControl(<span class="keyword">new</span> BMap.NavigationControl());  </span><br><span class="line">    <span class="keyword">var</span> geolocation = <span class="keyword">new</span> BMap.Geolocation();   <span class="comment">//获取当前位置</span></span><br><span class="line">    geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">r</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.getStatus() == BMAP_STATUS_SUCCESS)&#123;</span><br><span class="line">            marker = <span class="keyword">new</span> BMap.Marker(r.point);</span><br><span class="line">            marker.enableDragging();           <span class="comment">// 可拖拽</span></span><br><span class="line">            map.addOverlay(marker);</span><br><span class="line">            map.panTo(r.point);</span><br><span class="line">            <span class="comment">//console.log(&#x27;您的位置：&#x27;+r.point.lng+&#x27;,&#x27;+r.point.lat);</span></span><br><span class="line">            getPosition(marker);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            marker = <span class="keyword">new</span> BMap.Marker(point);</span><br><span class="line">            marker.enableDragging();           <span class="comment">// 可拖拽</span></span><br><span class="line">            map.addOverlay(marker);             <span class="comment">// 将标注添加到地图中</span></span><br><span class="line">            getPosition(marker);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,&#123;<span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">map.centerAndZoom(point, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> gc = <span class="keyword">new</span> BMap.Geocoder();<span class="comment">//地址解析类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//地址输入框失去焦点时搜索输入的位置</span></span><br><span class="line">$(<span class="string">&quot;#address&quot;</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> address = $(<span class="built_in">this</span>).val();</span><br><span class="line">    parseAddress(address, <span class="string">&#x27;上海市&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解析地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseAddress</span>(<span class="params">address, city</span>)</span>&#123;</span><br><span class="line">    gc.getPoint(address, <span class="function"><span class="keyword">function</span>(<span class="params">point</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(point);</span><br><span class="line">        <span class="keyword">if</span>(point)&#123;</span><br><span class="line">            <span class="comment">//放大地图 之前zoom是12</span></span><br><span class="line">            map.setZoom(<span class="number">15</span>);</span><br><span class="line">            <span class="comment">// console.log(marker);</span></span><br><span class="line">            </span><br><span class="line">            $(<span class="string">&quot;#lng&quot;</span>).val(point.lng);</span><br><span class="line">            $(<span class="string">&quot;#lat&quot;</span>).val(point.lat);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//接下来的操作想想应该时移动标注到新的位置，但是好像api没这中操作，只有先把标注从地图上取下来 换个位置再放上去</span></span><br><span class="line">            <span class="keyword">var</span> allOverlay = map.getOverlays(); <span class="comment">//获取地图覆盖物</span></span><br><span class="line">            <span class="comment">//console.log(allOverlay);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;allOverlay.length;i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> pos = allOverlay[i].getPosition();</span><br><span class="line">                <span class="comment">//删除指定经度的覆盖物</span></span><br><span class="line">                <span class="keyword">if</span> (pos &amp;&amp; pos.lng == point.lng &amp;&amp; pos.lat == point.lat) &#123;</span><br><span class="line">                    map.removeOverlay(allOverlay[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//重设标注的位置</span></span><br><span class="line">            marker.setPosition(point);</span><br><span class="line">            <span class="comment">//把标注重新放到地图上</span></span><br><span class="line">            map.addOverlay(marker);</span><br><span class="line">            <span class="comment">//移动地图到新位置</span></span><br><span class="line">            map.panTo(point);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, city);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPosition</span>(<span class="params">marker</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//添加标记点击监听</span></span><br><span class="line">    marker.addEventListener(<span class="string">&quot;mouseup&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        gc.getLocation(e.point, <span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//console.log(&quot;地图中心点变更为：&quot; + rs.lng + &quot;, &quot; + rs.lat);</span></span><br><span class="line">            <span class="built_in">console</span>.log(rs.point.lat + <span class="string">&#x27;,&#x27;</span> + rs.point.lng);</span><br><span class="line">            $(<span class="string">&quot;#lng&quot;</span>).val(rs.point.lng);</span><br><span class="line">            $(<span class="string">&quot;#lat&quot;</span>).val(rs.point.lat);</span><br><span class="line">            $(<span class="string">&quot;#address&quot;</span>).val(rs.address);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实基本的操作还挺顺利的，只是在一个地方碰到了坑：<strong>移动标注</strong></p>
<p>怎么移动呢？翻了百度API没找到，最后也是通过搜素引擎查查查，才找到思路。</p>
<p>原来标注添加标注(marker)添加到地图上是属于覆盖物(Overlay)。想移动就换个思路，把这个覆盖物移除，然后重新给标注赋予新的位置属性，然后重新添加到地图上。</p>
<p>(。・∀・)ノ 这下搞定啦~ 赶紧关机下班，庆祝一下 🎉</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>百度地图</tag>
      </tags>
  </entry>
  <entry>
    <title>自己实现AJAX异步上传文件</title>
    <url>/2017/09/09/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0AJAX%E5%BC%82%E6%AD%A5%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>在项目中经常用到文件上传，然后就找各种各样的插件。但用着用着总不是很多地方不是很称手，需要修修改改。所以今天干脆自己写个吧。</p>
<p>先说说具体需求：</p>
<blockquote>
<ol>
<li>上传文件做到所见所得，就是选择文件之后能立马看到 </li>
<li>可以方便用在用js异步提交的表单中</li>
</ol>
</blockquote>
<p>HTML页面部分是这样子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 图片./images/add_img.png就是一个很大的加号 +  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">style</span>=<span class="string">&quot;cursor: pointer;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./images/add_img.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;点击上传&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">title</span>=<span class="string">&quot;点击上传&quot;</span> <span class="attr">class</span>=<span class="string">&quot;upload-img&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;upload-img-input&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/gif,image/jpeg,image/jpg,image/png,image/bmp&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file_img&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;img&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;upload_image(this);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在input:file的accept属性中定义可以上传的文件格式（MIME 类型）在这里我们列出常用的图片类型：image/gif,image/jpeg,image/jpg,image/png,image/bmp</p>
<p>其实在这大家会说后缀是<code>.jpg</code>和<code>.jpeg</code>的图片的mime type不都是<code>image/jpeg</code>吗？为什么还要加个<code>image/jpg</code>?</p>
<p>没错，是这样如果你只写<code>image/jpeg</code>用谷歌浏览器是没问题的。但是在微信浏览器，QQ浏览器中就不行了，后来找不到问题，尝试了好多次才发现这个问题。没办法，国产浏览器不按标准造的原因 ╮(╯▽╰)╭</p>
<p>其他文件格式大家看这里  <a href="http://www.w3school.com.cn/media/media_mimeref.asp">w3school</a> </p>
<p>重点是js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//点击图片的时候 触发隐藏的input:file的点击事件</span></span><br><span class="line">$(<span class="string">&quot;.upload-img&quot;</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="built_in">this</span>).data(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;file_&#x27;</span> + id);</span><br><span class="line">    file.click();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload_image</span>(<span class="params">pic_file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(pic_file).data(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> input = $(<span class="string">&quot;input.upload-img-input[data-id=&quot;</span>+id+<span class="string">&quot;]&quot;</span>);    <span class="comment">//找到相应的隐藏域</span></span><br><span class="line">    <span class="keyword">var</span> pic = $(<span class="string">&quot;img.upload-img[data-id=&quot;</span>+id+<span class="string">&quot;]&quot;</span>);              <span class="comment">//找到相应的预览图片</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> file = pic_file.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (file.size &gt; <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;   <span class="comment">//设置限制文件大小 不大于2MB</span></span><br><span class="line">        alert(<span class="string">&#x27;上传文件不能大于2M!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();    <span class="comment">//使用formData对象</span></span><br><span class="line">    fd.append(<span class="string">&quot;pic_file&quot;</span>, file);</span><br><span class="line">    <span class="comment">//fd.append(&quot;name&quot;, name);  //可以添加其他字段，比如有些框为了安全加的csrf_token</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">    xhr.open(<span class="string">&quot;POST&quot;</span>, <span class="string">&#x27;upload_file.php&#x27;</span>);    <span class="comment">//这里是后端处理的地址</span></span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&#x27;(&#x27;</span> + xhr.responseText + <span class="string">&#x27;)&#x27;</span>);   <span class="comment">//把json字符串转换成js对象</span></span><br><span class="line">            <span class="keyword">if</span> (obj.ret == <span class="number">200</span>) &#123;   <span class="comment">//上传成功</span></span><br><span class="line">                <span class="keyword">var</span> pic_url = obj.data.url; <span class="comment">//显示预览图</span></span><br><span class="line">                input.val(pic_url);         <span class="comment">//把地址放到隐藏域</span></span><br><span class="line">                pic.attr(<span class="string">&#x27;src&#x27;</span>, pic_url);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(obj.msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">&#x27;上传失败，请稍候再试&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们服务端上传返回的json格式是这样</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;ret&quot;</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;data&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;你的图片url地址&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML5</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>EFI模式下安装win10+Archlinux</title>
    <url>/2017/09/13/EFI%E6%A8%A1%E5%BC%8F%E4%B8%8B%E5%AE%89%E8%A3%85win10+Archlinux/</url>
    <content><![CDATA[<p>就最近一次安装Archlinux做一次笔记吧。别问我为什么没事就装arch，因为他是arch  😜 </p>
<p>Win10安装就略过了，我的电脑linux老换，win10始终稳稳的在那躺着，一动不动。。。</p>
<p>因为win10是提前安装好的，而他是使用EFI模式安装的 我们在win10下在硬盘上给咋arch挪出点空间来，几十个GB就行。看你硬盘大小了和心情了。</p>
<h3 id="启动liveCD"><a href="#启动liveCD" class="headerlink" title="启动liveCD"></a>启动liveCD</h3><p>用在<a href="https://www.archlinux.org/download/">官网</a>或者<a href="http://mirrors.163.com/archlinux/iso/2017.09.01/">163</a>源下载最新的liveCD镜像（比如最新是archlinux-2017.09.01-x86_64.iso），刻录到u盘，我喜欢用<a href="http://rufus.akeo.ie/">rufs</a>，这个不大于1M的小工具很简单强大我喜欢。 当然了，熟悉linux的同学可以用<a href="https://wiki.archlinux.org/index.php/Core_utilities#dd">dd</a>命令。</p>
<p>插上u盘，重启到liveCD里面。里面也是个没桌面的shell系统。</p>
<h3 id="看Archlinux-wiki"><a href="#看Archlinux-wiki" class="headerlink" title="看Archlinux wiki"></a>看Archlinux wiki</h3><p>在开始之前最好还是看看<a href="https://wiki.archlinux.org/index.php/Installation_guide">arch的wiki</a>Installation guide(安装指南)，写的很详细，最好看英文的，中文的翻译有点延迟。</p>
<h3 id="联网"><a href="#联网" class="headerlink" title="联网"></a>联网</h3><p>如果你是有线网络，插上网线，启动<a href="https://wiki.archlinux.org/index.php/Dhcpcd">dhcpd</a>服务（也就是动态获取ip）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start dhcpcd</span><br></pre></td></tr></table></figure>
<p>无线网络用wifi-menu链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wifi-menu</span><br></pre></td></tr></table></figure>
<p>看看链接成功了没 查看下ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p>如果没成功，或者其他的联网方式，看看<a href="https://wiki.archlinux.org/index.php/Network_configuration">arch的wiki</a></p>
<p>其实说到这，再次提醒大家，看<a href="https://wiki.archlinux.org/">arch的wiki</a></p>
<p>连上网络了，开工吧!</p>
<h3 id="分区："><a href="#分区：" class="headerlink" title="分区："></a>分区：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk /dev/sda</span><br></pre></td></tr></table></figure>
<p>进入fdisk之后按<code>p</code>，看看现有分区的情况<br>这是我的硬盘分区情况，硬盘格式<code>gpt</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/sda1        2048     923647    921600   450M Windows 恢复环境</span><br><span class="line">/dev/sda2      923648    1128447    204800   100M EFI 系统</span><br><span class="line">/dev/sda3     1128448    1161215     32768    16M Microsoft 保留</span><br><span class="line">/dev/sda4     1161216  209256750 208095535  99.2G Microsoft 基本数据</span><br><span class="line">/dev/sda5   209258496  210888703   1630208   796M Windows 恢复环境</span><br><span class="line">/dev/sda6   210890752  462559542 251668791   120G Microsoft 基本数据</span><br></pre></td></tr></table></figure>
<p>假如我的硬盘中空闲空间100GB，用fdisk 给这100GB分一分</p>
<p>我的方案是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/dev/sda7    /boot           ext4    500MB    #boot启动分区 500MB够用了</span><br><span class="line">/dev/sda8    swap                        8GB         #交换分区， 我的内存也8GB，我就分一样大小了</span><br><span class="line">/dev/sda9    /                   ext4                   #剩下的全给 / 根分区</span><br></pre></td></tr></table></figure>
<p>根据自己的空间大小自行调整。</p>
<p>格式化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkfs.ext4 /dev/sda7</span><br><span class="line">mkfs.ext4 /dev/sda9</span><br><span class="line">mkswap /dev/sda8</span><br></pre></td></tr></table></figure>
<h3 id="安装基础系统"><a href="#安装基础系统" class="headerlink" title="安装基础系统"></a>安装基础系统</h3><p>挂载分区：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount /dev/sda9 /mnt</span><br><span class="line">mkdir /mnt/boot</span><br><span class="line">mount /dev/sda7 /mnt/boot</span><br><span class="line">mkdir /mnt/boot/EFI</span><br><span class="line">mount /dev/sda2 /mnt/boot/EFI          #这个EFI分区在分区情况里面能看到我的是sda2</span><br><span class="line">swapon /dev/sda8</span><br></pre></td></tr></table></figure>
<p>修改源：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure>
<p>把163，ustc这几个比较好使的中国源复制到文件最上面，到时候下载安装的时候跑的快一点</p>
<p>开始安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacstrap -i /mnt base vim dialog wpa_supplicant     </span><br></pre></td></tr></table></figure>
<p>base是基础系统，dialog是上面提到的链接无线网的wifi-menu，wpa_supplicant也是手动链接无线网的包，vim 不解释 </p>
<p>安装完成之后</p>
<p>把分区挂载情况写入fstab中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">genfstab -U -p /mnt &gt; /mnt/etc/fstab</span><br></pre></td></tr></table></figure>

<p>chroot进新系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arch-chroot /mnt /bin/bash</span><br></pre></td></tr></table></figure>

<p>一些配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;my-archlinux&#x27; &gt; /etc/hostname     #设置主机名字</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai   #设置时区</span><br><span class="line">timedatectl set-timezone Asia/Shanghai      #也可以用这个设置时区</span><br><span class="line">timedatectl set-ntp true        # 设置时间ntp同步网络时间</span><br><span class="line">vim /etc/locale.gen     # 区域设置 取消英文（en_US.UTF-8）和中文(zh_CN.UTF-8)的注释</span><br><span class="line">locale-gen      #生成设置区域设置</span><br><span class="line">echo &quot;LANG=en_US.UTF-8&quot; &gt; /etc/locale.conf #设置语言，因为先安装的是没桌面的模式，先用英文，中文会显示成小方块</span><br></pre></td></tr></table></figure>
<p> 创建初始内存盘<a href="https://wiki.archlinux.org/index.php/Mkinitcpio">mkinitcpio</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkinitcpio -p linux  </span><br></pre></td></tr></table></figure>
<p>设置root密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd      </span><br></pre></td></tr></table></figure>
<p>这步忘了，你就进不去系统了，╮(╯▽╰)╭</p>
<p>搞定启动项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pacman -S grub efibootmgr       #安装grub efibootmgr管理启动项</span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=arch_grub --recheck</span><br><span class="line">pacman -S os-prober     #安装这个包是为了让grub-mkconfig发现win10的启动项</span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg   #把启动项写到文件配置里 </span><br></pre></td></tr></table></figure>
<p>如果win10的启动项没有被发现，不要着急，在新的系统安装重启之后，重新执行上面<code>grub-mkconfig</code>命令就行了</p>
<p>退出新系统,重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit        #退出</span><br><span class="line">unmout -R /mnt  #取消挂载磁盘</span><br><span class="line">reboot   #重启</span><br></pre></td></tr></table></figure>

<p>好了如果一切顺利，重启之后就能看到你的新系统了  (。・∀・)ノ </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>EFI</tag>
        <tag>Archlinux</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10子系统ubuntu更换源</title>
    <url>/2017/09/17/win10%E5%AD%90%E7%B3%BB%E7%BB%9Fubuntu%E6%9B%B4%E6%8D%A2%E6%BA%90/</url>
    <content><![CDATA[<p>作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。</p>
<p>现在win10的linux子系统已经有ubuntu和opensuse两个版本了,应该后续还会推出更多的linux发行版。大家按个人喜好安装吧。</p>
<p>安装过程，网上很多也不难，就略过了，大家自行搜索吧。</p>
<p>我的linux子系统用的是ubuntu，使用起来简单方便啊😁</p>
<p>安装完成之后，顺手就是一个 <code>apt update</code>，但是默认的源太慢了，没法忍。那我们就换国内源吧。</p>
<p>国内有好多源，<a href="http://mirrors.aliyun.com/">阿里云</a>，<a href="http://mirrors.163.com/">163</a>，<a href="http://mirrors.sohu.com/">搜狐</a>，<a href="http://mirrors.ustc.edu.cn/">中科大</a>等等。我们就以阿里云做个例子吧：</p>
<p>浏览器打开 <a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com/</a></p>
<p><img src="/assets/images/20170917191649.png" alt="example-pic"></p>
<p>找到ubuntu的help </p>
<p><img src="/assets/images/20170917192021.png" alt="pic"></p>
<p>发现里面最新的是 Quantal(12.10) 看来不能直接复制</p>
<p>在你的子系统bash中执行</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">cat /etc/apt/sources.list</span><br><span class="line">-------------------------</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure>
<p>索性最新版ubuntu16.04代号叫xenial</p>
<p>那直接把url换换就行了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bk     <span class="comment"># 改配置文件，先备份是个好习惯</span></span><br><span class="line">sudo vim /etc/apt/sources.list   <span class="comment"># 把内容换成下面的就行了，其实就是url变了</span></span><br><span class="line">-------------------------</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure>
<p>搞定了，测试下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure>
<p>没问题就可以了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Win10</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>MSYS2初体验</title>
    <url>/2017/09/22/MSYS2%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    <content><![CDATA[<p>作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。</p>
<p>发现这家伙还不错，这是<a href="https://baike.baidu.com/item/MSYS2">百度百科</a>的介绍：</p>
<blockquote>
<p>MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。同时它也是一个在Cygwin （POSIX 兼容性层） 和 MinGW-w64（从”MinGW-生成”）基础上产生的，追求更好的互操作性的 Windows 软件。<br>MSYS2 是MSYS的一个升级版,准确的说是集成了pacman(我喜欢叫吃豆人)和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git/hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)。</p>
</blockquote>
<p>看起来还不错，这是<a href="http://www.msys2.org/">官网</a></p>
<p>安装就下载二进制安装程序安装就可以了。</p>
<p>安装之后急切地 <code>pacman -Sy</code> 刷新软件包数据，官网的源还有点慢。换<a href="http://mirrors.ustc.edu.cn/">中科大</a>的源吧。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pacman.d</span><br><span class="line">ls</span><br><span class="line">-------------------</span><br><span class="line">gnupg mirrorlist.mingw32  mirrorlist.mingw64  mirrorlist.msys</span><br></pre></td></tr></table></figure>

<p>三个<code>mirrorlist</code>开头的文件就是源的配置文件</p>
<p>编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686</span><br></pre></td></tr></table></figure>

<p>编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64</span><br></pre></td></tr></table></figure>
<p>编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch</span><br></pre></td></tr></table></figure>

<p>然后执行 <code>pacman -Sy</code> 刷新软件包数据即可。</p>
<p>还有一点，cygwin切换系统磁盘是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /cygdrive/d/   <span class="comment">#比如切换到d盘</span></span><br></pre></td></tr></table></figure>

<p>MYSYS2是：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d</span><br></pre></td></tr></table></figure>

<p>使用windows原生命令比如ping会中文乱码，这么解决：</p>
<p>新建 /bin/win：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="variable">$@</span> |iconv -f gbk -t utf-8</span><br></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/bin/win ping baidu.com</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Win10</tag>
        <tag>MSYS2</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Git服务器、编写自动部署脚本</title>
    <url>/2017/09/29/%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E7%BC%96%E5%86%99%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。</p>
<p>主要参考 <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000">廖雪峰-GIT教程-搭建Git服务器</a></p>
<p>现在开始吧！</p>
<h3 id="创建一个git用户，用来运行git服务"><a href="#创建一个git用户，用来运行git服务" class="headerlink" title="创建一个git用户，用来运行git服务"></a>创建一个<code>git</code>用户，用来运行<code>git</code>服务</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure>

<h3 id="创建证书登录"><a href="#创建证书登录" class="headerlink" title="创建证书登录"></a>创建证书登录</h3><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p>
<h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><p>先选定一个目录作为Git仓库，假定是<code>/home/git/sample.git</code>，在<code>/home/git</code>目录下输入命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git init --bare sample.git</span><br></pre></td></tr></table></figure>
<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown -R git:git sample.git</span><br></pre></td></tr></table></figure>

<h3 id="禁用git用户shell登录"><a href="#禁用git用户shell登录" class="headerlink" title="禁用git用户shell登录"></a>禁用git用户shell登录</h3><p>通过编辑<code>/etc/passwd</code>文件完成，找到你的git用户的一行,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure>
<p>把<code>/bin/bash</code>改为<code>/usr/bin/git-shell</code>,例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure>
<p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p>
<h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server:sample.git</span><br></pre></td></tr></table></figure>
<p>server是你的服务器域名或ip地址</p>
<p>如果git仓库和web目录在同一台服务器主机上:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure>

<p>如果不是在git用户的家目录中创建的,比如<code>/srv/gits/sample.git</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server:/srv/gits/sample.git</span><br></pre></td></tr></table></figure>

<p>如果clone成功，那么你的git服务器就搭建成功了。</p>
<p>接下来：</p>
<h3 id="自动同步钩子脚本"><a href="#自动同步钩子脚本" class="headerlink" title="自动同步钩子脚本"></a>自动同步钩子脚本</h3><p>因为我是web目录和git是同一台服务器</p>
<p>编辑 <code>/home/git/sample.git/hooks/post-receive</code>, <code>post-receive</code>就是在git服务器收到代码推送后(<code>push</code>完成之后)执行的脚本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">while read oldrev newrev refname</span><br><span class="line">do</span><br><span class="line">    branch=$(git rev-parse --symbolic --abbrev-ref $refname)</span><br><span class="line">    if [ &quot;master&quot; == &quot;$branch&quot; ]; then</span><br><span class="line">        # Do something</span><br><span class="line">        echo &quot;post-receive in branch master&quot; &gt;&gt; /tmp/git-sample.log</span><br><span class="line">        unset GIT_DIR</span><br><span class="line">        wwwPath=/var/www/html/sample</span><br><span class="line">        cd $wwwPath &amp;&amp; /usr/bin/git pull origin master</span><br><span class="line">        exit 0</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>从脚本内容可以看出，我们在判断当前<code>push</code>的分支是<code>master</code>时执行<code>git pull origin master</code>操作。</p>
<p>给执行权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chown -R git:git /home/git/sample.git/hooks/post-receive</span><br><span class="line">chmod +x /home/git/sample.git/hooks/post-receive</span><br></pre></td></tr></table></figure>

<p>因为是git仓库和web目录在同一台服务器主机上,这里clone使用的是:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure>
<p>因为同步脚本的执行用户是git，所以要保证项目目录要赋予git写权限。容易出问题的也是权限问题。</p>
<p>好了，试试吧~</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础命令</title>
    <url>/2017/10/26/Docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁</p>
<h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>列出镜像列表</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p>获取一个新的镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull base/archlinux</span><br></pre></td></tr></table></figure>
<p>删除镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rmi imageID</span><br></pre></td></tr></table></figure>
<p>查找镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker search php</span><br></pre></td></tr></table></figure>
<p>构建</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/Dockerfile</span><br><span class="line">docker build -t imageName ./</span><br></pre></td></tr></table></figure>

<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run  base/archlinux /bin/echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<p>运行交互式的容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -i -t base/archlinux /bin/bash</span><br></pre></td></tr></table></figure>
<pre><code>* -t:在新容器内指定一个伪终端或终端。
* -i:允许你对容器内的标准输入 (STDIN) 进行交互。</code></pre><p>分配端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -P php7.0-app    <span class="comment">#自动分配</span></span><br><span class="line">docker run -p 5000:80       <span class="comment">#容器内部的 80 端口映射到主机的 5000 端口上</span></span><br></pre></td></tr></table></figure>

<p>查看正在运行的容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker container ls <span class="comment">#或者</span></span><br></pre></td></tr></table></figure>

<p>查看端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker port containerID/contaienrName</span><br></pre></td></tr></table></figure>

<p>查看日志</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker logs </span><br><span class="line">docker -f containerID/contaienrName</span><br></pre></td></tr></table></figure>

<p>查看进程</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker top containerID/contaienrName</span><br></pre></td></tr></table></figure>

<p>查看Docker的底层信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker inspect containerID/contaienrName</span><br></pre></td></tr></table></figure>

<p>停止容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker stop containerID/contaienrName</span><br></pre></td></tr></table></figure>
<p>启动容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker start containerID/contaienrName</span><br></pre></td></tr></table></figure>
<p>正在运行的容器，我们可以使用 <code>docker restart</code> 命令来重启</p>
<p>查看最后一次创建的容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure>
<p>移除容器</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker rm containerID/contaienrName</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>百度UEditor自定义上传地址</title>
    <url>/2017/10/26/%E7%99%BE%E5%BA%A6ueditor%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p>之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。</p>
<p>在ue实例化的时候你服务端上传的请求地址赋值给<code>serverUrl</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ue;</span><br><span class="line">ue = UE.getEditor(<span class="string">&#x27;editor&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">toolbars</span>: [		<span class="comment">//这个是工具栏配置，自己定义和今天主题无关</span></span><br><span class="line">        [</span><br><span class="line">            <span class="string">&#x27;fullscreen&#x27;</span>, <span class="string">&#x27;source&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;undo&#x27;</span>, <span class="string">&#x27;redo&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;bold&#x27;</span>, <span class="string">&#x27;italic&#x27;</span>, <span class="string">&#x27;underline&#x27;</span>, <span class="string">&#x27;fontborder&#x27;</span>, <span class="string">&#x27;strikethrough&#x27;</span>, <span class="string">&#x27;superscript&#x27;</span>, <span class="string">&#x27;subscript&#x27;</span>, <span class="string">&#x27;removeformat&#x27;</span>, <span class="string">&#x27;formatmatch&#x27;</span>, <span class="string">&#x27;autotypeset&#x27;</span>, <span class="string">&#x27;blockquote&#x27;</span>, <span class="string">&#x27;pasteplain&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;forecolor&#x27;</span>, <span class="string">&#x27;backcolor&#x27;</span>, <span class="string">&#x27;insertorderedlist&#x27;</span>, <span class="string">&#x27;insertunorderedlist&#x27;</span>, <span class="string">&#x27;selectall&#x27;</span>, <span class="string">&#x27;cleardoc&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;rowspacingtop&#x27;</span>, <span class="string">&#x27;rowspacingbottom&#x27;</span>, <span class="string">&#x27;lineheight&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;customstyle&#x27;</span>, <span class="string">&#x27;paragraph&#x27;</span>, <span class="string">&#x27;fontfamily&#x27;</span>, <span class="string">&#x27;fontsize&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;directionalityltr&#x27;</span>, <span class="string">&#x27;directionalityrtl&#x27;</span>, <span class="string">&#x27;indent&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;justifyleft&#x27;</span>, <span class="string">&#x27;justifycenter&#x27;</span>, <span class="string">&#x27;justifyright&#x27;</span>, <span class="string">&#x27;justifyjustify&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;touppercase&#x27;</span>, <span class="string">&#x27;tolowercase&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;link&#x27;</span>, <span class="string">&#x27;unlink&#x27;</span>, <span class="string">&#x27;anchor&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;imagenone&#x27;</span>, <span class="string">&#x27;imageleft&#x27;</span>, <span class="string">&#x27;imageright&#x27;</span>, <span class="string">&#x27;imagecenter&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;simpleupload&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;pagebreak&#x27;</span>, <span class="string">&#x27;template&#x27;</span>, <span class="string">&#x27;background&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;horizontal&#x27;</span>, <span class="string">&#x27;date&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;spechars&#x27;</span>, <span class="string">&#x27;snapscreen&#x27;</span>, <span class="string">&#x27;wordimage&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;inserttable&#x27;</span>, <span class="string">&#x27;deletetable&#x27;</span>, <span class="string">&#x27;insertparagraphbeforetable&#x27;</span>, <span class="string">&#x27;insertrow&#x27;</span>, <span class="string">&#x27;deleterow&#x27;</span>, <span class="string">&#x27;insertcol&#x27;</span>, <span class="string">&#x27;deletecol&#x27;</span>, <span class="string">&#x27;mergecells&#x27;</span>, <span class="string">&#x27;mergeright&#x27;</span>, <span class="string">&#x27;mergedown&#x27;</span>, <span class="string">&#x27;splittocells&#x27;</span>, <span class="string">&#x27;splittorows&#x27;</span>, <span class="string">&#x27;splittocols&#x27;</span>, <span class="string">&#x27;charts&#x27;</span>, <span class="string">&#x27;|&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;preview&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">serverUrl</span>: <span class="string">&#x27;http://your-server-address&#x27;</span>  <span class="comment">//这里是你服务端上传的请求地址</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>在上面自定义了服务端地址之后，我们刷新页面，ue实例化的时候会自动请求你的地址并且带着query参数，大概是这样：<code>http://your-server-address?action=config</code>。这是ue实例化会请求配置文件，简单点你可以直接返回ue插件文件夹中<code>ueditor/1.4.3.3/php/config.json</code>的内容就可以了。当然了具体配置你是可以自己按自己需求改动。</p>
<p>接下来上传图片，随便上传一张图片，会发现ue的请求地址是<code>http://your-server-address?action=uploadimage</code>。这样是不是恍然大悟：</p>
<blockquote>
<p>   action参数是config，你就给他返回配置内容;<br>   action参数是uploadimage就是图片上传，你就保存图片文件，返回成功或者失败的结果。</p>
</blockquote>
<p>上传结果返回格式是这样的：</p>
<p>失败的情况</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;state&quot;</span>: <span class="string">&quot;Failed&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;error msg&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功的情况</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;state&quot;</span>: <span class="string">&quot;SUCCESS&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;original&quot;</span>: <span class="string">&quot;aaa.jpg&quot;</span>,	<span class="comment">//图片源文件名</span></span><br><span class="line">	<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;.jpg&quot;</span>,		<span class="comment">//图片后缀</span></span><br><span class="line">	<span class="attr">&quot;size&quot;</span>: <span class="number">10240000</span>,	<span class="comment">//图片大小</span></span><br><span class="line">	<span class="attr">&quot;title&quot;</span>: <span class="string">&quot;aaa&quot;</span>,		<span class="comment">//图片img标签上的属性title</span></span><br><span class="line">	<span class="attr">&quot;url&quot;</span>: <span class="string">&quot;/upload/fsf3r.jpg&quot;</span>			<span class="comment">//图片上传之后的url</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了就这样</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>UEditor</tag>
      </tags>
  </entry>
  <entry>
    <title>使用docker玩转php开发环境</title>
    <url>/2017/11/16/%E4%BD%BF%E7%94%A8docker%E7%8E%A9%E8%BD%ACphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁</p>
<p>先看<code>Dockerfile</code>:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 使用基于alpine linux 的镜像，体积小，下载快</span><br><span class="line">FROM php:7.0-cli-alpine</span><br><span class="line"></span><br><span class="line"># 使用中科大的源加快下载速度</span><br><span class="line">RUN sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br><span class="line"></span><br><span class="line"># 安装下基本的php扩展</span><br><span class="line">RUN docker-php-ext-install pdo pdo_mysql mysqli</span><br></pre></td></tr></table></figure>

<h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker build -t heropoo/php-cli-alpine .  <span class="comment">#先切换到你的Dockerfile目录</span></span><br></pre></td></tr></table></figure>

<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -it --rm --name php-cli-server -p 8080:80  -v //c/Users/ttt/www:/usr/src/www -w /usr/src/www php:7.0-cli-alpine php -S 0.0.0.0:80</span><br></pre></td></tr></table></figure>
<p>这句好长啊，解释下各个参数：</p>
<blockquote>
<p>-t在新容器内指定一个伪终端或终端</p>
<p>-i    允许你对容器内的标准输入 (STDIN) </p>
<p>-p 映射宿主机端口到容器的端口，上面就是宿主机的8080到容器的80</p>
<p>-v 挂载宿主机目录到容器的目录，上面就是宿主机/c/Users/ttt/www到容器/usr/src/www    </p>
<p>-w    设置工作目录</p>
<p>–rm 容器运行完之后删除</p>
<p>–name    给容器名字</p>
<p>php -S 0.0.0.0:80 就是用php内置的服务器启动一个web服务了，简单点来 哈哈 </p>
</blockquote>
<p>我系统是windows，我在浏览器访问docker的web服务：<code>http://ip:8080</code>,ip是你的docker的ip,就可以了。</p>
<p>是不是很好玩😜</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>虚拟化</tag>
        <tag>容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>2018,新年快乐！</title>
    <url>/2017/12/31/2018-happy-new-year/</url>
    <content><![CDATA[<p><img src="/assets/images/20180101000832.png" alt="example-pic"></p>
<p>2018年了，新年快乐！</p>
<p>加油！</p>
]]></content>
      <categories>
        <category>岁月静好</category>
      </categories>
      <tags>
        <tag>岁月静好</tag>
      </tags>
  </entry>
  <entry>
    <title>整理几个常用的国内源（持续更新）</title>
    <url>/2018/01/20/cn-mirrors/</url>
    <content><![CDATA[<p>最后更新：2019-11-17</p>
<h3 id="Linux以及一些开源软件"><a href="#Linux以及一些开源软件" class="headerlink" title="Linux以及一些开源软件"></a>Linux以及一些开源软件</h3><p>一些企业的：</p>
<ul>
<li>网易开源镜像站 <a href="http://mirrors.163.com/">http://mirrors.163.com/</a></li>
<li>搜狐开源镜像站 <a href="http://mirrors.sohu.com/">http://mirrors.sohu.com/</a></li>
<li>阿里云源镜像站 <a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com/</a></li>
<li>首都在线 <a href="http://mirrors.yun-idc.com/">http://mirrors.yun-idc.com/</a></li>
</ul>
<p>各大高校的：</p>
<ul>
<li>中科大开源镜像站 <a href="http://mirrors.ustc.edu.cn/">http://mirrors.ustc.edu.cn/</a></li>
<li>清华大学开源软件镜像站 <a href="https://mirrors.tuna.tsinghua.edu.cn/">https://mirrors.tuna.tsinghua.edu.cn/</a></li>
<li>华中科技大学开源镜像站 <a href="http://mirror.hust.edu.cn/">http://mirror.hust.edu.cn/</a></li>
<li>浙江大学开源镜像站 <a href="http://mirrors.zju.edu.cn/">http://mirrors.zju.edu.cn/</a></li>
<li>东软信息学院开源镜像站 <a href="http://mirrors.neusoft.edu.cn/">http://mirrors.neusoft.edu.cn/</a></li>
<li>北京理工大学开源软件镜像 <a href="http://mirror.bit.edu.cn/">http://mirror.bit.edu.cn/</a></li>
<li>北京交通大学自由与开源软件镜像站 <a href="https://mirror.bjtu.edu.cn/">https://mirror.bjtu.edu.cn/</a></li>
<li>兰州大学开源社区镜像站 <a href="http://mirror.lzu.edu.cn/">http://mirror.lzu.edu.cn/</a></li>
<li>上海交通大学 <a href="http://ftp.sjtu.edu.cn/">http://ftp.sjtu.edu.cn/</a></li>
<li>东北大学 <a href="http://mirror.neu.edu.cn/">http://mirror.neu.edu.cn/</a></li>
</ul>
<h3 id="js-npm"><a href="#js-npm" class="headerlink" title="js npm"></a>js npm</h3><ul>
<li>淘宝NPM镜像 <a href="http://npm.taobao.org/">http://npm.taobao.org/</a></li>
</ul>
<h3 id="php-composer"><a href="#php-composer" class="headerlink" title="php composer"></a>php composer</h3><ul>
<li>阿里云：<a href="https://developer.aliyun.com/composer">https://developer.aliyun.com/composer</a></li>
<li>LaravelChina社区提供的镜像地址： <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a></li>
<li>安畅网络：<a href="https://php.cnpkg.org/">https://php.cnpkg.org/</a></li>
<li>Composer中文网： <a href="https://pkg.phpcomposer.com/">https://pkg.phpcomposer.com/</a></li>
</ul>
<h3 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h3><ul>
<li>中科大 <a href="http://mirrors.ustc.edu.cn/help/rust-static.html">Rust Toolchain反向代理</a></li>
<li>中科大 <a href="http://mirrors.ustc.edu.cn/help/crates.io-index.html">Rust Crates 源</a></li>
</ul>
<h3 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h3><ul>
<li>阿里云Go Module代理仓库服务 <a href="https://mirrors.aliyun.com/goproxy/">https://mirrors.aliyun.com/goproxy/</a></li>
</ul>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul>
<li>DaoCloud <a href="https://www.daocloud.io/mirror">https://www.daocloud.io/mirror</a></li>
<li>阿里云 要注册独立分配 <a href="https://yq.aliyun.com/articles/29941">https://yq.aliyun.com/articles/29941</a></li>
</ul>
<p>大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~</p>
]]></content>
      <categories>
        <category>资源</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>JavaScript</tag>
        <tag>Linux</tag>
        <tag>Docker</tag>
        <tag>Rust</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>如果编程语言是一种武器(转自互联网)</title>
    <url>/2018/01/23/If-the-programming-language-is-a-weapon/</url>
    <content><![CDATA[<p>对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己</p>
<p><img src="/assets/images/uuaMZv.png" alt="pic"></p>
<p>C语言是M1式加兰德步枪，很老但可靠。</p>
<p><img src="/assets/images/mE3eaiv.png" alt="pic"></p>
<p>C++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。</p>
<p><img src="/assets/images/yuMVfu.png" alt="pic"></p>
<p>Perl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。</p>
<p><img src="/assets/images/UvUNJz.png" alt="pic"></p>
<p>Java是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。</p>
<p><img src="/assets/images/veQb227.png" alt="pic"></p>
<p>Scala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。</p>
<p><img src="/assets/images/3yYZVj2.png" alt="pic"></p>
<p>JavaScript是一把宝剑，但没有剑柄。</p>
<p><img src="/assets/images/3qIb6rU.png" alt="pic"></p>
<p>Go语言是一种自制的”if err != nil”发令枪，每一次发射后，你都必须要检查它是否真的发射了。</p>
<p><img src="/assets/images/AFZBvy2.png" alt="pic"></p>
<p>Rust语言是一种3D打印出的枪。将来也许真的能派上用场。</p>
<p><img src="/assets/images/2URZfy.png" alt="pic"></p>
<p>bash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。</p>
<p><img src="/assets/images/v2U3qef.png" alt="pic"></p>
<p>Python是一种”v2/v3”双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。</p>
<p><img src="/assets/images/7VZvMn.png" alt="pic"></p>
<p>Ruby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。</p>
<p><img src="/assets/images/iUFzqi.png" alt="pic"></p>
<p>PHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。</p>
<p><img src="/assets/images/eAj6Nra.png" alt="pic"></p>
<p>Mathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。</p>
<p><img src="/assets/images/7v6jei.png" alt="pic"></p>
<p>C#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。</p>
<p><img src="/assets/images/jUR7be.png" alt="pic"></p>
<p>Prolog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。</p>
<p><img src="/assets/images/bM3aaab.png" alt="pic"></p>
<p>Lisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。</p>
]]></content>
      <categories>
        <category>互联网</category>
      </categories>
      <tags>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust更换国内源</title>
    <url>/2018/01/24/change-rust-mirrors/</url>
    <content><![CDATA[<p>今天学cargo这节，<code>cargo build</code>时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大<del>(￣▽￣)</del>*)</p>
<p>教程开始：</p>
<p>设置两个环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure>
<p>或者直接写入<code>~/.bashrc</code></p>
<p>使用ustcu的源下载安装rust</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh</span><br></pre></td></tr></table></figure>
<p>编辑<code>~/.cargo/config</code>写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[registry]</span><br><span class="line">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line">replace-with = &#x27;ustc&#x27;</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure>
<p>现在cargo安装外部依赖是不是贼溜~😉</p>
]]></content>
      <categories>
        <category>Rust</category>
      </categories>
      <tags>
        <tag>Rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的一些基本操作【持续更新】</title>
    <url>/2018/03/31/git/</url>
    <content><![CDATA[<p>经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。</p>
<h2 id="Branch-分支操作"><a href="#Branch-分支操作" class="headerlink" title="Branch 分支操作"></a>Branch 分支操作</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch  <span class="comment">#只显示本地分支</span></span><br><span class="line">git branch -a <span class="comment">#显示本地分支和远程分支</span></span><br></pre></td></tr></table></figure>

<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git checkout -b branch_name</span><br><span class="line"><span class="comment">#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name</span></span><br></pre></td></tr></table></figure>

<h3 id="推送远程分支"><a href="#推送远程分支" class="headerlink" title="推送远程分支"></a>推送远程分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin branch_name</span><br></pre></td></tr></table></figure>

<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git branch -d branch_name</span><br><span class="line"><span class="comment"># 删除本地分支后并删除远程分支</span></span><br><span class="line">git push --delete origin branch_name</span><br></pre></td></tr></table></figure>

<h2 id="Tag-标签操作"><a href="#Tag-标签操作" class="headerlink" title="Tag 标签操作"></a>Tag 标签操作</h2><h3 id="查看tag列表"><a href="#查看tag列表" class="headerlink" title="查看tag列表"></a>查看tag列表</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<h3 id="新增tag"><a href="#新增tag" class="headerlink" title="新增tag"></a>新增tag</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag tag_name <span class="comment"># 比如v1.0</span></span><br></pre></td></tr></table></figure>

<h3 id="推送本地指定tag到远程"><a href="#推送本地指定tag到远程" class="headerlink" title="推送本地指定tag到远程"></a>推送本地指定tag到远程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin tag_name </span><br></pre></td></tr></table></figure>

<h3 id="推送全部本地tag到远程"><a href="#推送全部本地tag到远程" class="headerlink" title="推送全部本地tag到远程"></a>推送全部本地tag到远程</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push --tags </span><br></pre></td></tr></table></figure>

<h3 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除tag</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git tag -d </span><br><span class="line"><span class="comment"># 删除tag后并删除远程tag</span></span><br><span class="line">git push --delete origin tag_name</span><br></pre></td></tr></table></figure>

<h2 id="submodule子模块操作"><a href="#submodule子模块操作" class="headerlink" title="submodule子模块操作"></a>submodule子模块操作</h2><h3 id="子模块的添加"><a href="#子模块的添加" class="headerlink" title="子模块的添加"></a>子模块的添加</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule add &lt;url&gt; &lt;path&gt;</span><br></pre></td></tr></table></figure>
<p>其中，<code>url</code>为子模块的路径，<code>path</code>为该子模块存储的目录路径。</p>
<p>执行成功后，<code>git status</code>会看到项目中修改了<code>.gitmodules</code>，并增加了一个新文件（为刚刚添加的路径）</p>
<p><code>git diff --cached</code>查看修改内容可以看到增加了子模块，并且新文件下为子模块的提交hash摘要</p>
<p><code>git commit</code>提交即完成子模块的添加</p>
<h3 id="子模块的clone"><a href="#子模块的clone" class="headerlink" title="子模块的clone"></a>子模块的clone</h3><p>克隆项目后，默认子模块目录下无任何内容，需要在项目目录中执行以下命令clone子模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure>

<h3 id="子模块的更新"><a href="#子模块的更新" class="headerlink" title="子模块的更新"></a>子模块的更新</h3><p>如果项目中提交了子模块的最新更新：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule update</span><br></pre></td></tr></table></figure>

<p>如果项目中未提交子模块的最新更新：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git submodule update --remote</span><br></pre></td></tr></table></figure>

<h3 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h3><ol>
<li><code>rm -rf 子模块目录</code> 删除子模块目录及源码</li>
<li><code>vi .gitmodules</code> 删除项目目录下<code>.gitmodules</code>文件中子模块相关条目</li>
<li><code>vi .git/config</code> 删除配置项中子模块相关信息</li>
<li><code>rm .git/module/子模块目录</code> 删除模块下的子模块目录，每个子模块对应一个目录</li>
</ol>
<p>执行完成后，再执行添加子模块命令即可，如果仍然报错，执行如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git rm --cached 子模块名称</span><br></pre></td></tr></table></figure>
<p>完成删除后，提交到仓库即可。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="github中fork的项目与原作者同步"><a href="#github中fork的项目与原作者同步" class="headerlink" title="github中fork的项目与原作者同步"></a>github中fork的项目与原作者同步</h3><p>假如一个项目<code>Evil-S0ul/write-doc</code>地址: <a href="https://github.com/Evil-S0ul/write-doc">https://github.com/Evil-S0ul/write-doc</a></p>
<p>我fork之后的项目是<code>heropoo/write-doc</code>地址: <a href="https://github.com/heropoo/write-doc">https://github.com/heropoo/write-doc</a></p>
<p>接下来开始操作：</p>
<ol>
<li>切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> write-doc</span><br><span class="line">git remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc</span><br></pre></td></tr></table></figure></li>
<li>fetch刚添加的源分支到本地<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch Evil-S0ul</span><br></pre></td></tr></table></figure></li>
<li>合并两个版本的代码<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git merge Evil-S0ul/master</span><br></pre></td></tr></table></figure></li>
<li>最后把合并后的代码push到你的Github项目上去就ok啦<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="检出远程的某个分支或者tag"><a href="#检出远程的某个分支或者tag" class="headerlink" title="检出远程的某个分支或者tag"></a>检出远程的某个分支或者tag</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git checkout branch_name</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git checkout tag_name</span><br></pre></td></tr></table></figure>

<h3 id="同步且merge其他远程分支到当前本地分支"><a href="#同步且merge其他远程分支到当前本地分支" class="headerlink" title="同步且merge其他远程分支到当前本地分支"></a>同步且merge其他远程分支到当前本地分支</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git pull origin other_branch_name</span><br></pre></td></tr></table></figure>

<h3 id="Git无法pull仓库refusing-to-merge-unrelated-histories"><a href="#Git无法pull仓库refusing-to-merge-unrelated-histories" class="headerlink" title="Git无法pull仓库refusing to merge unrelated histories"></a>Git无法pull仓库refusing to merge unrelated histories</h3><p>有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报<code>refusing to merge unrelated histories</code>的错。解决方法是加一个参数<code>--allow-unrelated-histories</code>。</p>
<p>假如我们的分支是master</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>

<p>最后更新： 2020-05-22 17:05:50</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用PHP写Git的自动部署webhook脚本</title>
    <url>/2018/05/01/git-webhook/</url>
    <content><![CDATA[<p>现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。</p>
<h3 id="最简单的流程"><a href="#最简单的流程" class="headerlink" title="最简单的流程"></a>最简单的流程</h3><p>比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是<code>git pull origin master</code>。</p>
<h3 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h3><ul>
<li>编写<code>webhook.php</code></li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 在此可以写校验权限密码之类的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$path</span> = dirname(<span class="keyword">__DIR__</span>);</span><br><span class="line"><span class="variable">$log_file</span> = <span class="variable">$path</span>.<span class="string">&#x27;/runtime/logs/webhook-pull-error-output.log&#x27;</span>;	<span class="comment">//错误日志文件的路径</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$descriptorspec</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// 标准输入，子进程从此管道中读取数据</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// 标准输出，子进程向此管道中写入数据</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;file&quot;</span>, <span class="variable">$log_file</span>, <span class="string">&quot;a&quot;</span>) <span class="comment">// 标准错误，写入到一个文件</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$cwd</span> = <span class="variable">$path</span>;</span><br><span class="line"><span class="variable">$env</span> = <span class="keyword">array</span>(<span class="string">&#x27;PATH&#x27;</span> =&gt; <span class="variable">$_SERVER</span>[<span class="string">&#x27;PATH&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$process</span> = proc_open(<span class="string">&#x27;sudo git pull origin master&#x27;</span>, <span class="variable">$descriptorspec</span>, <span class="variable">$pipes</span>, <span class="variable">$cwd</span>, <span class="variable">$env</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (is_resource(<span class="variable">$process</span>)) &#123;</span><br><span class="line">    <span class="comment">// $pipes 现在看起来是这样的：</span></span><br><span class="line">    <span class="comment">// 0 =&gt; 可以向子进程标准输入写入的句柄</span></span><br><span class="line">    <span class="comment">// 1 =&gt; 可以从子进程标准输出读取的句柄</span></span><br><span class="line">    <span class="comment">// 错误输出将被追加到文件 /tmp/error-output.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> stream_get_contents(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line">    fclose(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。</span></span><br><span class="line">    <span class="variable">$return_value</span> = proc_close(<span class="variable">$process</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL.<span class="string">&quot;command returned <span class="subst">$return_value</span>\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>添加php脚本的执行用户sudoers中</li>
</ul>
<p>比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">visudo</span><br><span class="line">--------------------------------</span><br><span class="line">...</span><br><span class="line"><span class="comment">#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的</span></span><br><span class="line">www-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git</span><br></pre></td></tr></table></figure>

<ul>
<li>push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Git</tag>
        <tag>Webhook</tag>
      </tags>
  </entry>
  <entry>
    <title>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</title>
    <url>/2018/08/02/composer-mirrors/</url>
    <content><![CDATA[<p>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</p>
<h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><p>被墙使用国外代理上网，总是一种行之有效的方法。假如你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置两个环境变量<code>http_proxy</code>和<code>https_proxy</code>就可以使用了。</p>
<p>Mac OS / Linux 终端</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:1080</span><br><span class="line"><span class="built_in">export</span> https_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure>
<p>windows cmd命令行</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br><span class="line"><span class="built_in">set</span> https_proxy=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure>

<p>这样就可以了，愉快的下载各种包吧~</p>
<h3 id="使用国内镜像地址"><a href="#使用国内镜像地址" class="headerlink" title="使用国内镜像地址"></a>使用国内镜像地址</h3><blockquote>
<ul>
<li>阿里云提供的镜像地址(推荐)：<a href="https://developer.aliyun.com/composer">https://developer.aliyun.com/composer</a></li>
<li>cnpkg提供的镜像地址： <a href="https://php.cnpkg.org">https://php.cnpkg.org</a></li>
<li>LaravelChina社区提供的镜像地址： <a href="https://packagist.laravel-china.org">https://packagist.laravel-china.org</a></li>
<li>Composer中文网提供的镜像地址： <a href="https://packagist.phpcomposer.com">https://packagist.phpcomposer.com</a></li>
</ul>
</blockquote>
<p>镜像使用方法:</p>
<p>全局配置（推荐）:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>

<p>取消镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure>

<p>在单独项目中使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>

<p>在单独项目中取消配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer config --unset repos.packagist</span><br></pre></td></tr></table></figure>

<p>—- 最后更新时间： 2020-03-25 10:02</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Bing搜索引擎做站内搜索</title>
    <url>/2018/09/15/bing-site-search/</url>
    <content><![CDATA[<p>因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。</p>
<p>大概是这样的效果<br><img src="/assets/images/20180916201818.png" alt="example-pic"></p>
<p>观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字<code>git site:www.ioio.pw</code>提交之后的url是<code>https://bing.com/search?q=git+site%3Awww.ioio.pw</code></p>
<p>所以开始写个简单的form表单就好了，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>bing search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bing Search<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://bing.com/search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;searchForm&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;q&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;site&quot;</span> <span class="attr">value</span>=<span class="string">&quot;www.ioio.pw&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">	<span class="keyword">var</span> searchForm = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;searchForm&#x27;</span>);</span></span><br><span class="line"><span class="javascript">	searchForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> url = <span class="built_in">this</span>.action;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> q = <span class="built_in">this</span>.children[<span class="string">&#x27;q&#x27;</span>].value;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> site = <span class="built_in">this</span>.children[<span class="string">&#x27;site&#x27;</span>].value;</span></span><br><span class="line"><span class="javascript">		<span class="keyword">var</span> url = url + <span class="string">&#x27;?q=&#x27;</span>+q+<span class="string">&#x27; site:&#x27;</span>+ site;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">window</span>.open(url);</span></span><br><span class="line"><span class="javascript">		<span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">	&#125;;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>好了，搞定~</p>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>搜索引擎</tag>
        <tag>站内搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker容器动态添加端口</title>
    <url>/2018/09/16/docker-container-port/</url>
    <content><![CDATA[<p>突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。</p>
<p>参考：</p>
<ul>
<li><a href="https://blog.csdn.net/zuoshenglo/article/details/78402772">怎么给运行中的docker容器添加新的端口</a></li>
<li><a href="https://blog.csdn.net/wesleyflagon/article/details/78961990">修改docker容器端口映射的方法</a></li>
<li><a href="https://blog.csdn.net/xfks55/article/details/50148389">iptable规则查看，添加，删除和修改</a></li>
</ul>
<h2 id="方法1-修改iptables端口映射"><a href="#方法1-修改iptables端口映射" class="headerlink" title="方法1 修改iptables端口映射"></a>方法1 修改iptables端口映射</h2><blockquote>
<p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p>
</blockquote>
<p>比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -vnL</span><br></pre></td></tr></table></figure>

<p>在结果中有一条：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Chain DOCKER</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80</span><br></pre></td></tr></table></figure>
<p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3</p>
<p>也可以通过inspect命令查看容器ip</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker inspect containerId |grep IPAddress</span><br></pre></td></tr></table></figure>

<p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81</span><br></pre></td></tr></table></figure>

<p>如果加错了或者想修改：</p>
<p>先显示行号查看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -vnL DOCKER --line-number</span><br></pre></td></tr></table></figure>

<p>删除规则3</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo iptables -t nat -D DOCKER 3</span><br></pre></td></tr></table></figure>

<h2 id="方法2-修改容器配置文件"><a href="#方法2-修改容器配置文件" class="headerlink" title="方法2 修改容器配置文件"></a>方法2 修改容器配置文件</h2><p>容器的配置文件<code>/var/lib/docker/containers/[containerId]</code>目录下，<code>hostconfig.json</code>和<code>config.v2.json</code><br>修改好之后，重启容器服务。</p>
<h2 id="方法3-把运行中的容器生成新的镜像，然后运行新的镜像"><a href="#方法3-把运行中的容器生成新的镜像，然后运行新的镜像" class="headerlink" title="方法3 把运行中的容器生成新的镜像，然后运行新的镜像"></a>方法3 把运行中的容器生成新的镜像，然后运行新的镜像</h2><ol>
<li><p>提交一个运行中的容器为镜像</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker commit containerid heropoo/example</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行<code>heropoo/example</code>镜像并添加8080映射容器80端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:80  heropoo/example /bin/sh</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>试试吧~😎</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>虚拟化</tag>
        <tag>容器</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>盗将行(转)</title>
    <url>/2018/09/18/%E7%9B%97%E5%B0%86%E8%A1%8C/</url>
    <content><![CDATA[<p>野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……</p>
<p>野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……</p>
<p>公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”</p>
<p>“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”</p>
<p>“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……</p>
<p>作者：一个人的兵荒馬乱<br>链接：<a href="https://www.jianshu.com/p/7aa6bfbb0df1">https://www.jianshu.com/p/7aa6bfbb0df1</a><br>來源：简书</p>
]]></content>
      <categories>
        <category>听风雨</category>
      </categories>
      <tags>
        <tag>听风雨</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Yii2查询数据对象ActiveRecord的json序列化问题</title>
    <url>/2018/10/16/yii2-activerecord-to-json/</url>
    <content><![CDATA[<p>今天在使用<code>json_encode</code>函数序列化Yii2查询得到的数据模型对象（通常继承<code>ActiveRecord</code>类）时，发现返回结果是<code>&#123;&#125;</code>,而不是预期的数据库字段键值对这种形式：<code>&#123;&quot;name&quot;： &quot;xxx&quot;, &quot;sex&quot;: 1&#125;</code></p>
<p>后来赶时间就直接在手动处理了下，改动了下模型对象让它接入<code>JsonSerializable</code>接口，并实现其接口方法，类似这样；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> <span class="keyword">implements</span> \<span class="title">JsonSerializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//... 其他代码</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonSerialize</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toArray();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后完美的解决了。 </p>
<p>但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： <code>\yii\helpers\BaseJson::encode($user)</code>。然后翻了翻源代码，部分代码是这样的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//from \yii\helpers\BaseJson::processData</span></span><br><span class="line"><span class="keyword">if</span> (is_object(<span class="variable">$data</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> <span class="keyword">instanceof</span> JsExpression) &#123;</span><br><span class="line">        <span class="variable">$token</span> = <span class="string">&quot;!&#123;[<span class="subst">$expPrefix</span>=&quot;</span> . count(<span class="variable">$expressions</span>) . <span class="string">&#x27;]&#125;!&#x27;</span>;</span><br><span class="line">        <span class="variable">$expressions</span>[<span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$token</span> . <span class="string">&#x27;&quot;&#x27;</span>] = <span class="variable">$data</span>-&gt;expression;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$token</span>;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$data</span> <span class="keyword">instanceof</span> \JsonSerializable) &#123;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;jsonSerialize();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$data</span> <span class="keyword">instanceof</span> Arrayable) &#123; <span class="comment">// &lt;---here</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$data</span>-&gt;toArray();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> (<span class="variable">$data</span> <span class="keyword">instanceof</span> \SimpleXMLElement) &#123;</span><br><span class="line">        <span class="variable">$data</span> = (<span class="keyword">array</span>) <span class="variable">$data</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$result</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$data</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$result</span>[<span class="variable">$name</span>] = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$result</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$data</span> === []) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> \<span class="built_in">stdClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作者在处理数据的时候做了判断，<code>ActiveRecord</code>类接了<code>Arrayable</code>接口，然后作者也是使用<code>toArray()</code>方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Yii2</tag>
      </tags>
  </entry>
  <entry>
    <title>修复gitment评论</title>
    <url>/2018/10/27/fix-gitment/</url>
    <content><![CDATA[<p>最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。</p>
<p>从我开始用gitment的评论系统，总共出现过两次问题：</p>
<h2 id="1-github-issue-label的字符长度限制"><a href="#1-github-issue-label的字符长度限制" class="headerlink" title="1. github-issue label的字符长度限制"></a>1. github-issue label的字符长度限制</h2><p>这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page_date = <span class="string">&#x27;&#123;&#123; page.date &#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="keyword">if</span>(page_date &gt; <span class="string">&#x27;2018-04-31 00:00:00 +0000&#x27;</span>)&#123;</span><br><span class="line">    id = page_date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    <span class="attr">id</span>: id, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">    <span class="attr">owner</span>: <span class="string">&#x27;heropoo&#x27;</span>,</span><br><span class="line">    <span class="attr">repo</span>: <span class="string">&#x27;heropoo.github.io&#x27;</span>,</span><br><span class="line">    <span class="attr">oauth</span>: &#123;</span><br><span class="line">        <span class="attr">client_id</span>: <span class="string">&#x27;cccc&#x27;</span>,</span><br><span class="line">        <span class="attr">client_secret</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">gitment.render(<span class="string">&#x27;container&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-gitment-作者提供的oauth授权服务不可用"><a href="#2-gitment-作者提供的oauth授权服务不可用" class="headerlink" title="2. gitment 作者提供的oauth授权服务不可用"></a>2. gitment 作者提供的oauth授权服务不可用</h2><p>这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。</p>
<h2 id="3-升级https"><a href="#3-升级https" class="headerlink" title="3. 升级https"></a>3. 升级https</h2><p>现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ<br>但是还得修嘛。后来仔细观察了下，原来作者是使用<code>gitment</code>和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page_date = <span class="string">&#x27;&#123;&#123; page.date &#125;&#125;&#x27;</span>;</span><br><span class="line"><span class="comment">//var id = window.location.href;</span></span><br><span class="line"><span class="comment">//if(page_date &gt; &#x27;2018-04-31 00:00:00 +0000&#x27;)&#123;</span></span><br><span class="line"><span class="keyword">var</span> id = page_date;</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    <span class="attr">id</span>: id, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">    <span class="attr">owner</span>: <span class="string">&#x27;heropoo&#x27;</span>,</span><br><span class="line">    <span class="attr">repo</span>: <span class="string">&#x27;heropoo.github.io&#x27;</span>,</span><br><span class="line">    <span class="attr">oauth</span>: &#123;</span><br><span class="line">        <span class="attr">client_id</span>: <span class="string">&#x27;cccc&#x27;</span>,</span><br><span class="line">        <span class="attr">client_secret</span>: <span class="string">&#x27;xxxx&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">gitment.render(<span class="string">&#x27;container&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>好了，搞完收工。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>github-issue</tag>
        <tag>gitment</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Jupyter笔记本</title>
    <url>/2018/11/02/jupyter/</url>
    <content><![CDATA[<p>安装Jupyter笔记本，做个笔记</p>
<p>通过pip安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo pip3 install jupyter</span><br></pre></td></tr></table></figure>

<p>创建Jupyter默认配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure>
<p>生成SHA1加密的密钥，如’sha1:XXXXXX’</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ipython</span><br><span class="line">--------------------------------------</span><br><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim .jupyter/jupyter_notebook_config.py</span><br><span class="line">--------------------------------------</span><br><span class="line">c.NotebookApp.password = u<span class="string">&#x27;sha1:XXXXXX&#x27;</span></span><br></pre></td></tr></table></figure>

<p>运行jupyter</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure>

<p>可选的运行参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure>

<p>打开浏览器输入 <a href="http://localhost:8888">http://localhost:8888</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>jupyter</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL5.7的JSON基本操作</title>
    <url>/2018/11/18/mysql-json/</url>
    <content><![CDATA[<p>MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。</p>
<h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);</span><br></pre></td></tr></table></figure>
<p>json类型字段可以为NULL</p>
<h3 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&#x27;xiaoming&#x27;,&#x27;&#123;&quot;sex&quot;: 1, &quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125;&#x27;);</span><br></pre></td></tr></table></figure>
<p>json类型的字段必须时一个有效的json字符串</p>
<p>可以使用JSON_OBJECT()函数构造json对象：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&#x27;xiaohua&#x27;, JSON_OBJECT(&quot;sex&quot;, 0, &quot;age&quot;, 17));</span><br></pre></td></tr></table></figure>

<p>使用JSON_ARRAY()函数构造json数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&#x27;xiaozhang&#x27;, JSON_OBJECT(&quot;sex&quot;, 1, &quot;age&quot;, 19, &quot;tag&quot;, JSON_ARRAY(3,5,90)));</span><br></pre></td></tr></table></figure>

<p>现在查看<code>test_user</code>表中的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_user;</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">| id | name      | info                                       |</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">|  1 | xiaoming  | &#123;&quot;age&quot;: 18, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小萌&quot;&#125; |</span><br><span class="line">|  2 | xiaohua   | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0&#125;                      |</span><br><span class="line">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90]&#125;   |</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>表达式： 对象为<code>json列-&gt;&#39;$.键&#39;</code>, 数组为<code>json列-&gt;&#39;$.键[index]&#39;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&#x27;$.nick_name&#x27;, info-&gt;&#x27;$.sex&#x27;, info-&gt;&#x27;$.tag[0]&#x27; from test_user;</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">| name      | info-&gt;&#x27;$.nick_name&#x27; | info-&gt;&#x27;$.sex&#x27; | info-&gt;&#x27;$.tag[0]&#x27; |</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">| xiaoming  | &quot;小萌&quot;              | 1             | NULL             |</span><br><span class="line">| xiaohua   | NULL                | 0             | NULL             |</span><br><span class="line">| xiaozhang | NULL                | 1             | 3                |</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>等价于：对象为<code>JSON_EXTRACT(json列 , &#39;$.键&#39;)</code>，数组为<code>JSON_EXTRACT(json列 , &#39;$.键[index]&#39;)</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name, JSON_EXTRACT(info, &#x27;$.nick_name&#x27;), JSON_EXTRACT(info, &#x27;$.sex&#x27;), JSON_EXTRACT(info, &#x27;$.tag[0]&#x27;)  from test_user;</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">| name      | JSON_EXTRACT(info, &#x27;$.nick_name&#x27;) | JSON_EXTRACT(info, &#x27;$.sex&#x27;) | JSON_EXTRACT(info, &#x27;$.tag[0]&#x27;) |</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">| xiaoming  | &quot;小萌&quot;                            | 1                           | NULL                           |</span><br><span class="line">| xiaohua   | NULL                              | 0                           | NULL                           |</span><br><span class="line">| xiaozhang | NULL                              | 1                           | 3                              |</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure>

<p>不过看到上面<code>&quot;小萌&quot;</code>是带双引号的，这不是我们想要的，可以用<code>JSON_UNQUOTE</code>函数将双引号去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name, JSON_UNQUOTE(info-&gt;&#x27;$.nick_name&#x27;) from test_user where name=&#x27;xiaoming&#x27;;</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">| name     | JSON_UNQUOTE(info-&gt;&#x27;$.nick_name&#x27;) |</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">| xiaoming | 小萌                              |</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>

<p>也可以直接使用操作符<code>-&gt;&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&gt;&#x27;$.nick_name&#x27; from test_user where name=&#x27;xiaoming&#x27;;</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| name     | info-&gt;&gt;&#x27;$.nick_name&#x27; |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| xiaoming | 小萌                 |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>

<p>当然属性也可以作为查询条件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&gt;&#x27;$.nick_name&#x27; from test_user where info-&gt;&#x27;$.nick_name&#x27;=&#x27;小萌&#x27;;</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| name     | info-&gt;&gt;&#x27;$.nick_name&#x27; |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| xiaoming | 小萌                 |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>

<p>值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。</p>
<p>创建虚拟列:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info-&gt;&gt;&#x27;$.nick_name&#x27;) VIRTUAL;</span><br></pre></td></tr></table></figure>
<p>注意用操作符<code>-&gt;&gt;</code></p>
<p>使用时和普通类型的列查询是一样:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select name,nick_name from test_user where nick_name=&#x27;小萌&#x27;;</span><br><span class="line">+----------+-----------+</span><br><span class="line">| name     | nick_name |</span><br><span class="line">+----------+-----------+</span><br><span class="line">| xiaoming | 小萌      |</span><br><span class="line">+----------+-----------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>

<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>使用<code>JSON_INSERT()</code>插入新值，但不会覆盖已经存在的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_INSERT(info, &#x27;$.sex&#x27;, 1, &#x27;$.nick_name&#x27;, &#x27;小花&#x27;) where id=2;</span><br></pre></td></tr></table></figure>
<p>看下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=2;</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">| id | name    | info                                       | nick_name |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>

<p>使用<code>JSON_SET()</code>插入新值，并覆盖已经存在的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_SET(info, &#x27;$.sex&#x27;, 0, &#x27;$.nick_name&#x27;, &#x27;小张&#x27;) where id=3;</span><br></pre></td></tr></table></figure>
<p>看下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=3;</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">| id | name      | info                                                          | nick_name |</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90], &quot;nick_name&quot;: &quot;小张&quot;&#125; | 小张      |</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>

<p>使用<code>JSON_REPLACE()</code>只替换存在的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_REPLACE(info, &#x27;$.sex&#x27;, 1, &#x27;$.tag&#x27;, &#x27;[1,2,3]&#x27;) where id=2;</span><br></pre></td></tr></table></figure>
<p>看下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=2;</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">| id | name    | info                                       | nick_name |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure>
<p>可以看到tag没有更新进去</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用<code>JSON_REMOVE()</code>删除JSON元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_REMOVE(info, &#x27;$.sex&#x27;, &#x27;$.tag&#x27;) where id=1;</span><br></pre></td></tr></table></figure>
<p>看下结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=1;</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">| id | name     | info                             | nick_name |</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">|  1 | xiaoming | &#123;&quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125; | 小萌      |</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure>

<p>最后从MySQL的官方网站查看帮助文档：<a href="http://dev.mysql.com/doc/refman/5.7/en/json.html">http://dev.mysql.com/doc/refman/5.7/en/json.html</a></p>
<p>😎</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>JSON</tag>
      </tags>
  </entry>
  <entry>
    <title>从SSH私钥中重新生成公钥</title>
    <url>/2018/11/19/get-ssh-public-key-from-private-key/</url>
    <content><![CDATA[<p>从SSH私钥中重新生成公钥</p>
<p>假如我们的私钥是<code>id_rsa</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -y -f id_rsa</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdqNYfRhP/4Y1Kwr5/ZfRPbQkDEKQ9sLpGYex2bzXsPIXZmpgI4yUkLkQRCyvrMoZQKOcabb+GgnrYJvPR1rO/CVI9bfUw+MD1OFvnJUI2deATTeMj2hlY/IDSS1q3AG1ZEztFLizTiJqZvkjx/WPXR/b7ZIVV5DRIeaUMCfEjNIRD+spcJ5ALBuwGPO+4irAXIxgTxbYMDD2ASnpr6v7oSzc0N5ZhZ7rV1dk6hA/RowqYO7DwIvZtOAc55sv6pSUYG3RUJhnkzcmE5VTbyTMKB6O738np6DEw5soWdL1ITPgLE+uJcTt8tcOmPkBXv+45A4TuJ5ksONil8xhfVYG3</span><br></pre></td></tr></table></figure>

<p>可以直接重定向到文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -y -f id_rsa &gt; id_rsa.pub</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>关于PHP Composer 版本号前置~与^符号的区别(转)</title>
    <url>/2018/12/29/php-composer-version/</url>
    <content><![CDATA[<p><code>~</code>和<code>^</code>的意思很接近，在<code>x.y</code>的情况下是一样的，都是代表<code>x.y &lt;= 版本号 &lt; (x+1).0</code>。但是在版本号是<code>x.y.z</code>的情况下有区别，举个例子：</p>
<ul>
<li><p><code>~1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 1.3.0</code></p>
</li>
<li><p><code>^1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 2.0.0</code></p>
</li>
</ul>
<p>原文链接： <a href="https://www.cnblogs.com/hcpzhe/p/7909651.html">https://www.cnblogs.com/hcpzhe/p/7909651.html</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP多进程之pcntl扩展的使用</title>
    <url>/2019/01/02/php-pcntl/</url>
    <content><![CDATA[<p>PHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以直接使用<code>pecl install pcntl</code>，或者去<code>https://pecl.php.net/</code>下载源码包手动编译安装。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先举个官方的栗子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="comment">//父进程和子进程都会执行下面代码</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//错误处理：创建子进程失败时返回-1.</span></span><br><span class="line">     <span class="keyword">die</span>(<span class="string">&#x27;could not fork&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;</span><br><span class="line">     <span class="comment">//父进程会得到子进程号，所以这里是父进程执行的逻辑</span></span><br><span class="line">     pcntl_wait(<span class="variable">$status</span>); <span class="comment">//等待子进程中断，防止子进程成为僵尸进程。</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用到的函数:</p>
<ul>
<li><p><a href="https://secure.php.net/manual/zh/function.pcntl-fork.php">pcntl_fork</a>在当前进程当前位置产生分支（子进程）。fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。</p>
</li>
<li><p><a href="https://secure.php.net/manual/zh/function.pcntl-wait.php">pcntl_wait</a> 等待或返回fork的子进程状态。这个函数会挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。</p>
</li>
</ul>
<p>再来个经典栗子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$children</span> = []; <span class="comment">//定义一个数组用来存储子进程的pid</span></span><br><span class="line"><span class="variable">$m</span> = <span class="number">10</span>;    <span class="comment">//fork 10次</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$x</span> = <span class="number">0</span>; <span class="variable">$x</span> &lt; <span class="variable">$m</span>; <span class="variable">$x</span>++) &#123;</span><br><span class="line">    <span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$pid</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;could not fork &#x27;</span>.<span class="variable">$x</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span>) &#123;    <span class="comment">//父进程执行的代码块</span></span><br><span class="line">        <span class="variable">$children</span>[] = <span class="variable">$pid</span>;</span><br><span class="line">        printf(<span class="string">&quot;Parent get child %d &#x27;s pid: %d\n&quot;</span>, <span class="variable">$x</span>, <span class="variable">$pid</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//子进程执行的代码块</span></span><br><span class="line">        <span class="variable">$my_pid</span> = posix_getpid();    <span class="comment">//子进程获取自己的pid</span></span><br><span class="line">        <span class="comment">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Child <span class="subst">$my_pid</span> running...\n&quot;</span>;</span><br><span class="line">        sleep(<span class="number">10</span>);        <span class="comment">//子进程干点啥 这里是睡10秒</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;...Child <span class="subst">$my_pid</span> done\n&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>);        <span class="comment">//子进程执行结束exit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count(<span class="variable">$children</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="variable">$children</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$pid</span>) &#123;</span><br><span class="line">        <span class="variable">$res</span> = pcntl_waitpid(<span class="variable">$pid</span>, <span class="variable">$status</span>, WNOHANG);    <span class="comment">//获取返回指定pid的返回状态加了第二个参数非阻塞</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$res</span> == -<span class="number">1</span> || <span class="variable">$res</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Parent get child <span class="subst">$pid</span> &#x27;s status: <span class="subst">$status</span>\n&quot;</span>;</span><br><span class="line">            <span class="keyword">unset</span>(<span class="variable">$children</span>[<span class="variable">$key</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);        <span class="comment">//每一秒去轮询没有退出的子进程状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>—- 最后更新于 2019-03-27 19:04:55</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>pcntl</tag>
      </tags>
  </entry>
  <entry>
    <title>容器的宠儿AlpineLinux的基本使用</title>
    <url>/2019/01/17/alpinelinux/</url>
    <content><![CDATA[<p>现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使用精简系统模板。尽管这样做还是很大，起码也得有个几十兆吧。所以使用一个本身体积就小的操作系统做基础模板来构建才是关键。AlpineLinux是一个使用busybox的linux操作系统，而他的体积只需要4兆多。所以对我这种喜欢轻量级的人还说，这真是好东西啊！</p>
<p>哈哈~废话不多说了，说说这个系统的基本使用吧</p>
<h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><p>更新软件包索引文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk update</span><br></pre></td></tr></table></figure>

<p>如果感觉网速很慢，那可以先换个中国的源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#中科大的源 速度杠杠的</span><br><span class="line">sed -i &#x27;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&#x27; /etc/apk/repositories</span><br></pre></td></tr></table></figure>

<p>下面我们以安装nginx为例</p>
<p>安装软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add nginx</span><br></pre></td></tr></table></figure>

<p>安装软件包到最新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk add --update nginx</span><br></pre></td></tr></table></figure>

<p>查找软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk search nginx </span><br></pre></td></tr></table></figure>

<p>卸载软件包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apk del nginx</span><br></pre></td></tr></table></figure>

<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>启动Nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure>

<p>添加nginx到启动服务中，下次开机自动运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-update add nginx</span><br></pre></td></tr></table></figure>

<p>把nginx从启动服务中移除，下次开机不会自动运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rc-update del nginx</span><br></pre></td></tr></table></figure>

<h2 id="一些网络工具所在软件包"><a href="#一些网络工具所在软件包" class="headerlink" title="一些网络工具所在软件包"></a>一些网络工具所在软件包</h2><pre><code>telnet  =&gt;  busybox-extras</code></pre>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>AlpineLinux</tag>
      </tags>
  </entry>
  <entry>
    <title>用Redis实现PHP异步队列</title>
    <url>/2019/03/29/php-queue/</url>
    <content><![CDATA[<p>最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。</p>
<p>下面引用百度百科的对<a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481">队列</a>的解释：</p>
<blockquote>
<p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。<br>简单点讲就是：先进先出</p>
</blockquote>
<p>要实现一个队列，你可以根据自身服务器资源，可选数据库或者redis或者其他更高级的队列资源来实现。</p>
<p>简单实现，大概代码是这样子的：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$items</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;items[<span class="variable">$key</span>]) <span class="keyword">or</span> <span class="keyword">$this</span>-&gt;items[<span class="variable">$key</span>] = [];</span><br><span class="line">        <span class="keyword">return</span> array_push(<span class="keyword">$this</span>-&gt;items[<span class="variable">$key</span>], <span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列头部取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     * return mixed $value 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;items[<span class="variable">$key</span>]) <span class="keyword">or</span> <span class="keyword">$this</span>-&gt;items[<span class="variable">$key</span>] = [];</span><br><span class="line">        <span class="keyword">return</span> array_shift(<span class="keyword">$this</span>-&gt;items[<span class="variable">$key</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$queue</span> = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$queue</span>-&gt;pop(<span class="string">&#x27;list_1&#x27;</span>));    <span class="comment">//输出 NULL</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$queue</span>-&gt;push(<span class="string">&#x27;list_1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;push(<span class="string">&#x27;list_1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="variable">$queue</span>-&gt;push(<span class="string">&#x27;list_1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$queue</span>-&gt;pop(<span class="string">&#x27;list_1&#x27;</span>));    <span class="comment">//输出 string(1) &quot;1&quot;</span></span><br><span class="line">var_dump(<span class="variable">$queue</span>-&gt;pop(<span class="string">&#x27;list_1&#x27;</span>));    <span class="comment">//输出 string(1) &quot;2&quot;</span></span><br></pre></td></tr></table></figure>
<p>上面是一个直接存储在数组中的队列，只能在一个php生命周期中使用。我们可以把存储的方式改成别的，例如数据库或者redis什么的。</p>
<p>这里我们使用redis，用到redis的有序列表（list）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$client</span>;  <span class="comment">//这里使用了predis这个库连接redis</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">\Predis\Client <span class="variable">$client</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client = <span class="variable">$client</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;rpush(<span class="variable">$key</span>, <span class="variable">$value</span>);  <span class="comment">//从右边入队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列头部取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed $value 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;lpop(<span class="variable">$key</span>);   <span class="comment">//从左边取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你还是可以使用上面的例子测试下。</p>
<p>当然了，还有很多情况下，我们的队列要延时出队，我们就要使用redis的另外两种数据类型：有序集合zset和哈希hlist</p>
<p>最终代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisQueue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$client</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">\Predis\Client <span class="variable">$client</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client = <span class="variable">$client</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $delay 延迟多少秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed $value 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$value</span>, <span class="variable">$delay</span> = <span class="literal">null</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_null(<span class="variable">$delay</span>))&#123;    <span class="comment">//不使用延迟的时候还是使用以前的rpush入队</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;rpush(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$time</span> = time() + <span class="variable">$delay</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$time</span> &gt; time())&#123;     <span class="comment">//还未到该入队的时间时</span></span><br><span class="line">            <span class="variable">$hash_key</span> = md5(<span class="keyword">$this</span>-&gt;randString(<span class="number">16</span>).<span class="string">&#x27;_&#x27;</span>.time().<span class="string">&#x27;_&#x27;</span>.<span class="variable">$value</span>);       <span class="comment">//生成一个唯一key</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;transaction(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$tx</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$key</span>, <span class="variable">$time</span>, <span class="variable">$hash_key</span>, <span class="variable">$value</span></span>)</span>&#123;   <span class="comment">//使用reids事务</span></span><br><span class="line">                <span class="comment">/** <span class="doctag">@var</span> \Predis\Client $tx */</span></span><br><span class="line">                <span class="variable">$tx</span>-&gt;zadd(<span class="variable">$key</span>.<span class="string">&#x27;:zset&#x27;</span>, [   </span><br><span class="line">                    <span class="variable">$hash_key</span>=&gt;<span class="variable">$time</span>    <span class="comment">//这里以生成的唯一key做 对象member 以time做分数score</span></span><br><span class="line">                ]);</span><br><span class="line">                <span class="variable">$tx</span>-&gt;hset(<span class="variable">$key</span>.<span class="string">&#x27;:hlist&#x27;</span>, <span class="variable">$hash_key</span>, <span class="variable">$value</span>);    <span class="comment">//并且保存唯一key和值的映射</span></span><br><span class="line">                <span class="variable">$tx</span>-&gt;expire(<span class="variable">$key</span>.<span class="string">&#x27;:zset&#x27;</span>, <span class="number">7</span>*<span class="number">86400</span>);     <span class="comment">//有效期7天</span></span><br><span class="line">                <span class="variable">$tx</span>-&gt;expire(<span class="variable">$key</span>.<span class="string">&#x27;:hlist&#x27;</span>, <span class="number">7</span>*<span class="number">86400</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">receive</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;getLock(<span class="variable">$key</span>.<span class="string">&#x27;:lock&#x27;</span>))&#123;   <span class="comment">//使用锁保证线程安全</span></span><br><span class="line">            <span class="variable">$keys</span> = <span class="keyword">$this</span>-&gt;client-&gt;zrangebyscore(<span class="variable">$key</span>.<span class="string">&#x27;:zset&#x27;</span>,<span class="number">0</span>, time());   <span class="comment">//按当前时间取分数小于等于当前时间的集合元素</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$keys</span>)) &#123;</span><br><span class="line">                <span class="variable">$message_datas</span> = <span class="keyword">$this</span>-&gt;client-&gt;hmget(<span class="variable">$key</span>.<span class="string">&#x27;:hlist&#x27;</span>, <span class="variable">$keys</span>);    <span class="comment">//通过这些key拿到值</span></span><br><span class="line">                <span class="keyword">$this</span>-&gt;client-&gt;transaction(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$tx</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$key</span>, <span class="variable">$keys</span>, <span class="variable">$message_datas</span></span>)</span>&#123; <span class="comment">//继续使用redis事务保证数据完整</span></span><br><span class="line">                    <span class="comment">/** <span class="doctag">@var</span> \Predis\Client $tx */</span></span><br><span class="line">                    <span class="keyword">foreach</span> (<span class="variable">$message_datas</span> <span class="keyword">as</span> <span class="variable">$i</span> =&gt; <span class="variable">$message_data</span>)&#123;</span><br><span class="line">                        <span class="variable">$tx</span>-&gt;rpush(<span class="variable">$key</span>, <span class="variable">$message_data</span>); <span class="comment">//这时候才是真正的入队</span></span><br><span class="line">                        <span class="variable">$hash_key</span> = <span class="variable">$keys</span>[<span class="variable">$i</span>];</span><br><span class="line">                        <span class="variable">$tx</span>-&gt;hdel(<span class="variable">$key</span>.<span class="string">&#x27;:hlist&#x27;</span>, <span class="variable">$hash_key</span>);    <span class="comment">//从hash列表删除元素</span></span><br><span class="line">                        <span class="variable">$tx</span>-&gt;zrem(<span class="variable">$key</span>.<span class="string">&#x27;:zset&#x27;</span>, <span class="variable">$hash_key</span>); <span class="comment">//从集合删除元素</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;releaseLock(<span class="variable">$key</span>.<span class="string">&#x27;:lock&#x27;</span>);<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;lpop(<span class="variable">$key</span>); <span class="comment">//出队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLock</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;client-&gt;incr(<span class="variable">$key</span>) != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$ttl</span> = <span class="keyword">$this</span>-&gt;client-&gt;ttl(<span class="variable">$key</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$ttl</span> == -<span class="number">1</span>) &#123;    <span class="comment">//forever</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;client-&gt;expire(<span class="variable">$key</span>, <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releaseLock</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client-&gt;del(<span class="variable">$key</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">randString</span>(<span class="params"><span class="variable">$length</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$str</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="variable">$strPol</span> = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>;</span><br><span class="line">        <span class="variable">$max</span> = strlen(<span class="variable">$strPol</span>) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$length</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$str</span> .= <span class="variable">$strPol</span>[mt_rand(<span class="number">0</span>, <span class="variable">$max</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要看上面入队（push）和出队（receive）方法，我代码写了详细的注释。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Queue</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转ElasticSearch全文搜索</title>
    <url>/2019/04/09/elasticsearch/</url>
    <content><![CDATA[<p>玩转ElasticSearch全文搜索，做个笔记。</p>
<h2 id="运行ElasticSearch服务"><a href="#运行ElasticSearch服务" class="headerlink" title="运行ElasticSearch服务"></a>运行ElasticSearch服务</h2><p>为了省去繁杂的安装，跳过万恶的环境，我们使用Docker容器来跑ElasticSearch的服务。</p>
<p>我们使用官方的<code>elasticsearch:5.6.16-alpine</code>作为基础镜像，另外添加一个中文分词插件<code>elasticsearch-ik</code></p>
<p>我们的Dockerfile内容如下，很简单，只需两行哟：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM elasticsearch:5.6.16-alpine</span><br><span class="line">RUN elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip</span><br></pre></td></tr></table></figure>

<p>构建镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t heropoo/elasticsearch-ik .</span><br></pre></td></tr></table></figure>

<p>运行容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; heropoo/elasticsearch-ik</span><br></pre></td></tr></table></figure>

<p>因为ElasticSearch提供了REST API，我们直接可以用浏览器访问 <a href="http://localhost:9200">http://localhost:9200</a> 看看服务是否正常。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p>
<h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引。查找数据的时候，直接查找该索引。所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。</p>
<p>查看当前节点的所有 Index</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X GET &#x27;http://localhost:9200/_cat/indices?v&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同一个 Index 里面的 Document，不要求有相同的字段结构，但是最好保持相同，这样有利于提高搜索效率。</p>
<h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>不同的 Type 应该有相似的字段结构，举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p>
<p>下面的命令可以列出每个 Index 所包含的 Type</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/_mapping?pretty=true&#x27;</span><br></pre></td></tr></table></figure>
<p>pretty参数是优化显示结果易于查看</p>
<h2 id="Index操作"><a href="#Index操作" class="headerlink" title="Index操作"></a>Index操作</h2><h3 id="查看当前节点的所有-Index"><a href="#查看当前节点的所有-Index" class="headerlink" title="查看当前节点的所有 Index"></a>查看当前节点的所有 Index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X GET &#x27;http://localhost:9200/_cat/indices?v&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="新建Index"><a href="#新建Index" class="headerlink" title="新建Index"></a>新建Index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X PUT &#x27;http://localhost:9200/weather&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="删除Index"><a href="#删除Index" class="headerlink" title="删除Index"></a>删除Index</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X DELETE &#x27;http://localhost:9200/weather&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="新建一个-Index，指定需要分词的字段"><a href="#新建一个-Index，指定需要分词的字段" class="headerlink" title="新建一个 Index，指定需要分词的字段"></a>新建一个 Index，指定需要分词的字段</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X PUT &#x27;localhost:9200/accounts&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;person&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;user&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;desc&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>
<p>上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段 user、title、desc 这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。</p>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h3><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X PUT &#x27;localhost:9200/accounts/person/1&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X POST &#x27;localhost:9200/accounts/person&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;软件工程师&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>其实PUT就是存在时修改，不存在时创建。</p>
<h3 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h3><p>向/Index/Type/Id发出 GET 请求，就可以查看这条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/accounts/person/1?pretty=true&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X DELETE &#x27;localhost:9200/accounts/person/1&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><p>参考上面创建操作，用PUT方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -X PUT &#x27;localhost:9200/accounts/person/1&#x27; -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三1&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师1&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理1&quot;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/accounts/person/_search&#x27;</span><br></pre></td></tr></table></figure>

<h3 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/accounts/person/_search&#x27;  -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;数据库&quot; &#125;&#125;</span><br><span class="line">&#125;&#x27; </span><br></pre></td></tr></table></figure>

<h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>如果有多个搜索关键字， Elastic 认为它们是or关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/accounts/person/_search&#x27;  -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>如果要执行多个关键词的and搜索，必须使用布尔查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl &#x27;localhost:9200/accounts/person/_search&#x27;  -d &#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>搞定~</p>
<p>参考：<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Docker</tag>
        <tag>全文搜索</tag>
        <tag>ElasticSearch</tag>
      </tags>
  </entry>
  <entry>
    <title>常用nginx web配置</title>
    <url>/2019/05/22/nginx-web-conf/</url>
    <content><![CDATA[<p>常用nginx对于web项目配置整理，做个笔记。</p>
<h2 id="php-web项目配置"><a href="#php-web项目配置" class="headerlink" title="php web项目配置"></a>php web项目配置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  listen [::]:80;</span><br><span class="line"></span><br><span class="line">  # 设置上传最大为5MB</span><br><span class="line">  client_max_body_size 5m;</span><br><span class="line"></span><br><span class="line">  root /srv/www/wechat/public;</span><br><span class="line"></span><br><span class="line">  index index.html index.php;</span><br><span class="line"></span><br><span class="line">  server_name example.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    try_files $uri $uri/ =404;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # 支持php</span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    # Check that the PHP script exists before passing it</span><br><span class="line">    try_files $fastcgi_script_name =404;</span><br><span class="line"></span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line"></span><br><span class="line">    # With php-fpm (or other unix sockets):</span><br><span class="line">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">    #  # With php-cgi (or other tcp sockets):</span><br><span class="line">    #  fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">  # concurs with nginx&#x27;s one</span><br><span class="line">  #</span><br><span class="line">  location ~ /\.ht &#123;</span><br><span class="line">    deny all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="php-web项目配置-支持laravel、symfony、Yii2单入口"><a href="#php-web项目配置-支持laravel、symfony、Yii2单入口" class="headerlink" title="php web项目配置 支持laravel、symfony、Yii2单入口"></a>php web项目配置 支持laravel、symfony、Yii2单入口</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  location / &#123;</span><br><span class="line">    # First attempt to serve request as file, then</span><br><span class="line">    # as directory, then fall back to displaying a 404.</span><br><span class="line">    #try_files $uri $uri/ =404;  # 注释上面这句，使用下面这句</span><br><span class="line">    try_files $uri $uri/ /index.php?$query_string;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="php-web项目配置-支持ThinkPHP"><a href="#php-web项目配置-支持ThinkPHP" class="headerlink" title="php web项目配置 支持ThinkPHP"></a>php web项目配置 支持ThinkPHP</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  location ~ \.php$ &#123;</span><br><span class="line">    # regex to split $uri to $fastcgi_script_name and $fastcgi_path</span><br><span class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line"></span><br><span class="line">    # Check that the PHP script exists before passing it</span><br><span class="line">    try_files $fastcgi_script_name =404;</span><br><span class="line"></span><br><span class="line">    # Bypass the fact that try_files resets $fastcgi_path_info</span><br><span class="line">    # see: http://trac.nginx.org/nginx/ticket/321</span><br><span class="line">    set $path_info $fastcgi_path_info;</span><br><span class="line">    fastcgi_param PATH_INFO $path_info;   # ThinkPHP依赖PATH_INFO这个环境变量</span><br><span class="line"></span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    include fastcgi.conf;</span><br><span class="line"></span><br><span class="line">    # With php-fpm (or other unix sockets):</span><br><span class="line">    fastcgi_pass unix:/var/run/php/php7.2-fpm.sock;</span><br><span class="line">    #  # With php-cgi (or other tcp sockets):</span><br><span class="line">    #  fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="php-web项目配置-禁止访问上传目录下的php文件"><a href="#php-web项目配置-禁止访问上传目录下的php文件" class="headerlink" title="php web项目配置 禁止访问上传目录下的php文件"></a>php web项目配置 禁止访问上传目录下的php文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">  # 这个块location要放在 location ~ \.php$ 之前</span><br><span class="line">  location ~ ^/uploads/.*\.php$ &#123;     # 所有/uploads文件目录下的.php文件都被禁止访问</span><br><span class="line">    #deny all;  # 返回403</span><br><span class="line">    return 404; #返回404</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大文件上传</title>
    <url>/2019/05/23/upload-large-file/</url>
    <content><![CDATA[<p>最近在做视频上传，我们使用切片上传大文件，做个笔记。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>使用js读取form表单中选择的file，计算文件md5值，并上传md5值到服务端，检查文件是否已上传过（类似秒传功能）</li>
<li>若文件未上传过，按照其大小切成1MB大小的块，小于1MB的不用切</li>
<li>用ajax异步提交切好的块上传至服务端（一个块一个请求，不阻塞，多线程）</li>
<li>当上传完成所有切块，发起一个合并文件的请求，服务端进行前面上传的文件块的合并，合并完成即上传完成。</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>js计算文件md5使用<a href="https://www.npmjs.com/package/spark-md5">spark-md5.js</a>,据说这个库使用的是世界上最快的md5算法。</p>
<p>js对文件切片并使用ajax上传切片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">let</span> size = file.size; <span class="comment">//获取文件大小</span></span><br><span class="line"><span class="keyword">const</span> shardSize = <span class="number">1024</span> * <span class="number">1024</span>; <span class="comment">// 块大小1MB</span></span><br><span class="line"><span class="keyword">let</span> shardCount = <span class="built_in">Math</span>.ceil(size/shardSize); <span class="comment">//可切成的块数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; shardCount; i++)&#123;</span><br><span class="line">  <span class="keyword">let</span> start = i * shardSize,</span><br><span class="line">      end = <span class="built_in">Math</span>.min(size, start + shardSize);</span><br><span class="line">  <span class="keyword">let</span> form = <span class="keyword">new</span> FormData();</span><br><span class="line">  form.append(<span class="string">&#x27;file&#x27;</span>, file.slice(start, end));  <span class="comment">//用slice方法切片</span></span><br><span class="line">  form.append(<span class="string">&#x27;size&#x27;</span>, end - start);</span><br><span class="line">  form.append(<span class="string">&#x27;name&#x27;</span>, name);</span><br><span class="line">  form.append(<span class="string">&#x27;total&#x27;</span>, shardCount);</span><br><span class="line">  form.append(<span class="string">&#x27;md5&#x27;</span>, file_md5); <span class="comment">//文件md5值</span></span><br><span class="line">  form.append(<span class="string">&#x27;index&#x27;</span>, i);  <span class="comment">//第几块</span></span><br><span class="line"></span><br><span class="line">  $.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;upload.php?type=shard&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: form,</span><br><span class="line">    <span class="comment">// async: false,     //是否异步上传，默认true</span></span><br><span class="line">    <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">//很重要，告诉jquery不要对form进行处理</span></span><br><span class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">//很重要，指定为false才能形成正确的Content-Type</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 成功回调</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>php端保存切片</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$path</span> = <span class="keyword">__DIR__</span> . <span class="string">&#x27;/uploads&#x27;</span>;</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$total</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;total&#x27;</span>];</span><br><span class="line"><span class="variable">$index</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;index&#x27;</span>];</span><br><span class="line"><span class="variable">$size</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line"><span class="variable">$dst_file</span> = <span class="variable">$path</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$index</span>;  <span class="comment">// 切片文件存储的文件名 </span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> json_encode([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">400</span>, <span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$file</span>[<span class="string">&quot;error&quot;</span>]]);<span class="keyword">die</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$res</span> = move_uploaded_file(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$dst_file</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res</span>) &#123;</span><br><span class="line">        file_put_contents(<span class="variable">$dst_file</span> . <span class="string">&#x27;.info&#x27;</span>, <span class="variable">$size</span>);  <span class="comment">// 切片上传成功，写一个保存其大小的文件，后续合并是校验文件用的到</span></span><br><span class="line">        <span class="keyword">echo</span> json_encode([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>, <span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;shard ok&#x27;</span>]);<span class="keyword">die</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> json_encode([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">400</span>, <span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;shard move_uploaded_file error&#x27;</span>]);<span class="keyword">die</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>php端合并</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeFile</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$total</span>, &amp;<span class="variable">$msg</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 校验切片文件是否都上传完成，是否完整</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$total</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line">        <span class="keyword">if</span> (!file_exists(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span> . <span class="string">&#x27;.info&#x27;</span>) || !file_exists(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;shard error <span class="subst">$i</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (filesize(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span>) != file_get_contents(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span> . <span class="string">&#x27;.info&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;shard size error <span class="subst">$i</span>&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    @unlink(<span class="variable">$name</span>);</span><br><span class="line">    <span class="keyword">if</span> (file_exists(<span class="variable">$name</span> . <span class="string">&#x27;.lock&#x27;</span>)) &#123;   <span class="comment">//加锁 防止有其他进程写文件，造成文件损坏</span></span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;on lock&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    touch(<span class="variable">$name</span> . <span class="string">&#x27;.lock&#x27;</span>);</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$name</span>, <span class="string">&#x27;a+&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$total</span>; <span class="variable">$i</span>++) &#123;   <span class="comment">//按切片顺序写入文件</span></span><br><span class="line">        <span class="variable">$shardFile</span> = fopen(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span>, <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">        <span class="variable">$shardData</span> = fread(<span class="variable">$shardFile</span>, filesize(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span>));</span><br><span class="line">        fwrite(<span class="variable">$file</span>, <span class="variable">$shardData</span>);</span><br><span class="line">        fclose(<span class="variable">$shardFile</span>);</span><br><span class="line">        unlink(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span>); </span><br><span class="line">        unlink(<span class="variable">$name</span> . <span class="string">&#x27;-&#x27;</span> . <span class="variable">$total</span> . <span class="string">&#x27;:&#x27;</span> . <span class="variable">$i</span> . <span class="string">&#x27;.info&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    unlink(<span class="variable">$name</span> . <span class="string">&#x27;.lock&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我也写好了一个demo，<a href="https://github.com/heropoo/just-code/tree/master/upload-large-file">传送门</a></p>
<p>下面是这个demo的效果图：</p>
<p><img src="/assets/images/WX20190523-103939.png" alt="pic-0"><br><img src="/assets/images/WX20190523-104043.png" alt="pic-1"></p>
<p>这个demo有些方面还不够完善，后续持续完善吧～</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>JavaScript</tag>
        <tag>HTML5</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title>在网页上使用MathJax渲染LaTex格式数学公式</title>
    <url>/2019/05/27/math-jax/</url>
    <content><![CDATA[<p>最近在看一些机器学习算法的东西，用到好多数学公式，发现有个很强大的js库可以完美的渲染LaTex格式数学公式，值得推荐下。</p>
<script type="text/javascript" src="//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

<h2 id="使用方法："><a href="#使用方法：" class="headerlink" title="使用方法："></a>使用方法：</h2><p>在你的html模版中引入这个js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>写几个公式测试下：</p>
<p>质能方程是$$E=mc^2$$</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$E=mc^2$$</span><br></pre></td></tr></table></figure>

<p>k-means算法的代价函数:<br>$$J(c,\mu )=\sum_{i=1}^{k}\left | x^{(i)}-\mu _{c^{(i)}} \right |^{2}$$</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$J(c,\mu )=\sum_&#123;i=1&#125;^&#123;k&#125;\left \| x^&#123;(i)&#125;-\mu _&#123;c^&#123;(i)&#125;&#125; \right \|^&#123;2&#125;$$</span><br></pre></td></tr></table></figure>

<p>感受效果还可以😉😛😛</p>
<p>再附送一个在线的公式编辑器<a href="https://www.codecogs.com/latex/eqneditor.php">https://www.codecogs.com/latex/eqneditor.php</a></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>数学</tag>
        <tag>MathJax</tag>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux软连接和硬链接</title>
    <url>/2019/05/29/linux-symbolic-link/</url>
    <content><![CDATA[<p>Linux软连接和硬链接，一个经常傻傻分不清楚的概念，现在我们仔细理一理。</p>
<h3 id="1-Linux链接概念"><a href="#1-Linux链接概念" class="headerlink" title="1.Linux链接概念"></a>1.Linux链接概念</h3><p>Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。</p>
<ul>
<li>【硬连接】</li>
</ul>
<p>硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。</p>
<ul>
<li>【软连接】</li>
</ul>
<p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。</p>
<h3 id="2-通过实验加深理解"><a href="#2-通过实验加深理解" class="headerlink" title="2.通过实验加深理解"></a>2.通过实验加深理解</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Linux]$ touch f1 <span class="comment">#创建一个测试文件f1</span></span><br><span class="line">[root@Linux]$ ln f1 f2 <span class="comment">#创建f1的一个硬连接文件f2</span></span><br><span class="line">[root@Linux]$ ln -s f1 f3 <span class="comment">#创建f1的一个符号连接文件f3</span></span><br><span class="line">[root@Linux]$ ls -li <span class="comment"># -i参数显示文件的inode节点信息</span></span><br><span class="line">total 0</span><br><span class="line">9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f1</span><br><span class="line">9797648 -rw-r--r-- 2 root root 0 Apr 21 08:11 f2</span><br><span class="line">9797649 lrwxrwxrwx 1 root root 2 Apr 21 08:11 f3 -&gt; f1</span><br></pre></td></tr></table></figure>
<p>从上面的结果中可以看出，硬连接文件f2与原文件f1的inode节点相同，均为9797648，然而符号连接文件的inode节点不同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@Linux]$ <span class="built_in">echo</span> <span class="string">&quot;I am f1 file&quot;</span> &gt;&gt;f1</span><br><span class="line">[root@Linux]$ cat f1</span><br><span class="line">I am f1 file</span><br><span class="line">[root@Linux]$ cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@Linux]$ cat f3</span><br><span class="line">I am f1 file</span><br><span class="line">[root@Linux]$ rm -f f1</span><br><span class="line">[root@Linux]$ cat f2</span><br><span class="line">I am f1 file</span><br><span class="line">[root@Linux]$ cat f3</span><br><span class="line">cat: f3: No such file or directory</span><br></pre></td></tr></table></figure>
<p>通过上面的测试可以看出：当删除原始文件f1后，硬连接f2不受影响，但是符号连接f1文件无效。</p>
<h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p>
<ul>
<li><p>1).删除符号连接f3,对f1,f2无影响；</p>
</li>
<li><p>2).删除硬连接f2，对f1,f3也无影响；</p>
</li>
<li><p>3).删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</p>
</li>
<li><p>4).同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</p>
</li>
</ul>
<p>本文摘自互联网，侵删。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL权限管理</title>
    <url>/2019/06/10/mysql-user/</url>
    <content><![CDATA[<p>MySQL中的账号与权限管理</p>
<h3 id="权限系统的工作原理"><a href="#权限系统的工作原理" class="headerlink" title="权限系统的工作原理"></a>权限系统的工作原理</h3><p>MySQL权限系统通过下面两个阶段进行认证：</p>
<ol>
<li>对连接的用户进行身份认证，合法的用户通过认证、不合法的用户拒绝连接。</li>
<li>对通过认证的合法用户赋予相应的权限，用户可以在这些权限范围内对数据库做相应的操作。</li>
</ol>
<p>对于身份，MySQL是通过<code>IP地址</code>和<code>用户名</code>联合进行确认的，例如MySQL安装默认创建的用户<code>root@localhost</code>表示用户root只能从本地（localhost）进行连接才可以通过认证，此用户从其他任何主机对数据库进行的连接都将被拒绝。也就是说，同样的一个用户名，如果来自不同的IP地址，则MySQL将其视为不同的用户。</p>
<p>MySQL的权限表在数据库启动地时候就载入内存，当用户通过身份认证后，就在内存中进行相应权限的存取，这样，此用户就可以在数据库中做权限范围内的各种操作了。</p>
<h3 id="权限表"><a href="#权限表" class="headerlink" title="权限表"></a>权限表</h3><p>系统会用到名叫“mysql”数据库（安装MySQL时被创建）中user表作为权限表</p>
<p>我们看看user表的结构（注：本文示例使用的是MySQL5.7.25版本）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc user;</span><br><span class="line">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class="line">| Field                  | Type                              | Null | Key | Default               | Extra |</span><br><span class="line">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class="line">| Host                   | char(60)                          | NO   | PRI |                       |       |</span><br><span class="line">| User                   | char(32)                          | NO   | PRI |                       |       |</span><br><span class="line">| Select_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Insert_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Update_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Delete_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Create_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Drop_priv              | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Reload_priv            | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Shutdown_priv          | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Process_priv           | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| File_priv              | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Grant_priv             | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| References_priv        | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Index_priv             | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Alter_priv             | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Show_db_priv           | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Super_priv             | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Create_tmp_table_priv  | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Lock_tables_priv       | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Execute_priv           | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Repl_slave_priv        | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Repl_client_priv       | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Create_view_priv       | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Show_view_priv         | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Create_routine_priv    | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Alter_routine_priv     | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Create_user_priv       | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Event_priv             | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Trigger_priv           | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| Create_tablespace_priv | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| ssl_type               | enum(&#x27;&#x27;,&#x27;ANY&#x27;,&#x27;X509&#x27;,&#x27;SPECIFIED&#x27;) | NO   |     |                       |       |</span><br><span class="line">| ssl_cipher             | blob                              | NO   |     | NULL                  |       |</span><br><span class="line">| x509_issuer            | blob                              | NO   |     | NULL                  |       |</span><br><span class="line">| x509_subject           | blob                              | NO   |     | NULL                  |       |</span><br><span class="line">| max_questions          | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class="line">| max_updates            | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class="line">| max_connections        | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class="line">| max_user_connections   | int(11) unsigned                  | NO   |     | 0                     |       |</span><br><span class="line">| plugin                 | char(64)                          | NO   |     | mysql_native_password |       |</span><br><span class="line">| authentication_string  | text                              | YES  |     | NULL                  |       |</span><br><span class="line">| password_expired       | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">| password_last_changed  | timestamp                         | YES  |     | NULL                  |       |</span><br><span class="line">| password_lifetime      | smallint(5) unsigned              | YES  |     | NULL                  |       |</span><br><span class="line">| account_locked         | enum(&#x27;N&#x27;,&#x27;Y&#x27;)                     | NO   |     | N                     |       |</span><br><span class="line">+------------------------+-----------------------------------+------+-----+-----------------------+-------+</span><br><span class="line">45 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>当用户进行连接的时候，权限表的存取过程有以下现个阶段。</p>
<ul>
<li>先从user表中的<code>Host</code>、<code>User</code>、<code>authentication_string</code>(密码)、<code>password_expired</code>和<code>password_lifetime</code>这几个字段中判断连接的IP、用户名和密码是否存在于表中，如果存在，则通过身份验证，否则拒绝连接。</li>
<li>如果验证通过，再通过以<code>_priv</code>结尾的那些枚举字段（这些都是用户的权限开关（Y/N））得到用户拥有的权限。</li>
</ul>
<h3 id="账号管理"><a href="#账号管理" class="headerlink" title="账号管理"></a>账号管理</h3><p>账号管理主要包括账号的创建、权限更改和账号的删除。用户连接数据库的第一步都从账号创建开始。</p>
<p>有两种方法可以用来创建账号：使用<code>GRANT</code>语法创建或者直接操作授权表，但更推荐使用第一种方法，因为操作简单，出错几率更少。</p>
<p>我们用几个例子来说明吧：</p>
<ol>
<li><p>创建用户</p>
<p> 创建用户tom，权限为可以在所有数据库上执行所有权限，只能从本地进行连接。</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO tom@localhost IDENTIFIED BY &#x27;tompassword&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>
<p> 如果你执行这个语句碰到以下错误：<code>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements</code>。这个是密码策略的问题，请设置比较复杂的密码，或者修改密码策略，这里就不详细说了。</p>
<p> GRANT命令说明：</p>
<blockquote>
<p><code>ALL PRIVILEGES</code>是表示所有权限，你也可以使用select、update等权限。</p>
</blockquote>
<blockquote>
<p><code>ON</code>用来指定权限针对哪些库和表，格式是<code>数据库名.表名</code>，这里<code>*.*</code>表示所有数据库和所有表。</p>
</blockquote>
<blockquote>
<p><code>TO</code> 表示将权限赋予某个用户。<code>tom@localhost</code>，表示<code>tom</code>用户，<code>@</code>后面接限制的主机，可以是<code>IP</code>、<code>IP段</code>、<code>域名</code>以及<code>%</code>，<code>%</code>表示任何地方。注意：这里%有的版本不包括本地，以前碰到过给某个用户设置了%允许任何地方登录，但是在本地登录不了，这个和版本有关系，遇到这个问题再加一个localhost的用户就可以了。</p>
</blockquote>
<blockquote>
<p><code>IDENTIFIED BY</code> 指定用户的登录密码， 这里<code>&#39;tompassword&#39;</code>就是用户tom的密码。</p>
</blockquote>
<blockquote>
<p><code>WITH GRANT OPTION</code> 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。</p>
</blockquote>
<p> 备注：可以使用<code>GRANT</code>重复给用户添加权限，权限叠加，比如你先给用户添加一个select权限，然后又给用户添加一个insert权限，那么该用户就同时拥有了select和insert权限。</p>
<p> 使用<code>GRANT</code>操作用户权限之后，再使用<code>FLUSH PRIVILEGES</code>命令来刷新权限使其立即生效</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看用户的权限</p>
<p> 直接使用<code>SHOW GRANTS</code>默认查看<code>root@localhost</code>的权限</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW GRANTS;</span><br><span class="line">+---------------------------------------------------------------------+</span><br><span class="line">| Grants for root@localhost                                           |</span><br><span class="line">+---------------------------------------------------------------------+</span><br><span class="line">| GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION |</span><br><span class="line">| GRANT PROXY ON &#x27;&#x27;@&#x27;&#x27; TO &#x27;root&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION        |</span><br><span class="line">+---------------------------------------------------------------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p> 查看某个用户的权限</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW GRANTS FOR tom@localhost;</span><br><span class="line">+----------------------------------------------------------------------+</span><br><span class="line">| Grants for tom@localhost                                           |</span><br><span class="line">+----------------------------------------------------------------------+</span><br><span class="line">| GRANT ALL PRIVILEGES ON *.* TO &#x27;tom&#x27;@&#x27;localhost&#x27; WITH GRANT OPTION |</span><br><span class="line">+----------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>收回权限</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; REVOKE DELETE ON *.* FROM &#x27;tom&#x27;@&#x27;localhost&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>对用户账户重命名</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; RENAME USER tom@localhost to jerry@localhost;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除用户</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; DROP USER jerry@localhost;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改和重置密码</p>
<ul>
<li><p>用<code>SET PASSWORD</code>命令修改密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SET PASSWORD FOR root@localhost = PASSWORD(&#x27;123456&#x27;);</span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.01 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接修改user表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; UPDATE user SET authentication_string=PASSWORD(&#x27;123456root&#x27;) WHERE user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 1</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>在未登录mysql的情况下用mysqladmin命令修改密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqladmin -uroot -p123456root password 123321</span><br></pre></td></tr></table></figure>
</li>
<li><p>在丢失root密码的时候<br>关闭mysql服务（根据你自己的操作系统自行关闭），然后跳过权限认证启动mysql服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysqld_safe --skip-grant-tables &amp;   </span><br></pre></td></tr></table></figure>

<p>无密码登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -uroot</span><br></pre></td></tr></table></figure>
<p>进入之后使用上面直接修改user表的方法修改root用户的密码</p>
<p>最后杀掉<code>mysqld_safe</code>和<code>mysqld</code>的进程</p>
<p>重新启动mysql服务，用新的密码登陆吧。</p>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>阳光明媚，时光静好</title>
    <url>/2019/06/14/good-morning/</url>
    <content><![CDATA[<p>起了个老早，去练车，本来睡不好，还有点情绪，在下车过桥时突然发现早上的阳光格外的好。</p>
<p><img src="/assets/images/20190619210216.jpg" alt="example-pic"></p>
<p><img src="/assets/images/20190619210339.jpg" alt="example-pic"></p>
<p><img src="/assets/images/20190619210745.jpg" alt="example-pic"></p>
]]></content>
      <categories>
        <category>岁月静好</category>
      </categories>
      <tags>
        <tag>岁月静好</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH使用密码自动登录脚本</title>
    <url>/2019/08/28/ssh-autologin/</url>
    <content><![CDATA[<p>分享一个ssh使用密码登录的脚本</p>
<p>写个脚本<code>autologin.sh</code>内容如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="built_in">set</span> user [lindex <span class="variable">$argv</span> 0]</span><br><span class="line"><span class="built_in">set</span> host [lindex <span class="variable">$argv</span> 1]</span><br><span class="line"><span class="built_in">set</span> password [lindex <span class="variable">$argv</span> 2]</span><br><span class="line"><span class="built_in">set</span> timeout -1</span><br><span class="line"></span><br><span class="line">spawn ssh <span class="variable">$user</span>@<span class="variable">$host</span></span><br><span class="line">expect <span class="string">&quot;password:*&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span></span><br><span class="line">interact</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure>

<p>并给这个脚本可执行权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod +x ./autologin.sh</span><br></pre></td></tr></table></figure>

<ul>
<li>使用方法：<br>假如平时使用<code>ssh root@127.0.0.1</code>,然后输入密码<code>123456</code>登录</li>
</ul>
<p>现在用这个脚本就是</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./autologin.sh root 127.0.0.1 123456</span><br></pre></td></tr></table></figure>

<p>挺方便的吧～</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>使用命令操作VirtualBox</title>
    <url>/2019/12/17/virtual-box-manager/</url>
    <content><![CDATA[<p>最近一时头脑发热找了本汇编的书在啃，书中是使用手动操作<code>VirtualBox</code>挂载硬盘调试的不太方便，遂使用命令搞起，效果还不错。</p>
<p>VirtualBox是个免费的虚拟机软件，不论linux、win、mac下都可以直接安装使用。同时它还支持使用命令控制，感觉这一点给了开发者无限的想象空间和创造力。</p>
<p>而所有的操作都是一个<code>VBoxManage</code>命令完成的。现在整理一下：</p>
<p>下面我们以创建一个名为<code>learnAsm</code>的虚拟机为例，展示下基本的操作。</p>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>创建并注册</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage createvm --name learnAsm --register </span><br></pre></td></tr></table></figure>

<h2 id="删除虚拟机"><a href="#删除虚拟机" class="headerlink" title="删除虚拟机"></a>删除虚拟机</h2><p>（！！！会删除所有虚拟硬盘，谨慎操作！！！）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage unregistervm --delete learnAsm</span><br></pre></td></tr></table></figure>

<h2 id="注册虚拟机"><a href="#注册虚拟机" class="headerlink" title="注册虚拟机"></a>注册虚拟机</h2><p>假如你注销了，或者从别人那里复制来的虚拟机文件，可以重新注册它</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage registervm &lt;your vms path&gt;/learnAsm.vbox</span><br></pre></td></tr></table></figure>

<h2 id="仅注销虚拟机"><a href="#仅注销虚拟机" class="headerlink" title="仅注销虚拟机"></a>仅注销虚拟机</h2><p>注销之后VirtualBox列表中显示了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage unregistervm learnAsm</span><br></pre></td></tr></table></figure>

<h2 id="列出已有的虚拟机"><a href="#列出已有的虚拟机" class="headerlink" title="列出已有的虚拟机"></a>列出已有的虚拟机</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage list vms</span><br></pre></td></tr></table></figure>

<h2 id="设置系统类型Ubuntu-64"><a href="#设置系统类型Ubuntu-64" class="headerlink" title="设置系统类型Ubuntu_64"></a>设置系统类型Ubuntu_64</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyvm learnAsm --ostype Ubuntu_64</span><br></pre></td></tr></table></figure>

<h2 id="设置内存大小1G"><a href="#设置内存大小1G" class="headerlink" title="设置内存大小1G"></a>设置内存大小1G</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyvm learnAsm --memory 1024 <span class="comment">#单位MB</span></span><br></pre></td></tr></table></figure>

<h2 id="建立虚拟磁盘"><a href="#建立虚拟磁盘" class="headerlink" title="建立虚拟磁盘"></a>建立虚拟磁盘</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage createmedium --filename HDD10G.vdi --size 10000 <span class="comment">#单位MB</span></span><br></pre></td></tr></table></figure>

<h2 id="创建存储控制器IDE、SATA"><a href="#创建存储控制器IDE、SATA" class="headerlink" title="创建存储控制器IDE、SATA"></a>创建存储控制器IDE、SATA</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage storagectl learnAsm --name IDE --add ide --controller PIIX4 --bootable on</span><br><span class="line">VBoxManage storagectl learnAsm --name SATA --add sata --controller IntelAhci --bootable on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除</span></span><br><span class="line">VBoxManage storagectl learnAsm --name IDE --remove</span><br><span class="line">VBoxManage storagectl learnAsm --name SATA --remove</span><br></pre></td></tr></table></figure>

<h2 id="关联虚拟机磁盘"><a href="#关联虚拟机磁盘" class="headerlink" title="关联虚拟机磁盘"></a>关联虚拟机磁盘</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage storageattach learnAsm --storagectl SATA --port 0 --device 0 --<span class="built_in">type</span> hdd --medium HDD10G.vdi</span><br><span class="line">VBoxManage storageattach learnAsm --storagectl IDE --port 0 --device 0 --<span class="built_in">type</span> hdd --medium HDD10G.vdi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解除关联</span></span><br><span class="line">VBoxManage storageattach learnAsm --storagectl SATA --port 0 --device 0 --<span class="built_in">type</span> hdd --medium none</span><br><span class="line">VBoxManage storageattach learnAsm --storagectl IDE --port 0 --device 0 --<span class="built_in">type</span> hdd --medium none</span><br></pre></td></tr></table></figure>

<h2 id="增加光驱"><a href="#增加光驱" class="headerlink" title="增加光驱"></a>增加光驱</h2><p>关联光盘镜像文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage storageattach learnAsm --storagectl IDE --port 1 --device 0 --<span class="built_in">type</span> dvddrive --medium ubuntu.iso</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解除关联：</span></span><br><span class="line">VBoxManage storageattach learnAsm --storagectl IDE --port 1 --device 0 --<span class="built_in">type</span> dvddrive --medium none</span><br></pre></td></tr></table></figure>

<h2 id="设置CPU数量（必须打开IOAPIC）"><a href="#设置CPU数量（必须打开IOAPIC）" class="headerlink" title="设置CPU数量（必须打开IOAPIC）"></a>设置CPU数量（必须打开IOAPIC）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyvm learnAsm  --ioapic on</span><br><span class="line">VBoxManage modifyvm learnAsm --cpus 4</span><br></pre></td></tr></table></figure>

<h2 id="设置CPU运行峰值"><a href="#设置CPU运行峰值" class="headerlink" title="设置CPU运行峰值"></a>设置CPU运行峰值</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage modifyvm learnAsm --cpuexecutioncap 80</span><br></pre></td></tr></table></figure>

<h2 id="查看虚拟机信息"><a href="#查看虚拟机信息" class="headerlink" title="查看虚拟机信息"></a>查看虚拟机信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage -v</span><br><span class="line">VBoxManage list vms  <span class="comment">#列出虚拟机</span></span><br><span class="line">VBoxManage list runningvms  <span class="comment">#列出正在运行的虚拟机</span></span><br><span class="line">VBoxManage showvminfo learnAsm <span class="comment">#显示虚拟机learnAsm的信息</span></span><br><span class="line">VBoxManage list hdds <span class="comment">#列出硬盘</span></span><br><span class="line">VBoxManage list dvds <span class="comment">#列出dvd</span></span><br></pre></td></tr></table></figure>

<h2 id="启动虚拟机"><a href="#启动虚拟机" class="headerlink" title="启动虚拟机"></a>启动虚拟机</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage startvm learnAsm --<span class="built_in">type</span> headless <span class="comment">#--type headless参数是无窗口静默启动</span></span><br></pre></td></tr></table></figure>

<h2 id="保持状态关闭虚拟机"><a href="#保持状态关闭虚拟机" class="headerlink" title="保持状态关闭虚拟机"></a>保持状态关闭虚拟机</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage controlvm learnAsm savestate</span><br></pre></td></tr></table></figure>

<h2 id="放弃已保存的状态"><a href="#放弃已保存的状态" class="headerlink" title="放弃已保存的状态"></a>放弃已保存的状态</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage discardstate learnAsm</span><br></pre></td></tr></table></figure>

<h2 id="断电关闭虚拟机"><a href="#断电关闭虚拟机" class="headerlink" title="断电关闭虚拟机"></a>断电关闭虚拟机</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage controlvm learnAsm poweroff</span><br></pre></td></tr></table></figure>

<h2 id="正常关机-不能彻底关闭，一直处于stopping状态"><a href="#正常关机-不能彻底关闭，一直处于stopping状态" class="headerlink" title="正常关机[不能彻底关闭，一直处于stopping状态]"></a>正常关机[不能彻底关闭，一直处于stopping状态]</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">VBoxManage controlvm learnAsm acpipowerbutton</span><br></pre></td></tr></table></figure>

<p>常用的大概就这些吧。</p>
<p>我是配合Makefile使用的，这里附上，大家感兴趣可以看看</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">ASM_FILE=c05_mbr.asm</span><br><span class="line">DIST_PATH=.</span><br><span class="line">VHD_FILE=<span class="variable">$(DIST_PATH)</span>/boot.vhd</span><br><span class="line">VM_NAME=learn-asm</span><br><span class="line"></span><br><span class="line"><span class="variable">$(VHD_FILE)</span>: mbr.bin</span><br><span class="line">	-rm <span class="variable">$(VHD_FILE)</span></span><br><span class="line">	VBoxManage convertfromraw mbr.bin <span class="variable">$(VHD_FILE)</span> --format VHD --variant Fixed</span><br><span class="line"></span><br><span class="line"><span class="section">mbr.bin: <span class="variable">$(ASM_FILE)</span></span></span><br><span class="line">	nasm -f bin <span class="variable">$(ASM_FILE)</span> -o mbr.bin -l mbr.list</span><br><span class="line"></span><br><span class="line"><span class="section">run: <span class="variable">$(VHD_FILE)</span> change-vm-vhd</span></span><br><span class="line">	VBoxManage startvm <span class="variable">$(VM_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="section">stop:</span></span><br><span class="line">	-VBoxManage controlvm <span class="variable">$(VM_NAME)</span> savestate</span><br><span class="line">	-VBoxManage discardstate <span class="variable">$(VM_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="section">create-vm: <span class="variable">$(VHD_FILE)</span></span></span><br><span class="line">	VBoxManage createvm --name <span class="variable">$(VM_NAME)</span> --register</span><br><span class="line">	VBoxManage modifyvm <span class="variable">$(VM_NAME)</span> --memory 64</span><br><span class="line">	VBoxManage storagectl <span class="variable">$(VM_NAME)</span> --name SATA --add sata --controller IntelAhci --bootable on</span><br><span class="line"></span><br><span class="line"><span class="section">change-vm-vhd: <span class="variable">$(VHD_FILE)</span></span></span><br><span class="line">	cp <span class="variable">$(VHD_FILE)</span> <span class="variable">$(VHD_FILE)</span>.bk</span><br><span class="line">	-VBoxManage discardstate <span class="variable">$(VM_NAME)</span></span><br><span class="line">	-VBoxManage storageattach <span class="variable">$(VM_NAME)</span> --storagectl SATA --port 0 --device 0 --type hdd --medium none</span><br><span class="line">	-VBoxManage closemedium disk <span class="variable">$(VHD_FILE)</span> --delete <span class="comment"># 因为硬盘是重新删除创建的，uuid也变了，直接挂载无法启动。所以这里先删除，再挂载。</span></span><br><span class="line">	mv <span class="variable">$(VHD_FILE)</span>.bk <span class="variable">$(VHD_FILE)</span></span><br><span class="line">	VBoxManage storageattach <span class="variable">$(VM_NAME)</span> --storagectl SATA --port 0 --device 0 --type hdd --medium <span class="variable">$(VHD_FILE)</span></span><br><span class="line"></span><br><span class="line"><span class="section">unregister-vm:</span></span><br><span class="line">	-VBoxManage unregistervm <span class="variable">$(VM_NAME)</span></span><br><span class="line"></span><br><span class="line"><span class="section">delete-vm:</span></span><br><span class="line">	-VBoxManage unregistervm --delete <span class="variable">$(VM_NAME)</span></span><br><span class="line"></span><br><span class="line">clean :</span><br><span class="line">	-rm -rf *.vhd *.bin *.list</span><br></pre></td></tr></table></figure>


<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/a2d4840341fb">https://www.jianshu.com/p/a2d4840341fb</a></li>
<li><a href="https://www.virtualbox.org/manual/">https://www.virtualbox.org/manual/</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>虚拟化</tag>
        <tag>VirtualBox</tag>
      </tags>
  </entry>
  <entry>
    <title>聊一聊php的序列化</title>
    <url>/2020/03/31/php-serialize/</url>
    <content><![CDATA[<p>最近在项目种经常用<code>redis</code>缓存数据序列化的数据，有点心得，我们现在聊一聊php的序列化操作</p>
<p>我们经常使用的是一对学列化函数<code>serialize</code>和<code>unserialize</code>。常用的操作很简单，就是：</p>
<ol>
<li><p>使用<code>serialize</code>序列化我们的变量使其变成字符串。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = [<span class="string">&#x27;id&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>=&gt;<span class="string">&#x27;xiaoming&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>=&gt;<span class="number">1</span>];</span><br><span class="line"><span class="variable">$dataString</span> = serialize(<span class="variable">$data</span>);</span><br><span class="line"><span class="comment">// echo $dataString</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>这些字符串可以离线保存到文件、数据库或者一些缓存介质中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// example</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;set(<span class="string">&#x27;test_user1&#x27;</span>, <span class="variable">$dataString</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在使用的时候从上面的一些介质中取出字符串，然后调用<code>unserialize</code>反序列化到变量。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$dataString</span> = <span class="variable">$redis</span>-&gt;get(<span class="string">&#x27;test_user1&#x27;</span>);</span><br><span class="line"><span class="variable">$data</span> = unserialize(<span class="variable">$dataString</span>);</span><br></pre></td></tr></table></figure>


</li>
</ol>
<p>我们再看看php各种数据类型序列化之后的结果如何：</p>
<ol>
<li><p>整型int</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 输出 i:1;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>浮点型float</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize(<span class="number">1.1</span>);</span><br><span class="line"><span class="comment">// 输出 d:1.1;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>布尔bool</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 输出 b:1;</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 输出 b:0;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>空值null</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 输出 n:1;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串string</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="comment">// 输出 s:1:&quot;1&quot;;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数组array</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> serialize([]); <span class="comment">//空数组</span></span><br><span class="line"><span class="comment">// 输出 a:0:&#123;&#125;</span></span><br><span class="line"><span class="keyword">echo</span> serialize([<span class="number">1</span>]);</span><br><span class="line"><span class="comment">// 输出 a:1:&#123;i:0;i:1;&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象object</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// 输出 O:1:&quot;A&quot;:0:&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> B();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">// 输出 O:1:&quot;B&quot;:1:&#123;s:4:&quot;name&quot;;N;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="built_in">stdClass</span>();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$b</span>);</span><br><span class="line"><span class="comment">// 输出 O:8:&quot;stdClass&quot;:0:&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$d</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$d</span>);</span><br><span class="line"><span class="comment">// 输出报错 PHP Warning:  Uncaught Exception: Serialization of &#x27;Closure&#x27; is not allowed</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>资源resource</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$f</span> = fopen(<span class="string">&quot;/tmp/t.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);  <span class="comment">//假如文件/tmp/t.txt存在</span></span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$f</span>);</span><br><span class="line">fclose(<span class="variable">$f</span>);</span><br><span class="line"><span class="comment">// 输出 todo</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>从上面可以看来php的serialize函数无法序列化一个匿名函数</p>
<p>（未完待续）</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode玩转远程开发之Docker容器</title>
    <url>/2020/04/13/vscode-remote-container/</url>
    <content><![CDATA[<p>前些日子试了下vscode配合docker容器开发，体验特别不错，比敲docker命令舒爽多了。在这里和大家分享一下。</p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先你的机器上安装好docker和vscode两个基本软件并启动它俩，这里就不多说了。接下来我们正式进入主题：</p>
<p>在vscode的扩展栏中搜索：Remote或者Containers，找到<code>Remote - Containers</code>这个插件，并且安装好，如图：<br><img src="/assets/images/20200413221730.png" alt="install"></p>
<h2 id="项目配置构建"><a href="#项目配置构建" class="headerlink" title="项目配置构建"></a>项目配置构建</h2><p>这里拿世界上最好的语言php来做个示范，使用git拉取微软官方提供的一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/microsoft/vscode-remote-try-php.git</span><br></pre></td></tr></table></figure>

<p>接下来我们使用vscode打开这个项目，我们可以看到这样的目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── .devcontainer</span><br><span class="line">│   ├── Dockerfile</span><br><span class="line">│   └── devcontainer.json</span><br><span class="line">├── .vscode</span><br><span class="line">│   └── launch.json</span><br><span class="line">└── index.php</span><br></pre></td></tr></table></figure>

<p>我们可以看到一个熟悉的<code>Dockerfile</code>， 大概看看它的内容：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">7</span>-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># Avoid warnings by switching to noninteractive</span></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=noninteractive</span><br><span class="line"></span><br><span class="line"><span class="comment"># This Dockerfile adds a non-root user with sudo access. Use the &quot;remoteUser&quot;</span></span><br><span class="line"><span class="comment"># property in devcontainer.json to use it. On Linux, the container user&#x27;s GID/UIDs</span></span><br><span class="line"><span class="comment"># will be updated to match your local UID/GID (when using the dockerFile property).</span></span><br><span class="line"><span class="comment"># See https://aka.ms/vscode-remote/containers/non-root-user for details.</span></span><br><span class="line"><span class="keyword">ARG</span> USERNAME=vscode  <span class="comment"># vscode用户</span></span><br><span class="line"><span class="keyword">ARG</span> USER_UID=<span class="number">1000</span></span><br><span class="line"><span class="keyword">ARG</span> USER_GID=$USER_UID</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/security.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Configure apt and install packages</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get -y install --no-install-recommends apt-utils dialog 2&gt;&amp;1 \</span></span><br><span class="line"><span class="bash">    <span class="comment">#</span></span></span><br><span class="line">    <span class="comment"># install git iproute2, procps, lsb-release (useful for CLI installs)</span></span><br><span class="line">    &amp;&amp; apt-get -y install git openssh-client less iproute2 procps iproute2 lsb-release \</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Install xdebug  安装了xdebug</span></span><br><span class="line">    &amp;&amp; yes | pecl install xdebug \</span><br><span class="line">    &amp;&amp; echo <span class="string">&quot;zend_extension=$(find /usr/local/lib/php/extensions/ -name xdebug.so)&quot;</span> &gt; /usr/local/etc/php/conf.d/xdebug.ini \</span><br><span class="line">    &amp;&amp; echo <span class="string">&quot;xdebug.remote_enable=on&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/xdebug.ini \</span><br><span class="line">    &amp;&amp; echo <span class="string">&quot;xdebug.remote_autostart=on&quot;</span> &gt;&gt; /usr/local/etc/php/conf.d/xdebug.ini \</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Create a non-root user to use if preferred - see https://aka.ms/vscode-remote/containers/non-root-user.</span></span><br><span class="line">    &amp;&amp; groupadd --gid $USER_GID $USERNAME \</span><br><span class="line">    &amp;&amp; useradd -s /bin/bash --uid $USER_UID --gid $USER_GID -m $USERNAME \</span><br><span class="line">    <span class="comment"># [Optional] Add sudo support for the non-root user</span></span><br><span class="line">    &amp;&amp; apt-get install -y sudo \</span><br><span class="line">    &amp;&amp; echo $USERNAME ALL=\(root\) NOPASSWD:ALL &gt; /etc/sudoers.d/$USERNAME\   <span class="comment"># 把vscode这个用户授权sodo</span></span><br><span class="line">    &amp;&amp; chmod <span class="number">0440</span> /etc/sudoers.d/$USERNAME \</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment"># Clean up</span></span><br><span class="line">    &amp;&amp; apt-get autoremove -y \</span><br><span class="line">    &amp;&amp; apt-get clean -y \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># Switch back to dialog for any ad-hoc use of apt-get</span></span><br><span class="line"><span class="keyword">ENV</span> DEBIAN_FRONTEND=dialog</span><br></pre></td></tr></table></figure>

<p>这是一个基于<code>php:7-cli</code>的php环境并且装了<code>xdebug</code>扩展，再添加了一个名叫<code>vscode</code>的用户并授权sudo。</p>
<p>考虑到我们的网络问题，我们使用aliyun的镜像地址来加速构建。在上面的Dockerfile中加了两行：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/security.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/deb.debian.org/mirrors.aliyun.com/g&#x27;</span> /etc/apt/sources.list </span></span><br></pre></td></tr></table></figure>

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>完事具备，开始运行它：<br>按<code>F1</code>然后选择<code>Remote-Containers: Open Repository in Container</code>。或者点左下角的图标：<br><img src="/assets/images/20200413224822.png" alt="icon"></p>
<p>因为更换了源，几分钟时间就构建好。</p>
<p>运行成功之后，你可以发现，开发流程和本地开发几乎一摸一样。我们打开vscode下的terminal终端，可以看到命令提示符：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vscode@0d2acb021651:/workspaces/vscode-remote-try-php$ </span><br></pre></td></tr></table></figure>
<p>这个vscode用户就是之前Dockerfile中定义的用户。</p>
<p>接下来就完全当本地开发吧。</p>
<h2 id="添加端口"><a href="#添加端口" class="headerlink" title="添加端口"></a>添加端口</h2><p>我们php开发，大多是web开发，我们在上面打开的终端中启动一个web服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php -S 0.0.0.0:8080</span><br></pre></td></tr></table></figure>

<p>这时候需要映射一个端口到本地：<br>按<code>F1</code>然后选择<code>Forward a port</code>，比如也输入8080。在浏览器中打开127.0.0.1:8080就可以访问我们的web服务。</p>
<p>我们还可以在启动的时候让它自动映射端口，我们在<code>devcontainer.json</code>文件中加入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// An array port numbers to forward</span><br><span class="line">&quot;forwardPorts&quot;: [8080],</span><br></pre></td></tr></table></figure>

<p>是不是特别的方便~😎😎😎</p>
<p>最后想说的是：虽然现在vscode下开发php还不如phpstorm来的爽快，但是这种开发模式确实已经超过了phpstorm。体验好，简单还有例子，文档也齐全。其他语言的例子也都有，大家可自己尝试下。</p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers</a></li>
<li><a href="https://code.visualstudio.com/remote-tutorials/containers/getting-started">https://code.visualstudio.com/remote-tutorials/containers/getting-started</a></li>
</ul>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>容器</tag>
        <tag>Docker</tag>
        <tag>vscode</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进程管理命令ps</title>
    <url>/2020/04/16/linux-ps/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Linux</code>中的<code>ps</code>命令是<code>Process Status</code>的缩写。<code>ps</code>命令用来列出系统中当前运行的那些进程。<code>ps</code>命令列出的是当前那些进程的快照，就是执行<code>ps</code>命令的那个时刻的那些进程，如果想要动态的显示进程信息，就可以使用<code>top</code>命令。</p>
<p>要对进程进行监测和控制，首先必须要了解当前进程的情况，也就是需要查看当前进程，而<code>ps</code>命令就是最基本同时也是非常强大的进程查看命令。使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等。总之大部分信息都是可以通过执行该命令得到的。</p>
<p><code>ps</code>为我们提供了进程的一次性的查看，它所提供的查看结果并不动态连续的；如果想对进程时间监控，应该用 <code>top</code>工具。</p>
<p><code>kill</code>命令用于杀死进程。</p>
<h2 id="linux上进程有5种状态"><a href="#linux上进程有5种状态" class="headerlink" title="linux上进程有5种状态:"></a>linux上进程有5种状态:</h2><ul>
<li>1.运行(正在运行或在运行队列中等待) </li>
<li>2.中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) </li>
<li>3.不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) </li>
<li>4.僵死(进程已终止, 但进程描述符存在, 直到父进程调用<code>wait4()</code>系统调用后释放) </li>
<li>5.停止(进程收到<code>SIGSTOP</code>, <code>SIGSTP</code>, <code>SIGTIN</code>, <code>SIGTOU</code>信号后停止运行运行) </li>
</ul>
<h2 id="ps工具标识进程的5种状态码"><a href="#ps工具标识进程的5种状态码" class="headerlink" title="ps工具标识进程的5种状态码:"></a>ps工具标识进程的5种状态码:</h2><ul>
<li><code>D</code>不可中断<code>uninterruptible sleep (usually IO)</code> </li>
<li><code>R</code>运行<code>runnable (on run queue)</code> </li>
<li><code>S</code>中断<code>sleeping</code> </li>
<li><code>T</code>停止<code>traced or stopped</code> </li>
<li><code>Z</code>僵死<code>a defunct (”zombie”) process</code> </li>
</ul>
<h2 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a>命令格式：</h2><blockquote>
<p>ps[参数]</p>
</blockquote>
<h2 id="命令功能："><a href="#命令功能：" class="headerlink" title="命令功能："></a>命令功能：</h2><p>用来显示当前进程的状态</p>
<h2 id="命令参数："><a href="#命令参数：" class="headerlink" title="命令参数："></a>命令参数：</h2><ul>
<li><code>a</code> 显示所有进程</li>
<li><code>-a</code> 显示同一终端下的所有程序</li>
<li><code>-A</code> 显示所有进程</li>
<li><code>c</code> 显示进程的真实名称</li>
<li><code>-N</code> 反向选择</li>
<li><code>-e</code> 等于“-A”</li>
<li><code>e</code> 显示环境变量</li>
<li><code>f</code> 显示程序间的关系</li>
<li><code>-H</code> 显示树状结构</li>
<li><code>r</code> 显示当前终端的进程</li>
<li><code>T</code> 显示当前终端的所有程序</li>
<li><code>u</code> 指定用户的所有进程</li>
<li><code>-au</code> 显示较详细的信息</li>
<li><code>-aux</code> 显示所有包含其他使用者的行程 </li>
<li><code>-C &lt;命令&gt;</code> 列出指定命令的状况</li>
<li><code>-p &lt;PID&gt;</code> 列出指定PID的状况</li>
<li><code>--lines&lt;行数&gt;</code> 每页显示的行数</li>
<li><code>--width&lt;字符数&gt;</code> 每页显示的字符数</li>
</ul>
<h2 id="使用实例："><a href="#使用实例：" class="headerlink" title="使用实例："></a>使用实例：</h2><h3 id="实例1：显示所有进程信息"><a href="#实例1：显示所有进程信息" class="headerlink" title="实例1：显示所有进程信息"></a>实例1：显示所有进程信息</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -A</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -A</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 pts/0    00:00:00 bash</span><br><span class="line">   11 pts/1    00:00:00 bash</span><br><span class="line">   23 pts/1    00:00:00 ps</span><br><span class="line">  ……省略部分结果</span><br></pre></td></tr></table></figure>

<h3 id="实例2：显示指定用户信息"><a href="#实例2：显示指定用户信息" class="headerlink" title="实例2：显示指定用户信息"></a>实例2：显示指定用户信息</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -u root</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -u root</span><br><span class="line">  PID TTY          TIME CMD</span><br><span class="line">    1 pts/0    00:00:00 bash</span><br><span class="line">   11 pts/1    00:00:00 bash</span><br><span class="line">   24 pts/1    00:00:00 ps</span><br></pre></td></tr></table></figure>

<ul>
<li>实例3：显示所有进程信息，连同命令行</li>
</ul>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 15:16 pts/0    00:00:00 bash</span><br><span class="line">root        11     0  0 15:16 pts/1    00:00:00 bash</span><br><span class="line">root      4759    11  0 15:27 pts/1    00:00:00 php test.php</span><br><span class="line">root      4762    11  0 15:28 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure>

<h3 id="实例4：-ps-与grep-常用组合用法，查找特定进程"><a href="#实例4：-ps-与grep-常用组合用法，查找特定进程" class="headerlink" title="实例4： ps 与grep 常用组合用法，查找特定进程"></a>实例4： ps 与grep 常用组合用法，查找特定进程</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -ef|grep ssh</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -ef |grep php</span><br><span class="line">root      4759    11  0 15:27 pts/1    00:00:00 php test.php</span><br><span class="line">root      4764    11  0 15:29 pts/1    00:00:00 grep --color=auto php</span><br></pre></td></tr></table></figure>

<h3 id="实例5：将目前属于您自己这次登入的-PID-与相关信息列示出来"><a href="#实例5：将目前属于您自己这次登入的-PID-与相关信息列示出来" class="headerlink" title="实例5：将目前属于您自己这次登入的 PID 与相关信息列示出来"></a>实例5：将目前属于您自己这次登入的 PID 与相关信息列示出来</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -l</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -l</span><br><span class="line">F S   UID   PID  PPID  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</span><br><span class="line">4 S     0    11     0  0  80   0 -  4627 -      pts/1    00:00:00 bash</span><br><span class="line">4 S     0  4759    11  0  80   0 - 33443 -      pts/1    00:00:00 php</span><br><span class="line">0 R     0  4765    11  0  80   0 -  6487 -      pts/1    00:00:00 ps</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<p>各相关信息的意义：</p>
<ul>
<li><code>F</code> 代表这个程序的旗标 (flag)， <code>4</code> 代表使用者为<code>super user</code></li>
<li><code>S</code> 代表这个程序的状态 (STAT)，关于各 <code>STAT</code> 的意义将在内文介绍</li>
<li><code>UID</code> 程序被该 UID 所拥有</li>
<li><code>PID</code> 就是这个程序的 ID </li>
<li><code>PPID</code> 则是其上级父程序的ID</li>
<li><code>C</code> CPU 使用的资源百分比</li>
<li><code>PRI</code> 这个是 <code>Priority</code> (优先执行序) 的缩写，详细后面介绍</li>
<li><code>NI</code> 这个是 <code>Nice</code> 值，在下一小节我们会持续介绍</li>
<li><code>ADDR</code> 这个是<code>kernel function</code>，指出该程序在内存的那个部分。如果是个<code>running</code>的程序，一般就是”-“</li>
<li><code>SZ</code> 使用掉的内存大小</li>
<li><code>WCHAN</code> 目前这个程序是否正在运作当中，若为 <code>-</code> 表示正在运作</li>
<li><code>TTY</code> 登入者的终端机位置</li>
<li><code>TIME</code> 使用掉的 <code>CPU</code> 时间。</li>
<li><code>CMD</code> 所下达的指令为何</li>
</ul>
<p>在预设的情况下， <code>ps</code> 仅会列出与目前所在的 <code>bash shell</code> 有关的 <code>PID</code> 而已，所以， 当我使用 <code>ps -l</code> 的时候，只有三个 PID。</p>
<h3 id="实例6：列出目前所有的正在内存当中的程序"><a href="#实例6：列出目前所有的正在内存当中的程序" class="headerlink" title="实例6：列出目前所有的正在内存当中的程序"></a>实例6：列出目前所有的正在内存当中的程序</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps aux</span><br><span class="line">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class="line">root         1  0.0  0.1  18508  2612 pts/0    Ss+  15:16   0:00 bash</span><br><span class="line">root        11  0.0  0.1  18508  3216 pts/1    Ss   15:16   0:00 bash</span><br><span class="line">root      4759  0.0  0.7 133772 14652 pts/1    S    15:27   0:00 php test.php</span><br><span class="line">root      4766  0.0  0.1  34404  2836 pts/1    R+   15:35   0:00 ps aux</span><br></pre></td></tr></table></figure>

<p>说明：</p>
<ul>
<li><p><code>USER</code>：该 process 属于那个使用者账号的</p>
</li>
<li><p><code>PID</code> ：该 process 的ID</p>
</li>
<li><p><code>%CPU</code>：该 process 使用掉的 CPU 资源百分比</p>
</li>
<li><p><code>%MEM</code>：该 process 所占用的物理内存百分比</p>
</li>
<li><p><code>VSZ</code> ：该 process 使用掉的虚拟内存量 (Kbytes)</p>
</li>
<li><p><code>RSS</code> ：该 process 占用的固定的内存量 (Kbytes)</p>
</li>
<li><p><code>TTY</code> ：该 process 是在那个终端机上面运作，若与终端机无关，则显示 ?，另外， tty1-tty6 是本机上面的登入者程序，若为 pts/0 等等的，则表示为由网络连接进主机的程序。</p>
</li>
<li><p><code>STAT</code>：该程序目前的状态，主要的状态有</p>
<ul>
<li><code>R</code> ：该程序目前正在运作，或者是可被运作</li>
<li><code>S</code> ：该程序目前正在睡眠当中 (可说是 idle 状态)，但可被某些讯号 (signal) 唤醒。</li>
<li><code>T</code> ：该程序目前正在侦测或者是停止了</li>
<li><code>Z</code> ：该程序应该已经终止，但是其父程序却无法正常的终止他，造成 zombie (疆尸) 程序的状态</li>
</ul>
</li>
<li><p><code>START</code>：该 process 被触发启动的时间</p>
</li>
<li><p><code>TIME</code> ：该 process 实际使用 CPU 运作的时间</p>
</li>
<li><p><code>COMMAND</code>：该程序的实际指令</p>
</li>
</ul>
<h3 id="实例7：列出类似程序树的程序显示"><a href="#实例7：列出类似程序树的程序显示" class="headerlink" title="实例7：列出类似程序树的程序显示"></a>实例7：列出类似程序树的程序显示</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -axjf</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -axjf</span><br><span class="line"> PPID   PID  PGID   SID TTY      TPGID STAT   UID   TIME COMMAND</span><br><span class="line">    0    11    11    11 pts/1     4767 Ss       0   0:00 bash</span><br><span class="line">   11  4759  4759    11 pts/1     4767 S        0   0:00  \_ php test.php</span><br><span class="line">   11  4767  4767    11 pts/1     4767 R+       0   0:00  \_ ps -axjf</span><br><span class="line">    0     1     1     1 pts/0        1 Ss+      0   0:00 bash</span><br></pre></td></tr></table></figure>

<h3 id="实例8：找出与-cron-与-syslog-这两个服务有关的-PID-号码"><a href="#实例8：找出与-cron-与-syslog-这两个服务有关的-PID-号码" class="headerlink" title="实例8：找出与 cron 与 syslog 这两个服务有关的 PID 号码"></a>实例8：找出与 cron 与 syslog 这两个服务有关的 PID 号码</h3><p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux | egrep &#x27;(php|test)&#x27;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps aux | egrep &#x27;(php|test)&#x27;</span><br><span class="line">root      4759  0.0  0.7 133772 14652 pts/1    S    15:27   0:00 php test.php</span><br><span class="line">root      4773  0.0  0.0  11464   992 pts/1    S+   15:41   0:00 grep -E --color=auto (php|test)</span><br></pre></td></tr></table></figure>

<h3 id="其他实例："><a href="#其他实例：" class="headerlink" title="其他实例："></a>其他实例：</h3><p>1.可以用 <code>|</code> 管道和 <code>more</code> 连接起来分页查看</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux |more</span><br></pre></td></tr></table></figure>

<p>2.输出指定的字段</p>
<p>命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -o pid,ppid,pgrp,session,tpgid,comm</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@c210f4addccc:~# ps -o pid,ppid,pgrp,session,tpgid,comm</span><br><span class="line">  PID  PPID  PGRP  SESS TPGID COMMAND</span><br><span class="line">   11     0    11    11  4774 bash</span><br><span class="line"> 4759    11  4759    11  4774 php</span><br><span class="line"> 4774    11  4774    11  4774 ps</span><br></pre></td></tr></table></figure>


<p>参考 </p>
<ul>
<li><a href="https://www.cnblogs.com/peida/archive/2012/12/19/2824418.html">https://www.cnblogs.com/peida/archive/2012/12/19/2824418.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>进程管理</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP7.4新特性FFI初体验</title>
    <url>/2020/04/20/php-ffi/</url>
    <content><![CDATA[<p>PHP7.4正式版发布已经好久了，而主打的新特性是FFI，今天我也来体验一把😎</p>
<p>FFI提供了高级语言直接的互相调用，而对于PHP来说，FFI让我们可以方便的调用C语言写的各种库。</p>
<p>刚好，有个小需求需要调用c代码来获取命令行窗口的大小（行数和列数）。我们的c代码是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// filename cli_size.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过函数 ioctl() 获得终端界面的参数</span></span><br><span class="line"><span class="comment"> * @see https://blog.csdn.net/weixin_42205987/article/details/82080615</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">struct winsize <span class="title">get_size</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">size</span>;</span></span><br><span class="line">    ioctl(STDIN_FILENO, TIOCGWINSZ, &amp;size);</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="title">get_cli_rows</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">size</span>;</span></span><br><span class="line">    ioctl(STDIN_FILENO, TIOCGWINSZ, &amp;size);</span><br><span class="line">    <span class="keyword">return</span> size.ws_row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="title">get_cli_cols</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">winsize</span> <span class="title">size</span>;</span></span><br><span class="line">    ioctl(STDIN_FILENO, TIOCGWINSZ, &amp;size);</span><br><span class="line">    <span class="keyword">return</span> size.ws_col;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们先把上面的c代码编译成动态链接库<code>libcli_size.so</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gcc -O2 -fPIC -shared -g cli_size.c -o libcli_size.so</span><br></pre></td></tr></table></figure>

<p>开始写我们的php代码：</p>
<p>首先我们使用<code>FFI::cdef()</code>函数声明我们要调用的这个库中的函数以及使用到的数据类型。</p>
<p>比如我们在这里要调用的三个函数<code>get_cli_rows</code>（获取行数）、 <code>get_cli_cols</code>（获取列数）、 <code>get_size</code>（获取所有信息），我们把他们的声明作为<code>FFI::cdef()</code>函数的第一个参数。看到下面的代码大家应该很熟悉，就是c语言的函数声明。<br>这里<code>get_size</code>方法返回是一个结构体<code>struct winsize</code>，所以我们也要把这个结构体的声明也写上。</p>
<p><code>FFI::cdef()</code>函数的第二个参数就是我们自己的库文件名了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//filename cli_size.php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$ffi</span> = FFI::cdef(<span class="string">&lt;&lt;&lt;CTYPE</span></span><br><span class="line"><span class="string">struct winsize &#123;</span></span><br><span class="line"><span class="string">	unsigned short  ws_row;         /* rows, in characters */</span></span><br><span class="line"><span class="string">	unsigned short  ws_col;         /* columns, in characters */</span></span><br><span class="line"><span class="string">	unsigned short  ws_xpixel;      /* horizontal size, pixels */</span></span><br><span class="line"><span class="string">	unsigned short  ws_ypixel;      /* vertical size, pixels */</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">unsigned short get_cli_rows(); </span></span><br><span class="line"><span class="string">unsigned short get_cli_cols(); </span></span><br><span class="line"><span class="string">struct winsize get_size();</span></span><br><span class="line"><span class="string">CTYPE</span>, <span class="string">&#x27;libcli_size.so&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接下来就是调用了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//继续上面的代码</span></span><br><span class="line">var_dump(<span class="variable">$ffi</span>-&gt;get_cli_rows());</span><br><span class="line">var_dump(<span class="variable">$ffi</span>-&gt;get_cli_cols());</span><br><span class="line">var_dump(<span class="variable">$ffi</span>-&gt;get_size());</span><br></pre></td></tr></table></figure>

<p>然后运行它：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php cli_size.php</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int(36)     // get_cli_rows()的结果</span><br><span class="line">int(150)    // get_cli_cols()的结果</span><br><span class="line">object(FFI\CData:struct winsize)#2 (4) &#123;    // get_size()的结果，也就是winsize结构体，</span><br><span class="line">  [&quot;ws_row&quot;]=&gt;</span><br><span class="line">  int(36)</span><br><span class="line">  [&quot;ws_col&quot;]=&gt;</span><br><span class="line">  int(150)</span><br><span class="line">  [&quot;ws_xpixel&quot;]=&gt;</span><br><span class="line">  int(1200)</span><br><span class="line">  [&quot;ws_ypixel&quot;]=&gt;</span><br><span class="line">  int(684)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面可以看出c语言返回的<code>unsigned short</code>类型在这里变成了php的<code>int</code>, 结构体<code>struct winsize</code>变成了一个<code>FFI\CData</code>对象。</p>
<p>那我们怎么从结构体对象中取某一个属性值呢？</p>
<p>就按普通对象操作就可以了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继续上面的代码</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$ffi</span>-&gt;get_size()-&gt;ws_row);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int(36)</span><br></pre></td></tr></table></figure>

<p>对于其他的c语言类型，PHP官方文档上都有对应的php类型说明，大家可以<a href="https://www.php.net/manual/zh/class.ffi-cdata.php">去看看</a>。</p>
<p>以上示例代码都在<a href="https://github.com/heropoo/just-code/tree/master/php-ffi/cli_size">这里</a></p>
<p>好了，新的编程体验，好不错吧~😎😎😎</p>
<p>参考：</p>
<ul>
<li><a href="https://www.php.net/manual/zh/ffi.cdef.php">https://www.php.net/manual/zh/ffi.cdef.php</a></li>
<li><a href="https://www.php.net/manual/zh/class.ffi-cdata.php">https://www.php.net/manual/zh/class.ffi-cdata.php</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>FFI</tag>
      </tags>
  </entry>
  <entry>
    <title>php冷知识 - 从命令行参数列表中获取选项</title>
    <url>/2020/04/20/php-getopt/</url>
    <content><![CDATA[<p>分享一个php的冷知识 - 从命令行参数列表中获取选项</p>
<p>用到的函数是<code>getopt</code></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>函数签名是这样的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">getopt ( <span class="keyword">string</span> <span class="variable">$options</span> [, <span class="keyword">array</span> <span class="variable">$longopts</span> [, <span class="keyword">int</span> &amp;<span class="variable">$optind</span> ]] ) : <span class="keyword">array</span>|<span class="keyword">bool</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>解析传入脚本的选项，成功返回数组，解析失败返回false</p>
<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul>
<li><p><code>options</code> 该字符串中的每个字符会被当做选项字符，匹配传入脚本的选项以单个连字符(-)开头。 比如，一个选项字符串 “x” 识别了一个选项 -x。 只允许 a-z、A-Z 和 0-9。</p>
</li>
<li><p><code>longopts</code> 选项数组。此数组中的每个元素会被作为选项字符串，匹配了以两个连字符(–)传入到脚本的选项。 例如，长选项元素 “opt” 识别了一个选项 –opt。</p>
</li>
<li><p><code>optind</code> 如果存在<code>optind</code>参数，则参数解析停止的索引将被写入此变量。</p>
</li>
</ul>
<h3 id="参数值"><a href="#参数值" class="headerlink" title="参数值"></a>参数值</h3><p><code>options</code> 可能包含了以下元素：</p>
<ul>
<li>单独的字符（不接受值）</li>
<li>后面跟随冒号的字符（此选项需要值）</li>
<li>后面跟随两个冒号的字符（此选项的值可选）</li>
</ul>
<p><code>options</code> 和 <code>longopts</code> 的格式几乎是一样的，唯一的不同之处是 <code>longopts</code> 需要是选项的数组（每个元素为一个选项），而 <code>options</code> 需要一个字符串（每个字符是个选项）。</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>说了这么多，我们举例说明吧</p>
<h3 id="1-基本用法"><a href="#1-基本用法" class="headerlink" title="1. 基本用法"></a>1. 基本用法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Script 1.php</span></span><br><span class="line"><span class="variable">$options</span> = getopt(<span class="string">&quot;h:p:d&quot;</span>);</span><br><span class="line">var_dump(<span class="variable">$options</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>命令行下测试看看</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php 1.php -h 127.0.0.1 -p 8000 -d</span><br></pre></td></tr></table></figure>

<p>以上例程会输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(3) &#123;</span><br><span class="line">  [&quot;h&quot;]=&gt;</span><br><span class="line">  string(9) &quot;127.0.0.1&quot;</span><br><span class="line">  [&quot;p&quot;]=&gt;</span><br><span class="line">  string(4) &quot;8000&quot;</span><br><span class="line">  [&quot;d&quot;]=&gt;</span><br><span class="line">  bool(false)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>选项参数也可以中间不要空格</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php 1.php -h 127.0.0.1 -p 8000 -d</span><br></pre></td></tr></table></figure>

<p>php5.3之后还可以使用 “=” 作为 参数和值的分隔符</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php 1.php -h=127.0.0.1 -p=8000 -d</span><br></pre></td></tr></table></figure>

<h3 id="2-引入长选项"><a href="#2-引入长选项" class="headerlink" title="2. 引入长选项"></a>2. 引入长选项</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Script 2.php</span></span><br><span class="line"><span class="variable">$shortopts</span>  = <span class="string">&quot;&quot;</span>;       <span class="comment">// 短选项 用字母字符串</span></span><br><span class="line"><span class="variable">$shortopts</span> .= <span class="string">&quot;h:&quot;</span>;     <span class="comment">// 必选选项 字母后面一个冒号</span></span><br><span class="line"><span class="variable">$shortopts</span> .= <span class="string">&quot;p::&quot;</span>;    <span class="comment">// 可选选项 字母后面两个冒号</span></span><br><span class="line"><span class="variable">$shortopts</span> .= <span class="string">&quot;vd&quot;</span>;     <span class="comment">// 无需值的选项 字母后面没有冒号</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$longopts</span>  = <span class="keyword">array</span>(     <span class="comment">// 长选项 用单词的数组</span></span><br><span class="line">    <span class="string">&quot;host:&quot;</span>,            <span class="comment">// 必选选项 单词后面一个冒号</span></span><br><span class="line">    <span class="string">&quot;port::&quot;</span>,           <span class="comment">// 可选选项 单词后面两个冒号</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>,          <span class="comment">// 无需值的选项 单词后面没有冒号</span></span><br><span class="line">    <span class="string">&quot;debug&quot;</span>,            <span class="comment">// 无需值的选项 单词后面没有冒号</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$options</span> = getopt(<span class="variable">$shortopts</span>, <span class="variable">$longopts</span>);</span><br><span class="line">var_dump(<span class="variable">$options</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>运行测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php 2.php -h127.0.0.1 -p8000 -d --host=127.0.0.1 --port=8000 --version --debug</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(7) &#123;</span><br><span class="line">  [&quot;h&quot;]=&gt;</span><br><span class="line">  string(9) &quot;127.0.0.1&quot;</span><br><span class="line">  [&quot;p&quot;]=&gt;</span><br><span class="line">  string(4) &quot;8000&quot;</span><br><span class="line">  [&quot;d&quot;]=&gt;</span><br><span class="line">  bool(false)</span><br><span class="line">  [&quot;host&quot;]=&gt;</span><br><span class="line">  string(9) &quot;127.0.0.1&quot;</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  string(4) &quot;8000&quot;</span><br><span class="line">  [&quot;version&quot;]=&gt;</span><br><span class="line">  bool(false)</span><br><span class="line">  [&quot;debug&quot;]=&gt;</span><br><span class="line">  bool(false)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-同一选项可以传递多次"><a href="#3-同一选项可以传递多次" class="headerlink" title="3. 同一选项可以传递多次"></a>3. 同一选项可以传递多次</h3><p>运行测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php 2.php -d -d --version --debug --port=123 --port=234</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(4) &#123;</span><br><span class="line">  [&quot;d&quot;]=&gt;</span><br><span class="line">  array(2) &#123;     // 多个选项参数值以数组呈现</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    bool(false)</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    bool(false)</span><br><span class="line">  &#125;</span><br><span class="line">  [&quot;version&quot;]=&gt;</span><br><span class="line">  bool(false)</span><br><span class="line">  [&quot;debug&quot;]=&gt;</span><br><span class="line">  bool(false)</span><br><span class="line">  [&quot;port&quot;]=&gt;</span><br><span class="line">  array(2) &#123;</span><br><span class="line">    [0]=&gt;</span><br><span class="line">    string(3) &quot;123&quot;</span><br><span class="line">    [1]=&gt;</span><br><span class="line">    string(3) &quot;234&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-使用-optind"><a href="#4-使用-optind" class="headerlink" title="4. 使用 optind"></a>4. 使用 optind</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Script 3.php</span></span><br><span class="line"><span class="variable">$optind</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="variable">$opts</span> = getopt(<span class="string">&#x27;a:b:&#x27;</span>, [], <span class="variable">$optind</span>);</span><br><span class="line">var_dump(<span class="variable">$argv</span>);</span><br><span class="line">var_dump(<span class="variable">$optind</span>);</span><br><span class="line"><span class="variable">$pos_args</span> = array_slice(<span class="variable">$argv</span>, <span class="variable">$optind</span>);  <span class="comment">// 从数组中取出一段</span></span><br><span class="line">var_dump(<span class="variable">$pos_args</span>);</span><br></pre></td></tr></table></figure>

<p>运行测试：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php 3.php -a 1 -b 2 -- <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(7) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(7) &quot;cli.php&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(2) &quot;-a&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(2) &quot;-b&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  string(1) &quot;2&quot;</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(2) &quot;--&quot;</span><br><span class="line">  [6]=&gt;</span><br><span class="line">  string(4) &quot;test&quot;</span><br><span class="line">&#125;</span><br><span class="line">int(6)      // $optind = 6</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;test&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此以后就可以写出漂亮优雅的cli程序了😎😎😎</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.php.net/manual/zh/function.getopt.php">https://www.php.net/manual/zh/function.getopt.php</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP解析header头部信息</title>
    <url>/2020/04/22/php-parse-header/</url>
    <content><![CDATA[<p>现在写接口经常会使用header来传递一些验证信息，我们用各种php框架可以轻松的获取到，但是它底层是怎么做的呢？我们今天来聊一聊。</p>
<p>我们知道，在php中获取<code>get</code>参数（Query String Parameters）可以使用<code>$_GET</code>全局变量，获取<code>post</code>参数使用<code>$_POST</code>全局变量。但是我们想要获取<code>header</code>，好像却没有一个类似<code>$_HEADER</code>的全局变量来供我们使用。那我们想要获取到<code>header</code>信息该怎么办呢？也不卖关子了，我们可以从<code>$_SERVER</code>这个全局变量中获取到。接下来我们来进行这个操作：</p>
<p>我们写一个简单的php文件测试一下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// header.php</span></span><br><span class="line"></span><br><span class="line">var_dump(<span class="variable">$_SERVER</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>在这里我的访问地址是： <a href="http://localhost/header.php">http://localhost/header.php</a></p>
<p>我们使用<code>postman</code>工具或者<code>curl</code>命令请求下这个地址，并加入我们自定义的一个头 <code>token: 123456</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;token: 123456&quot;</span> http://localhost/header.php</span><br></pre></td></tr></table></figure>

<p>在输出中我们可以找到一项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ... 省略了好多</span><br><span class="line"></span><br><span class="line">[&quot;HTTP_TOKEN&quot;]=&gt;</span><br><span class="line">string(6) &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">// ... 省略了好多</span><br></pre></td></tr></table></figure>

<p>而这个<code>HTTP_TOKEN</code>就是我们想要的东西，我们传入的小写<code>token</code>， 在这里也转换成了大写。</p>
<p>我们再试一个，这次我们传递两个<code>header</code>：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">curl -H <span class="string">&quot;test_token: 654321&quot;</span> -H <span class="string">&quot;token: 123456&quot;</span> http://localhost/header.php</span><br></pre></td></tr></table></figure>

<p>测试发现，我们在输出中只找到了<code>HTTP_TOKEN</code>，却没有找到我们预想的<code>HTTP_TEST_TOKEN</code>。不要着急，我们把下划线<code>_</code>换成连字符<code>-</code>试试：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -H &quot;test-token: 654321&quot; -H &quot;token: 123456&quot; http://localhost/header.php</span><br></pre></td></tr></table></figure>

<p>看看输出，这下两个<code>header</code>都找到了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// ... 省略了好多</span><br><span class="line"></span><br><span class="line">[&quot;HTTP_TEST_TOKEN&quot;]=&gt;</span><br><span class="line">string(6) &quot;654321&quot;</span><br><span class="line">[&quot;HTTP_TOKEN&quot;]=&gt;</span><br><span class="line">string(6) &quot;123456&quot;</span><br><span class="line"></span><br><span class="line">// ... 省略了好多</span><br></pre></td></tr></table></figure>

<p>综上所述：传递<code>header</code>的键值，只能是单个词或者以中划线<code>-</code>连接的词。不然php会忽略。</p>
<p>好了接下来我们在实际应用中，只要把<code>$_SERVER</code>中的以<code>HTTP_</code>开头的下标都提取出来然后转换成首字母大写的格式就好了。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse_headers</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$headers</span> = [];</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$_SERVER</span> <span class="keyword">as</span> <span class="variable">$name</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (substr(<span class="variable">$name</span>, <span class="number">0</span>, <span class="number">5</span>) == <span class="string">&#x27;HTTP_&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$headers</span>[str_replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;-&#x27;</span>, ucwords(strtolower(str_replace(<span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27; &#x27;</span>, substr(<span class="variable">$name</span>, <span class="number">5</span>)))))] = <span class="variable">$value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$headers</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$headers</span> = parse_headers();</span><br><span class="line">var_dump(<span class="variable">$headers</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看看输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(5) &#123;</span><br><span class="line">  [&quot;Host&quot;]=&gt;</span><br><span class="line">  string(9) &quot;localhost&quot;</span><br><span class="line">  [&quot;User-Agent&quot;]=&gt;</span><br><span class="line">  string(11) &quot;curl/7.65.3&quot;</span><br><span class="line">  [&quot;Accept&quot;]=&gt;</span><br><span class="line">  string(3) &quot;*/*&quot;</span><br><span class="line">  [&quot;X-Token&quot;]=&gt;</span><br><span class="line">  string(6) &quot;654321&quot;</span><br><span class="line">  [&quot;Token&quot;]=&gt;</span><br><span class="line">  string(6) &quot;123456&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，有模有样，完美！✌🤓😎</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis加锁的几种实现</title>
    <url>/2020/04/24/redis-lock/</url>
    <content><![CDATA[<p>我们经常在工作中会碰到一些重复请求、并发等问题，而给资源加锁是一种不错的手段。我们今天就整理下使用<code>redis</code>作为分布式锁的几种实现。</p>
<p><code>redis</code>可以用于几个命令是：<code>INCR</code>、<code>SETNX</code>和<code>SET</code>。</p>
<h2 id="1-使用INCR加锁"><a href="#1-使用INCR加锁" class="headerlink" title="1. 使用INCR加锁"></a>1. 使用<code>INCR</code>加锁</h2><p>这种加锁的思路是， <code>key</code> 不存在，那么 <code>key</code> 的值会先被初始化为 0 ，然后再执行 <code>INCR</code> 操作进行加一。然后其它用户在执行 <code>INCR</code> 操作进行加一时，如果返回的数大于 <code>1</code> ，说明这个锁正在被使用当中。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment">  1、 客户端A请求服务器获取key的值为1表示获取了锁</span></span><br><span class="line"><span class="comment">  2、 客户端B也去请求服务器获取key的值为2表示获取锁失败</span></span><br><span class="line"><span class="comment">  3、 客户端A执行代码完成，删除锁</span></span><br><span class="line"><span class="comment">  4、 客户端B在等待一段时间后在去请求的时候获取key的值为1表示获取锁成功</span></span><br><span class="line"><span class="comment">  5、 客户端B执行代码完成，删除锁</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$redis</span>-&gt;incr(<span class="variable">$key</span>);  <span class="comment">// 自增1</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;expire(<span class="variable">$key</span>, <span class="variable">$ttl</span>); <span class="comment">// 设置锁的有效期</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span> == <span class="number">1</span>)&#123;  </span><br><span class="line">    <span class="comment">// 获取资源成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 资源被其他请求占用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-使用SETNX加锁"><a href="#2-使用SETNX加锁" class="headerlink" title="2. 使用SETNX加锁"></a>2. 使用<code>SETNX</code>加锁</h2><p>这种加锁的思路是，如果 <code>key</code> 不存在，将 <code>key</code> 设置为 <code>value</code>，如果 <code>key</code> 已存在，则 <code>SETNX</code> 不做任何动作。 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> 1、 客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</span></span><br><span class="line"><span class="comment"> 2、 客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</span></span><br><span class="line"><span class="comment"> 3、 客户端A执行代码完成，删除锁</span></span><br><span class="line"><span class="comment"> 4、 客户端B在等待一段时间后在去请求设置key的值，设置成功</span></span><br><span class="line"><span class="comment"> 5、 客户端B执行代码完成，删除锁</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$redis</span>-&gt;setNX(<span class="variable">$key</span>, <span class="variable">$value</span>); <span class="comment">// 当key不存在时设置key=value</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;expire(<span class="variable">$key</span>, <span class="variable">$ttl</span>); <span class="comment">// 设置锁的有效期</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123;  </span><br><span class="line">    <span class="comment">// 获取资源成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 资源被其他请求占用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面两种方法都有一个问题，会发现，都需要设置 <code>key</code> 过期时间。那么为什么要设置<code>key</code>过期时间呢？如果请求执行因为某些原因意外退出了，导致创建了锁但是没有删除锁，那么这个锁将一直存在（redis不设置key的过期时间，默认是永久的），以至于一直处于加锁状态。于是乎我们需要给锁加一个过期时间以防不测。</p>
<p>但是借助 <code>Expire</code> 来设置就不是原子性操作了。所以还可以通过<code>redis</code>事务来确保原子性。那上面的代码就要优化成：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一种方式的加锁</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;multi();    <span class="comment">// 标记一个事务块的开始</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$redis</span>-&gt;incr(<span class="variable">$key</span>);  </span><br><span class="line"><span class="variable">$redis</span>-&gt;expire(<span class="variable">$key</span>, <span class="variable">$ttl</span>);</span><br><span class="line"><span class="variable">$redis</span>-&gt;exec();   <span class="comment">// 提交事务</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span> == <span class="number">1</span>)&#123;  </span><br><span class="line">    <span class="comment">// 获取资源成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 资源被其他请求占用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式的加锁</span></span><br><span class="line"><span class="variable">$redis</span>-&gt;multi();    <span class="comment">// 标记一个事务块的开始</span></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$redis</span>-&gt;setNX(<span class="variable">$key</span>, <span class="variable">$value</span>); </span><br><span class="line"><span class="variable">$redis</span>-&gt;expire(<span class="variable">$key</span>, <span class="variable">$ttl</span>); </span><br><span class="line"><span class="variable">$redis</span>-&gt;exec();   <span class="comment">// 提交事务</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123;  </span><br><span class="line">    <span class="comment">// 获取资源成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 资源被其他请求占用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码看起来是不是很繁琐。好在<code>redis</code>官方从版本 2.6.12 开始 <code>SET</code> 命令本身已经包含了设置过期时间的功能。</p>
<h2 id="3-使用SET加锁"><a href="#3-使用SET加锁" class="headerlink" title="3. 使用SET加锁"></a>3. 使用<code>SET</code>加锁</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** </span></span><br><span class="line"><span class="comment"> 1、 客户端A请求服务器设置key的值，如果设置成功就表示加锁成功</span></span><br><span class="line"><span class="comment"> 2、 客户端B也去请求服务器设置key的值，如果返回失败，那么就代表加锁失败</span></span><br><span class="line"><span class="comment"> 3、 客户端A执行代码完成，删除锁</span></span><br><span class="line"><span class="comment"> 4、 客户端B在等待一段时间后在去请求设置key的值，设置成功</span></span><br><span class="line"><span class="comment"> 5、 客户端B执行代码完成，删除锁</span></span><br><span class="line"><span class="comment">**/</span>    </span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$redis</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>, [<span class="string">&#x27;nx&#x27;</span>, <span class="string">&#x27;ex&#x27;</span> =&gt; <span class="variable">$ttl</span>]);  <span class="comment">//nx代表当key不存在时设置 ex代表设置过期时间</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$res</span>)&#123;  </span><br><span class="line">    <span class="comment">// 获取资源成功</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 资源被其他请求占用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-其他问题"><a href="#4-其他问题" class="headerlink" title="4. 其他问题"></a>4. 其他问题</h2><p>虽然上面一步已经满足了我们的需求，但是还是要考虑其它问题？</p>
<ul>
<li>1、 redis发现锁失败了要怎么办？中断请求还是循环请求？</li>
<li>2、 循环请求的话，如果有一个获取了锁，其它的在去获取锁的时候，是不是容易发生抢锁的可能？</li>
<li>3、 锁提前过期后，客户端A还没执行完，然后客户端B获取到了锁，这时候客户端A执行完了，会不会在删锁的时候把B的锁给删掉？</li>
</ul>
<h2 id="5-解决办法"><a href="#5-解决办法" class="headerlink" title="5. 解决办法"></a>5. 解决办法</h2><ul>
<li>针对问题1：使用循环请求，循环请求去获取锁</li>
<li>针对问题2：针对第二个问题，在循环请求获取锁的时候，加入睡眠功能，等待几毫秒在执行循环</li>
<li>针对问题3：在加锁的时候存入的key是随机的。这样的话，每次在删除key的时候判断下存入的key里的value和自己存的是否一样<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;  <span class="comment">//针对问题1，使用循环</span></span><br><span class="line">    <span class="variable">$timeout</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="variable">$roomid</span> = <span class="number">10001</span>;</span><br><span class="line">    <span class="variable">$key</span> = <span class="string">&#x27;room_lock&#x27;</span>;</span><br><span class="line">    <span class="variable">$value</span> = <span class="string">&#x27;room_&#x27;</span>.<span class="variable">$roomid</span>;  <span class="comment">//分配一个随机的值针对问题3</span></span><br><span class="line">    <span class="variable">$isLock</span> = <span class="variable">$redis</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>, <span class="string">&#x27;ex&#x27;</span>, <span class="variable">$timeout</span>, <span class="string">&#x27;nx&#x27;</span>);<span class="comment">//ex 秒</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$isLock</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$redis</span>-&gt;get(<span class="variable">$key</span>) == <span class="variable">$value</span>) &#123;  <span class="comment">//防止提前过期，误删其它请求创建的锁</span></span><br><span class="line">            <span class="comment">//执行内部代码</span></span><br><span class="line">            <span class="variable">$redos</span>-&gt;del(<span class="variable">$key</span>);</span><br><span class="line">            <span class="keyword">continue</span>;<span class="comment">//执行成功删除key并跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        usleep(<span class="number">5000</span>); <span class="comment">//睡眠，降低抢锁频率，缓解redis压力，针对问题2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="variable">$isLock</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><ul>
<li><a href="http://ukagaka.github.io/php/2017/09/21/redisLock.html">http://ukagaka.github.io/php/2017/09/21/redisLock.html</a></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Redis</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>php冷知识 - 输出控制函数</title>
    <url>/2020/04/29/php-func-ob/</url>
    <content><![CDATA[<p>大家在工作中应该也用过<code>ob_start()</code>、<code>ob_clean()</code>、<code>ob_get_contents()</code>等这类的输出控制函数，我们今天就来详细聊聊它们。</p>
<h2 id="常用的函数有这些："><a href="#常用的函数有这些：" class="headerlink" title="常用的函数有这些："></a>常用的函数有这些：</h2><ul>
<li>ob_start — 打开输出控制缓冲</li>
<li>ob_clean — 清空（擦掉）输出缓冲区</li>
<li>ob_end_clean — 清空（擦除）缓冲区并关闭输出缓冲</li>
<li>ob_get_clean — 得到当前缓冲区的内容并删除当前输出缓。</li>
<li>ob_get_contents — 返回输出缓冲区的内容</li>
<li>ob_end_flush — 冲刷出（送出）输出缓冲区内容并关闭缓冲</li>
<li>ob_flush — 冲刷出（送出）输出缓冲区中的内容</li>
<li>ob_get_flush — 刷出（送出）缓冲区内容，以字符串形式返回内容，并关闭输出缓冲区。</li>
<li>flush — 刷新输出缓冲</li>
<li>ob_get_length — 返回输出缓冲区内容的长度</li>
<li>ob_get_level — 返回输出缓冲机制的嵌套级别</li>
<li>ob_get_status — 得到所有输出缓冲区的状态</li>
</ul>
<h2 id="接下来我们举例说明："><a href="#接下来我们举例说明：" class="headerlink" title="接下来我们举例说明："></a>接下来我们举例说明：</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认的缓冲级别是0，ob_start()之后加一</span></span><br><span class="line"><span class="keyword">if</span> (ob_get_level() == <span class="number">0</span>) ob_start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span>&lt;<span class="number">10</span>; <span class="variable">$i</span>++)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt; Line to show.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    ob_flush();</span><br><span class="line">    flush();</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Done.&quot;</span>;</span><br><span class="line"></span><br><span class="line">ob_end_flush();</span><br></pre></td></tr></table></figure>
<p>浏览器运行它，发现每两秒输出一行。</p>
<p>(未完待续)</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>输出控制</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用iptables配置</title>
    <url>/2020/04/30/iptables/</url>
    <content><![CDATA[<p>分享Linux常用iptables配置</p>
<h2 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -L -n -v </span><br></pre></td></tr></table></figure>

<h2 id="清除预设表filter中的所有规则链的规则"><a href="#清除预设表filter中的所有规则链的规则" class="headerlink" title="清除预设表filter中的所有规则链的规则"></a>清除预设表filter中的所有规则链的规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -F</span><br></pre></td></tr></table></figure>

<h2 id="清除预设表filter中使用者自定链中的规则"><a href="#清除预设表filter中使用者自定链中的规则" class="headerlink" title="清除预设表filter中使用者自定链中的规则"></a>清除预设表filter中使用者自定链中的规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -X</span><br></pre></td></tr></table></figure>

<h2 id="计数器清零"><a href="#计数器清零" class="headerlink" title="计数器清零"></a>计数器清零</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -Z</span><br></pre></td></tr></table></figure>

<h2 id="允许本机回环网卡通信，在INPUT链"><a href="#允许本机回环网卡通信，在INPUT链" class="headerlink" title="允许本机回环网卡通信，在INPUT链"></a>允许本机回环网卡通信，在INPUT链</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -i lo -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="接受已经建立连接的TCP连接（状态防火墙能识别TCP或者UDP会话非状态防火墙只能根据端口识别，不能识别会话）"><a href="#接受已经建立连接的TCP连接（状态防火墙能识别TCP或者UDP会话非状态防火墙只能根据端口识别，不能识别会话）" class="headerlink" title="接受已经建立连接的TCP连接（状态防火墙能识别TCP或者UDP会话非状态防火墙只能根据端口识别，不能识别会话）"></a>接受已经建立连接的TCP连接（状态防火墙能识别TCP或者UDP会话非状态防火墙只能根据端口识别，不能识别会话）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -m state --state RELATED,ESTABLISHED  -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许ping"><a href="#允许ping" class="headerlink" title="允许ping"></a>允许ping</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p icmp --icmp-type any -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许web"><a href="#允许web" class="headerlink" title="允许web"></a>允许web</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许SSH"><a href="#允许SSH" class="headerlink" title="允许SSH"></a>允许SSH</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许mysql"><a href="#允许mysql" class="headerlink" title="允许mysql"></a>允许mysql</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许svnserve"><a href="#允许svnserve" class="headerlink" title="允许svnserve"></a>允许svnserve</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p tcp --dport 3690 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许192-168-8-11访问9000端口-php-fpm"><a href="#允许192-168-8-11访问9000端口-php-fpm" class="headerlink" title="允许192.168.8.11访问9000端口(php-fpm)"></a>允许192.168.8.11访问9000端口(php-fpm)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p tcp -s 192.168.8.11 --dport 9000 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="允许192-168-8-0网段"><a href="#允许192-168-8-0网段" class="headerlink" title="允许192.168.8.0网段"></a>允许192.168.8.0网段</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -A INPUT -p tcp -s 192.168.8.0/24 -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="最后默认规则设置为拒绝所有"><a href="#最后默认规则设置为拒绝所有" class="headerlink" title="最后默认规则设置为拒绝所有"></a>最后默认规则设置为拒绝所有</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/sbin/iptables -P INPUT DROP</span><br></pre></td></tr></table></figure>

<h2 id="重启后又默认重新加载-etc-sysconfig-iptables防火墙配置文件"><a href="#重启后又默认重新加载-etc-sysconfig-iptables防火墙配置文件" class="headerlink" title="重启后又默认重新加载/etc/sysconfig/iptables防火墙配置文件"></a>重启后又默认重新加载/etc/sysconfig/iptables防火墙配置文件</h2><ul>
<li>1.如果想把当前添加的规则在重启后仍能使用，可以先通过<code>/sbin/service iptables save</code>将当前规则保存至配置文件中，该操作将执行<code>iptables</code>初始化脚本，脚本运行<code>/sbin/iptables-save</code>程序并更新当前的<code>iptables</code>，原来的配置文件保存为<code>iptables.save</code>。</li>
<li>2.一般我们可以指定保存的配置文件<code>iptables-save &gt; 配置文件名</code>，如果想恢复某个配置则执行<code>iptables-restore &lt; 配置文件名</code></li>
<li>3.对于应用<code>iptables</code>规则后，想要恢复本机默认的规则，执行<code>service iptables restart</code> ，重新加载<code>/etc/sysconfig/iptables</code> 文件。（此时貌似<code>iptables-restore &lt; /etc/sysconfig/iptables</code> 不起作用）</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么查看git仓库当前的分支、最后一次commitId、tag等</title>
    <url>/2020/05/06/git-log-tag-more/</url>
    <content><![CDATA[<p>最近想把项目的git仓库版本作为项目版本来使用，就研究了下，做点笔记。</p>
<h2 id="查看当前分支名称"><a href="#查看当前分支名称" class="headerlink" title="查看当前分支名称"></a>查看当前分支名称</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git symbolic-ref --short -q HEAD</span><br><span class="line"><span class="comment"># 输出 master</span></span><br></pre></td></tr></table></figure>

<h2 id="查看当前最后一次提交的commit-id"><a href="#查看当前最后一次提交的commit-id" class="headerlink" title="查看当前最后一次提交的commit_id"></a>查看当前最后一次提交的commit_id</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -1 --pretty=format:%H <span class="comment"># 完整的</span></span><br><span class="line"><span class="comment"># 输出 7b6b2803d2b7135b239d062847816e55a810371e</span></span><br><span class="line">git <span class="built_in">log</span> -1 --pretty=format:%h <span class="comment"># 前7位</span></span><br><span class="line"><span class="comment"># 输出 7b6b280</span></span><br></pre></td></tr></table></figure>

<h2 id="查看最后一次提交的时间"><a href="#查看最后一次提交的时间" class="headerlink" title="查看最后一次提交的时间"></a>查看最后一次提交的时间</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -1 --format=<span class="string">&quot;%ct&quot;</span></span><br><span class="line">输出 1588759297</span><br></pre></td></tr></table></figure>

<p>这里输出是unix时间戳，需要自己转换下，如果在shell中可以这么写</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">commit_ts=`git <span class="built_in">log</span> -1 --format=<span class="string">&quot;%ct&quot;</span>`</span><br><span class="line">sys=`uname`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$sys</span> = <span class="string">&quot;Darwin&quot;</span> ] </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  commit_time=`date -r<span class="variable">$&#123;commit_ts&#125;</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  commit_time=`date -d @<span class="variable">$&#123;commit_ts&#125;</span> +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$commit_time</span></span><br></pre></td></tr></table></figure>

<p>MacOS和Linux有差别，做个系统判断</p>
<h2 id="查看最后一次提交对应的tag"><a href="#查看最后一次提交对应的tag" class="headerlink" title="查看最后一次提交对应的tag"></a>查看最后一次提交对应的tag</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span> -1 --decorate=short --oneline|grep -Eo <span class="string">&#x27;tag: (.*)[,)]+&#x27;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|sed <span class="string">&#x27;s/)//g&#x27;</span>|sed <span class="string">&#x27;s/,//g&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这里使用<code>git log -1 --decorate=short --oneline</code>，输出</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">e4df105 (HEAD -&gt; develop, tag: v0.1.1, origin/develop) 测试提交</span><br></pre></td></tr></table></figure>

<p>然后使用grep正则表达式配合awk、sed提取出了<code>v0.1.1</code></p>
<p>好了，就这些吧～</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>如何正确的使php进程以守护进程方式运行</title>
    <url>/2020/05/12/php-daemon/</url>
    <content><![CDATA[<p>守护进程是一个在后台运行并且不受任何终端控制的进程。 关于守护进程的详细解释可以看看<a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B">百度百科</a>。</p>
<p>下面我们看看php的脚本程序怎么作为守护进程运行在后台。</p>
<p>在Linux中 , 大概有三种方式实现脚本后台化 :</p>
<ul>
<li>1.在命令后添加一个<code>&amp;</code>符号，比如 <code>php task.php &amp;</code>。这个方法的缺点在于：如果终端关闭，无论是正常关闭还是非正常关闭，这个php进程都会随着终端关闭而关闭；其次是代码中如果有<code>echo</code>或者<code>var_dump()</code>之类的输出文本，会被输出到当前的终端窗口中。</li>
<li>2.使用<code>nohup</code>命令，比如<code>nohup php task.php &amp;</code>。默认情况下，代码中<code>echo</code>或者<code>var_dump</code>之类输出的文本会被输出到php代码同级目录的<code>nohup.out</code>文件中。如果你关闭终端，该进程不会被关闭，依然会在后台持续运行。但是如果终端遇到异常退出或者终止，该php进程也会随即退出。本质上 也并非稳定可靠的守护进程方案 。</li>
<li>3.使用<code>fork</code>和<code>setsid</code>，这个方案在上面<a href="https://baike.baidu.com/item/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B">百度百科</a>中也有详细介绍，我们这里以php代码来演示：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// deamon.php</span></span><br><span class="line"></span><br><span class="line">umask(<span class="number">0</span>); <span class="comment">//把文件掩码清0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次fork  </span></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27; fork出错 &#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27; 父进程退出 &#x27;</span>); <span class="comment">// 父进程退出,子进程变成孤儿进程被1号进程收养，进程脱离终端</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将当前子进程提升会会话组组长 这是至关重要的一步 </span></span><br><span class="line"><span class="keyword">if</span> (!posix_setsid()) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27; setsid 出错 &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改当前进程的工作目录，由于子进程会继承父进程的工作目录，修改工作目录以释放对父进程工作目录的占用。</span></span><br><span class="line">chdir(<span class="string">&#x27;/tmp&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二次fork</span></span><br><span class="line"><span class="comment">// 通过上一步，我们创建了一个新的会话组长，进程组长，且脱离了终端，但是会话组长可以申请重新打开一个终端，为了避免</span></span><br><span class="line"><span class="comment">// 这种情况，我们再次创建一个子进程，并退出当前进程，这样运行的进程就不再是会话组长。</span></span><br><span class="line"><span class="variable">$pid</span> = pcntl_fork();</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$pid</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27; fork 出错 &#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$pid</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="string">&#x27; 父进程退出 &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于守护进程用不到标准输入输出，关闭标准输入，输出，错误输出描述符</span></span><br><span class="line">fclose(STDIN);</span><br><span class="line">fclose(STDOUT);</span><br><span class="line">fclose(STDERR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真正的逻辑代码们 下面仅仅写个循环以示例</span></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">1</span>; <span class="variable">$i</span> &lt;= <span class="number">100</span>; <span class="variable">$i</span>++) &#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    file_put_contents(<span class="string">&#x27;daemon.log&#x27;</span>, <span class="variable">$i</span>, FILE_APPEND);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>运行看看效果吧</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">php deamon.php</span><br><span class="line">tail -f daemon.log</span><br></pre></td></tr></table></figure>

<p>另外还有一种运行脚本的方式也值得一提：利用 <code>screen</code> / <code>tmux</code> 等软件，将脚本运行在可以在一个虚拟终端之上。</p>
<p>参考：</p>
<ul>
<li><a href="https://github.com/elarity/advanced-php/blob/master/1.%20php%E8%BF%9B%E7%A8%8Bdaemon%E5%8C%96%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%81%9A%E6%B3%95.md">https://github.com/elarity/advanced-php/blob/master/1.%20php%E8%BF%9B%E7%A8%8Bdaemon%E5%8C%96%E7%9A%84%E6%AD%A3%E7%A1%AE%E5%81%9A%E6%B3%95.md</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/10/tmux.html">Tmux 使用教程 阮一峰的网络日志</a></li>
<li><a href="https://www.vpser.net/manage/screen.html">SSH远程会话管理工具 - screen使用教程</a></li>
</ul>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>守护进程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Apache ab进行压力测试</title>
    <url>/2020/05/13/apache-ab/</url>
    <content><![CDATA[<p>Apache的<code>ab</code>命令模拟多线程并发请求，测试服务器负载压力，也可以测试nginx、lighthttp、IIS等其它Web服务器的压力。</p>
<h2 id="ab的参数说明"><a href="#ab的参数说明" class="headerlink" title="ab的参数说明"></a>ab的参数说明</h2><blockquote>
<p>-n  需要执行的请求次数</p>
</blockquote>
<blockquote>
<p>-c  并发的数量</p>
</blockquote>
<blockquote>
<p>-t   等待返回的最长时间</p>
</blockquote>
<blockquote>
<p>-b  TCP收发缓冲区的大小，单位（byte）</p>
</blockquote>
<blockquote>
<p>-p 使用post (同时需要定义-T参数)</p>
</blockquote>
<blockquote>
<p>-u 使用put (同时需要定义-T参数)</p>
</blockquote>
<blockquote>
<p>-T content-type, 例如application/x-www-form-urlencoded, 默认为text/plain</p>
</blockquote>
<blockquote>
<p>-w 把结果打印在html的表格里</p>
</blockquote>
<blockquote>
<p>-x  表格的属性</p>
</blockquote>
<blockquote>
<p>-y  tr行属性</p>
</blockquote>
<blockquote>
<p>-z  td列属性</p>
</blockquote>
<blockquote>
<p>-C 设置cookie 例如Apach=1234</p>
</blockquote>
<blockquote>
<p>-H header行， 例如Accept-Encoding:gzip</p>
</blockquote>
<blockquote>
<p>-k 是否标示位HTTP Keep Alive</p>
</blockquote>
<h2 id="常用例子"><a href="#常用例子" class="headerlink" title="常用例子"></a>常用例子</h2><h3 id="模拟100个并发用户，对一个页面发送1000次请求"><a href="#模拟100个并发用户，对一个页面发送1000次请求" class="headerlink" title="模拟100个并发用户，对一个页面发送1000次请求"></a>模拟100个并发用户，对一个页面发送1000次请求</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab -n 1000 -c 100 http://localhost/</span><br></pre></td></tr></table></figure>
<p>其中-n代表请求数，-c代表并发数</p>
<h3 id="在60秒内发请求，一次100个请求。"><a href="#在60秒内发请求，一次100个请求。" class="headerlink" title="在60秒内发请求，一次100个请求。"></a>在60秒内发请求，一次100个请求。</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ab -t 60 -c 100 http://localhost/ </span><br></pre></td></tr></table></figure>

<h2 id="返回结果："><a href="#返回结果：" class="headerlink" title="返回结果："></a>返回结果：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        Apache/2.4.18  ##apache版本 </span><br><span class="line">Server Hostname:        localhost  ##请求的域名</span><br><span class="line">Server Port:            80   ##请求端口</span><br><span class="line"></span><br><span class="line">Document Path:          /    ##请求的path</span><br><span class="line">Document Length:        1195 bytes  ##页面内容大小</span><br><span class="line"></span><br><span class="line">Concurrency Level:      100  ##并发数 </span><br><span class="line">Time taken for tests:   2.338 seconds  ##共使用了多少时间</span><br><span class="line">Complete requests:      1000  ##完成的请求数 </span><br><span class="line">Failed requests:        0  ##失败的请求</span><br><span class="line">Total transferred:      1388000 bytes  ##总共传输字节数，包含http的头信息等</span><br><span class="line">HTML transferred:       1195000 bytes  ##html字节数，实际的页面传递字节数</span><br><span class="line">Requests per second:    427.78 [#/sec] (mean)  ##每秒多少请求，这个是非常重要的参数数值，服务器的吞吐量 </span><br><span class="line">Time per request:       233.767 [ms] (mean)  ##用户平均请求等待时间 </span><br><span class="line">Time per request:       2.338 [ms] (mean, across all concurrent requests)  ##服务器平均处理时间，也就是服务器吞吐量的倒数</span><br><span class="line">Transfer rate:          579.84 [Kbytes/sec] received  ##每秒获取的数据长度</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.4      0       5</span><br><span class="line">Processing:    61  221  49.6    221     389</span><br><span class="line">Waiting:       61  220  49.8    221     389</span><br><span class="line">Total:         62  221  49.6    222     389</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%    222    ## 50%的请求在222ms内返回</span><br><span class="line">  66%    240</span><br><span class="line">  75%    252</span><br><span class="line">  80%    261</span><br><span class="line">  90%    280</span><br><span class="line">  95%    302</span><br><span class="line">  98%    326</span><br><span class="line">  99%    347</span><br><span class="line"> 100%    389 (longest request)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>压力测试</category>
      </categories>
      <tags>
        <tag>压力测试</tag>
        <tag>ab</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次MySQL自动停机的问题处理</title>
    <url>/2020/05/31/mysqld-broken/</url>
    <content><![CDATA[<p>最近帮别人做的一个项目机器上面跑MySQL老是隔一段时间就自动停了。刚开始以为是以外停止，也没注意，就手动再启动。可是过了没两天又停止了。</p>
<p>后来仔细查了查<code>mysqld</code>的日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020-05-27T10:15:12.569342Z 0 [System] [MY-010116] [Server] /usr/libexec/mysqld (mysqld 8.0.17) starting as process 19493</span><br><span class="line">2020-05-27T10:15:14.448256Z 0 [System] [MY-010229] [Server] Starting crash recovery...</span><br><span class="line">2020-05-27T10:15:14.475411Z 0 [System] [MY-010232] [Server] Crash recovery finished.</span><br><span class="line">2020-05-27T10:15:14.691345Z 0 [Warning] [MY-010068] [Server] CA certificate ca.pem is self signed.</span><br><span class="line">2020-05-27T10:15:15.677386Z 0 [System] [MY-010931] [Server] /usr/libexec/mysqld: ready for connections. Version: &#x27;8.0.17&#x27;  socket: &#x27;/var/lib/mysql/mysql.sock&#x27;  port: 3306  Source distribution.</span><br><span class="line">2020-05-27T10:15:15.951210Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: &#x27;/var/lib/mysql/mysqlx.sock&#x27; bind-address: &#x27;::&#x27; port: 33060</span><br><span class="line">2020-05-27T11:26:19.955004Z 0 [System] [MY-010116] [Server] /usr/libexec/mysqld (mysqld 8.0.17) starting as process 19757</span><br><span class="line">2020-05-27T11:26:20.181302Z 0 [ERROR] [MY-012681] [InnoDB] mmap(137363456 bytes) failed; errno 12</span><br><span class="line">2020-05-27T11:26:20.181360Z 1 [ERROR] [MY-012956] [InnoDB] Cannot allocate memory for the buffer pool</span><br><span class="line">2020-05-27T11:26:20.181379Z 1 [ERROR] [MY-012930] [InnoDB] Plugin initialization aborted with error Generic error.</span><br><span class="line">2020-05-27T11:26:20.181401Z 1 [ERROR] [MY-010334] [Server] Failed to initialize DD Storage Engine</span><br><span class="line">2020-05-27T11:26:20.181543Z 0 [ERROR] [MY-010020] [Server] Data Dictionary initialization failed.</span><br><span class="line">2020-05-27T11:26:20.183642Z 0 [ERROR] [MY-010119] [Server] Aborting</span><br><span class="line">2020-05-27T11:26:20.184163Z 0 [System] [MY-010910] [Server] /usr/libexec/mysqld: Shutdown complete (mysqld 8.0.17)  Source distribution.</span><br></pre></td></tr></table></figure>

<p>上面显示是<code>Cannot allocate memory for the buffer pool</code>，无法分配内存给缓存池。马上想到是内存不足，这台机器是1GB的内存，还跑着 <code>Nginx</code> 和 <code>PHP-FPM</code> 。</p>
<p>使用 <code>top</code> 看了看 <code>mysqld</code> 占用的内存达到了48% 。内存占用还是蛮高的。</p>
<p>当然了升级机器配置是比较好的办法，但是毕竟经费有限。所以我们先给它加个<code>swap</code>交换空间：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=/dev/zero of=/swapfile bs=1M count=2048</span><br><span class="line">mkswap /swapfile</span><br><span class="line">swapon /swapfile</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>

<p>上面我们加了2GB的交换空间给机器。然后重启 <code>mysqld</code>。再使用<code>top</code>看了看，发现交换空间渐渐被使用了。</p>
<p>睡了一觉起来一看，<code>mysqld</code>服务没有再自动停止，内存占用已经下降到<code>22%</code>，看了看错误日志，也是空的。</p>
<p>嗯，看来还不错嘛。再观察个几天看看，没问题的话应该就好了😎😎😎。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
