<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>满江风雪</title>
  
  <subtitle>时光漫漫，何妨扬眉淡笑，心境从容？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://metmoon.com/"/>
  <updated>2019-04-09T04:52:36.070Z</updated>
  <id>https://metmoon.com/</id>
  
  <author>
    <name>Heropoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>玩转ElasticSearch全文搜索</title>
    <link href="https://metmoon.com/2019/04/09/elasticsearch/"/>
    <id>https://metmoon.com/2019/04/09/elasticsearch/</id>
    <published>2019-04-09T04:19:42.000Z</published>
    <updated>2019-04-09T04:52:36.070Z</updated>
    
    <content type="html"><![CDATA[<p>玩转ElasticSearch全文搜索，做个笔记。</p><h2 id="运行ElasticSearch服务"><a href="#运行ElasticSearch服务" class="headerlink" title="运行ElasticSearch服务"></a>运行ElasticSearch服务</h2><p>为了省去繁杂的安装，跳过万恶的环境，我们使用Docker容器来跑ElasticSearch的服务。</p><p>我们使用官方的<code>elasticsearch:5.6.16-alpine</code>作为基础镜像，另外添加一个中文分词插件<code>elasticsearch-ik</code></p><p>我们的Dockerfile内容如下，很简单，只需两行哟：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM elasticsearch:5.6.16-alpine</span><br><span class="line">RUN elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.6.16/elasticsearch-analysis-ik-5.6.16.zip</span><br></pre></td></tr></table></figure></p><p>构建镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t heropoo/elasticsearch-ik .</span><br></pre></td></tr></table></figure></p><p>运行容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name elasticsearch -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; heropoo/elasticsearch-ik</span><br></pre></td></tr></table></figure></p><p>因为ElasticSearch提供了REST API，我们直接可以用浏览器访问 <a href="http://localhost:9200" target="_blank" rel="noopener">http://localhost:9200</a> 看看服务是否正常。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Elastic 本质上是一个分布式数据库，允许多台服务器协同工作，每台服务器可以运行多个 Elastic 实例。单个 Elastic 实例称为一个节点（node）。一组节点构成一个集群（cluster）。</p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>Elastic 会索引所有字段，经过处理后写入一个反向索引。查找数据的时候，直接查找该索引。所以，Elastic 数据管理的顶层单位就叫做 Index（索引）。</p><p>查看当前节点的所有 Index<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &apos;http://localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure></p><h3 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h3><p>Index 里面单条的记录称为 Document（文档）。许多条 Document 构成了一个 Index。Document 使用 JSON 格式表示。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>同一个 Index 里面的 Document，不要求有相同的字段结构，但是最好保持相同，这样有利于提高搜索效率。</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>不同的 Type 应该有相似的字段结构，举例来说，id字段不能在这个组是字符串，在另一个组是数值。这是与关系型数据库的表的一个区别。性质完全不同的数据（比如products和logs）应该存成两个 Index，而不是一个 Index 里面的两个 Type（虽然可以做到）。</p><p>下面的命令可以列出每个 Index 所包含的 Type<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/_mapping?pretty=true&apos;</span><br></pre></td></tr></table></figure></p><p>pretty参数是优化显示结果易于查看</p><h2 id="Index操作"><a href="#Index操作" class="headerlink" title="Index操作"></a>Index操作</h2><h3 id="查看当前节点的所有-Index"><a href="#查看当前节点的所有-Index" class="headerlink" title="查看当前节点的所有 Index"></a>查看当前节点的所有 Index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET &apos;http://localhost:9200/_cat/indices?v&apos;</span><br></pre></td></tr></table></figure><h3 id="新建Index"><a href="#新建Index" class="headerlink" title="新建Index"></a>新建Index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;http://localhost:9200/weather&apos;</span><br></pre></td></tr></table></figure><h3 id="删除Index"><a href="#删除Index" class="headerlink" title="删除Index"></a>删除Index</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE &apos;http://localhost:9200/weather&apos;</span><br></pre></td></tr></table></figure><h3 id="新建一个-Index，指定需要分词的字段"><a href="#新建一个-Index，指定需要分词的字段" class="headerlink" title="新建一个 Index，指定需要分词的字段"></a>新建一个 Index，指定需要分词的字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;localhost:9200/accounts&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;person&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;user&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;title&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;desc&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">          &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><p>上面代码中，首先新建一个名称为accounts的 Index，里面有一个名称为person的 Type。person有三个字段 user、title、desc 这三个字段都是中文，而且类型都是文本（text），所以需要指定中文分词器，不能使用默认的英文分词器。</p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="新增记录"><a href="#新增记录" class="headerlink" title="新增记录"></a>新增记录</h3><p>向指定的 /Index/Type 发送 PUT 请求，就可以在 Index 里面新增一条记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>新增记录的时候，也可以不指定 Id，这时要改成 POST 请求<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST &apos;localhost:9200/accounts/person&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;软件工程师&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>其实PUT就是存在时修改，不存在时创建。</p><h3 id="查看记录"><a href="#查看记录" class="headerlink" title="查看记录"></a>查看记录</h3><p>向/Index/Type/Id发出 GET 请求，就可以查看这条记录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/1?pretty=true&apos;</span><br></pre></td></tr></table></figure></p><h3 id="删除记录"><a href="#删除记录" class="headerlink" title="删除记录"></a>删除记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X DELETE &apos;localhost:9200/accounts/person/1&apos;</span><br></pre></td></tr></table></figure><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><p>参考上面创建操作，用PUT方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT &apos;localhost:9200/accounts/person/1&apos; -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三1&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师1&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;数据库管理1&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><h2 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h2><h3 id="返回所有记录"><a href="#返回所有记录" class="headerlink" title="返回所有记录"></a>返回所有记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/_search&apos;</span><br></pre></td></tr></table></figure><h3 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;数据库&quot; &#125;&#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>如果有多个搜索关键字， Elastic 认为它们是or关系<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>如果要执行多个关键词的and搜索，必须使用布尔查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl &apos;localhost:9200/accounts/person/_search&apos;  -d &apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>搞定~</p><p>参考：<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;玩转ElasticSearch全文搜索，做个笔记。&lt;/p&gt;
&lt;h2 id=&quot;运行ElasticSearch服务&quot;&gt;&lt;a href=&quot;#运行ElasticSearch服务&quot; class=&quot;headerlink&quot; title=&quot;运行ElasticSearch服务&quot;&gt;&lt;/a&gt;运行
      
    
    </summary>
    
      <category term="全文搜索" scheme="https://metmoon.com/categories/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
      <category term="全文搜索" scheme="https://metmoon.com/tags/%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/"/>
    
      <category term="ElasticSearch" scheme="https://metmoon.com/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>用Redis实现PHP异步队列</title>
    <link href="https://metmoon.com/2019/03/29/php-queue/"/>
    <id>https://metmoon.com/2019/03/29/php-queue/</id>
    <published>2019-03-29T07:40:41.000Z</published>
    <updated>2019-04-09T04:18:40.335Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。</p><p>下面引用百度百科的对<a href="https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481" target="_blank" rel="noopener">队列</a>的解释：</p><blockquote><p>队列是一种特殊的线性表，特殊之处在于它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作，和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。<br>简单点讲就是：先进先出</p></blockquote><p>要实现一个队列，你可以根据自身服务器资源，可选数据库或者redis或者其他更高级的队列资源来实现。</p><p>简单实现，大概代码是这样子的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $items = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span><span class="params">($key, $value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;items[$key]) <span class="keyword">or</span> <span class="keyword">$this</span>-&gt;items[$key] = [];</span><br><span class="line">        <span class="keyword">return</span> array_push(<span class="keyword">$this</span>-&gt;items[$key], $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列头部取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     * return mixed $value 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">isset</span>(<span class="keyword">$this</span>-&gt;items[$key]) <span class="keyword">or</span> <span class="keyword">$this</span>-&gt;items[$key] = [];</span><br><span class="line">        <span class="keyword">return</span> array_shift(<span class="keyword">$this</span>-&gt;items[$key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">var_dump($queue-&gt;pop(<span class="string">'list_1'</span>));    <span class="comment">//输出 NULL</span></span><br><span class="line"></span><br><span class="line">$queue-&gt;push(<span class="string">'list_1'</span>, <span class="string">'1'</span>);</span><br><span class="line">$queue-&gt;push(<span class="string">'list_1'</span>, <span class="string">'2'</span>);</span><br><span class="line">$queue-&gt;push(<span class="string">'list_1'</span>, <span class="string">'3'</span>);</span><br><span class="line"></span><br><span class="line">var_dump($queue-&gt;pop(<span class="string">'list_1'</span>));    <span class="comment">//输出 string(1) "1"</span></span><br><span class="line">var_dump($queue-&gt;pop(<span class="string">'list_1'</span>));    <span class="comment">//输出 string(1) "2"</span></span><br></pre></td></tr></table></figure></p><p>上面是一个直接存储在数组中的队列，只能在一个php生命周期中使用。我们可以把存储的方式改成别的，例如数据库或者redis什么的。</p><p>这里我们使用redis，用到redis的有序列表（list）<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisQueue</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> $client;  <span class="comment">//这里使用了predis这个库连接redis</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(\Predis\Client $client)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client = $client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span><span class="params">($key, $value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;rpush($key, $value);  <span class="comment">//从右边入队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列头部取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed $value 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pop</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;lpop($key);   <span class="comment">//从左边取</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你还是可以使用上面的例子测试下。</p><p>当然了，还有很多情况下，我们的队列要延时出队，我们就要使用redis的另外两种数据类型：有序集合zset和哈希hlist</p><p>最终代码如下：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisQueue</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span>  $client;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">(\Predis\Client $client)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client = $client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从队列尾部插入数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> int $delay 延迟多少秒</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed $value 数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">push</span><span class="params">($key, $value, $delay = null)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(is_null($delay))&#123;    <span class="comment">//不使用延迟的时候还是使用以前的rpush入队</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;rpush($key, $value);</span><br><span class="line">        &#125;</span><br><span class="line">        $time = time() + $delay;</span><br><span class="line">        <span class="keyword">if</span>($time &gt; time())&#123;     <span class="comment">//还未到该入队的时间时</span></span><br><span class="line">            $hash_key = md5(<span class="keyword">$this</span>-&gt;randString(<span class="number">16</span>).<span class="string">'_'</span>.time().<span class="string">'_'</span>.$value);       <span class="comment">//生成一个唯一key</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;transaction(<span class="function"><span class="keyword">function</span><span class="params">($tx)</span> <span class="title">use</span> <span class="params">($key, $time, $hash_key, $value)</span></span>&#123;   <span class="comment">//使用reids事务</span></span><br><span class="line">                <span class="comment">/** <span class="doctag">@var</span> \Predis\Client $tx */</span></span><br><span class="line">                $tx-&gt;zadd($key.<span class="string">':zset'</span>, [   </span><br><span class="line">                    $hash_key=&gt;$time    <span class="comment">//这里以生成的唯一key做 对象member 以time做分数score</span></span><br><span class="line">                ]);</span><br><span class="line">                $tx-&gt;hset($key.<span class="string">':hlist'</span>, $hash_key, $value);    <span class="comment">//并且保存唯一key和值的映射</span></span><br><span class="line">                $tx-&gt;expire($key.<span class="string">':zset'</span>, <span class="number">7</span>*<span class="number">86400</span>);     <span class="comment">//有效期7天</span></span><br><span class="line">                $tx-&gt;expire($key.<span class="string">':hlist'</span>, <span class="number">7</span>*<span class="number">86400</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> string $key 对列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">receive</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;getLock($key.<span class="string">':lock'</span>))&#123;   <span class="comment">//使用锁保证线程安全</span></span><br><span class="line">            $keys = <span class="keyword">$this</span>-&gt;client-&gt;zrangebyscore($key.<span class="string">':zset'</span>,<span class="number">0</span>, time());   <span class="comment">//按当前时间取分数小于等于当前时间的集合元素</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="keyword">empty</span>($keys)) &#123;</span><br><span class="line">                $message_datas = <span class="keyword">$this</span>-&gt;client-&gt;hmget($key.<span class="string">':hlist'</span>, $keys);    <span class="comment">//通过这些key拿到值</span></span><br><span class="line">                <span class="keyword">$this</span>-&gt;client-&gt;transaction(<span class="function"><span class="keyword">function</span><span class="params">($tx)</span> <span class="title">use</span> <span class="params">($key, $keys, $message_datas)</span></span>&#123; <span class="comment">//继续使用redis事务保证数据完整</span></span><br><span class="line">                    <span class="comment">/** <span class="doctag">@var</span> \Predis\Client $tx */</span></span><br><span class="line">                    <span class="keyword">foreach</span> ($message_datas <span class="keyword">as</span> $i =&gt; $message_data)&#123;</span><br><span class="line">                        $tx-&gt;rpush($key, $message_data); <span class="comment">//这时候才是真正的入队</span></span><br><span class="line">                        $hash_key = $keys[$i];</span><br><span class="line">                        $tx-&gt;hdel($key.<span class="string">':hlist'</span>, $hash_key);    <span class="comment">//从hash列表删除元素</span></span><br><span class="line">                        $tx-&gt;zrem($key.<span class="string">':zset'</span>, $hash_key); <span class="comment">//从集合删除元素</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;releaseLock($key.<span class="string">':lock'</span>);<span class="comment">//释放锁</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;client-&gt;lpop($key); <span class="comment">//出队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getLock</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        $ret = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;client-&gt;incr($key) != <span class="number">1</span>)&#123;</span><br><span class="line">            $ret = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $ttl = <span class="keyword">$this</span>-&gt;client-&gt;ttl($key);</span><br><span class="line">        <span class="keyword">if</span>($ttl == <span class="number">-1</span>) &#123;    <span class="comment">//forever</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;client-&gt;expire($key, <span class="number">60</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">releaseLock</span><span class="params">($key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;client-&gt;del($key);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">randString</span><span class="params">($length)</span></span>&#123;</span><br><span class="line">        $str = <span class="string">''</span>;</span><br><span class="line">        $strPol = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">        $max = strlen($strPol) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $length; $i++) &#123;</span><br><span class="line">            $str .= $strPol[mt_rand(<span class="number">0</span>, $max)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要看上面入队（push）和出队（receive）方法，我代码写了详细的注释。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近项目中用到好多用异步队列处理的后台任务，有些心得，记录一下。&lt;/p&gt;
&lt;p&gt;下面引用百度百科的对&lt;a href=&quot;https://baike.baidu.com/item/%E9%98%9F%E5%88%97/14580481&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="Queue" scheme="https://metmoon.com/categories/Queue/"/>
    
      <category term="PHP" scheme="https://metmoon.com/categories/Queue/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Queue" scheme="https://metmoon.com/tags/Queue/"/>
    
      <category term="Redis" scheme="https://metmoon.com/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>容器的宠儿AlpineLinux的基本使用</title>
    <link href="https://metmoon.com/2019/01/17/alpinelinux/"/>
    <id>https://metmoon.com/2019/01/17/alpinelinux/</id>
    <published>2019-01-17T06:48:41.000Z</published>
    <updated>2019-04-09T04:18:40.333Z</updated>
    
    <content type="html"><![CDATA[<p>现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使用精简系统模板。尽管这样做还是很大，起码也得有个几十兆吧。所以使用一个本身体积就小的操作系统做基础模板来构建才是关键。AlpineLinux是一个使用busybox的linux操作系统，而他的体积只需要4兆多。所以对我这种喜欢轻量级的人还说，这真是好东西啊！</p><p>哈哈~废话不多说了，说说这个系统的基本使用吧</p><h2 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h2><p>更新软件包索引文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk update</span><br></pre></td></tr></table></figure></p><p>如果感觉网速很慢，那可以先换个中国的源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#中科大的源 速度杠杠的</span><br><span class="line">sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br></pre></td></tr></table></figure></p><p>下面我们以安装nginx为例</p><p>安装软件包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add nginx</span><br></pre></td></tr></table></figure></p><p>安装软件包到最新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk add --update nginx</span><br></pre></td></tr></table></figure></p><p>查找软件包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk search nginx</span><br></pre></td></tr></table></figure></p><p>卸载软件包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apk del nginx</span><br></pre></td></tr></table></figure></p><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>启动Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nginx start</span><br></pre></td></tr></table></figure></p><p>添加nginx到启动服务中，下次开机自动运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc-update add nginx</span><br></pre></td></tr></table></figure></p><p>把nginx从启动服务中移除，下次开机不会自动运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc-update del nginx</span><br></pre></td></tr></table></figure></p><h2 id="一些网络工具所在软件包"><a href="#一些网络工具所在软件包" class="headerlink" title="一些网络工具所在软件包"></a>一些网络工具所在软件包</h2><pre><code>telnet  =&gt;  busybox-extras</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在docker的容器技术很流行，对于我们这种整天被各种万恶的开发环境坑的开发来说是个解放。但是当我们在拉取docker镜像的时候，会发现普遍基于debian或者ubuntu的镜像都是体积很大，动辄几十或者上百兆。当然了docker镜像在构建的时候会删除旭东无用的东西并且使
      
    
    </summary>
    
      <category term="Linux" scheme="https://metmoon.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://metmoon.com/tags/Linux/"/>
    
      <category term="AlpineLinux" scheme="https://metmoon.com/tags/AlpineLinux/"/>
    
  </entry>
  
  <entry>
    <title>PHP多进程之pcntl扩展的使用</title>
    <link href="https://metmoon.com/2019/01/02/php-pcntl/"/>
    <id>https://metmoon.com/2019/01/02/php-pcntl/</id>
    <published>2019-01-02T02:48:08.000Z</published>
    <updated>2019-04-09T04:18:40.331Z</updated>
    
    <content type="html"><![CDATA[<p>PHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>可以直接使用<code>pecl install pcntl</code>，或者去<code>https://pecl.php.net/</code>下载源码包手动编译安装。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>先举个官方的栗子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">$pid = pcntl_fork();</span><br><span class="line"><span class="comment">//父进程和子进程都会执行下面代码</span></span><br><span class="line"><span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">//错误处理：创建子进程失败时返回-1.</span></span><br><span class="line">     <span class="keyword">die</span>(<span class="string">'could not fork'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($pid) &#123;</span><br><span class="line">     <span class="comment">//父进程会得到子进程号，所以这里是父进程执行的逻辑</span></span><br><span class="line">     pcntl_wait($status); <span class="comment">//等待子进程中断，防止子进程成为僵尸进程。</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用到的函数:</p><ul><li><p><a href="https://secure.php.net/manual/zh/function.pcntl-fork.php" target="_blank" rel="noopener">pcntl_fork</a>在当前进程当前位置产生分支（子进程）。fork是创建了一个子进程，父进程和子进程 都从fork的位置开始向下继续执行，不同的是父进程执行过程中，得到的fork返回值为子进程 号，而子进程得到的是0。</p></li><li><p><a href="https://secure.php.net/manual/zh/function.pcntl-wait.php" target="_blank" rel="noopener">pcntl_wait</a> 等待或返回fork的子进程状态。这个函数会挂起当前进程的执行直到一个子进程退出或接收到一个信号要求中断当前进程或调用一个信号处理函数。如果一个子进程在调用此函数时已经退出（俗称僵尸进程），此函数立刻返回。子进程使用的所有系统资源将被释放。</p></li></ul><p>再来个经典栗子：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$children = []; <span class="comment">//定义一个数组用来存储子进程的pid</span></span><br><span class="line">$m = <span class="number">10</span>;    <span class="comment">//fork 10次</span></span><br><span class="line"><span class="keyword">for</span> ($x = <span class="number">0</span>; $x &lt; $m; $x++) &#123;</span><br><span class="line">    $pid = pcntl_fork();</span><br><span class="line">    <span class="keyword">if</span> ($pid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'could not fork '</span>.$x);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ($pid) &#123;    <span class="comment">//父进程执行的代码块</span></span><br><span class="line">        $children[] = $pid;</span><br><span class="line">        printf(<span class="string">"Parent get child %d 's pid: %d\n"</span>, $x, $pid);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    <span class="comment">//子进程执行的代码块</span></span><br><span class="line">        $my_pid = posix_getpid();    <span class="comment">//子进程获取自己的pid</span></span><br><span class="line">        <span class="comment">//子进程得到的$pid为0, 所以这里是子进程执行的逻辑。</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"Child $my_pid running...\n"</span>;</span><br><span class="line">        sleep(<span class="number">10</span>);        <span class="comment">//子进程干点啥 这里是睡10秒</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"...Child $my_pid done\n"</span>;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="number">0</span>);        <span class="comment">//子进程执行结束exit</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(count($children) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">foreach</span>($children <span class="keyword">as</span> $key =&gt; $pid) &#123;</span><br><span class="line">        $res = pcntl_waitpid($pid, $status, WNOHANG);    <span class="comment">//获取返回指定pid的返回状态加了第二个参数非阻塞</span></span><br><span class="line">        <span class="keyword">if</span>($res == <span class="number">-1</span> || $res &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">"Parent get child $pid 's status: $status\n"</span>;</span><br><span class="line">            <span class="keyword">unset</span>($children[$key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">1</span>);        <span class="comment">//每一秒去轮询没有退出的子进程状态</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>—- 最后更新于 2019-03-27 19:04:55</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PHP实现多进程的模块是pcntl，而且只有在linux下才使用这个拓展，不过现在服务器都基本使用linux，我们还是可以用起来的。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2
      
    
    </summary>
    
      <category term="PHP" scheme="https://metmoon.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="pcntl" scheme="https://metmoon.com/tags/pcntl/"/>
    
  </entry>
  
  <entry>
    <title>关于PHP Composer 版本号前置~与^符号的区别(转)</title>
    <link href="https://metmoon.com/2018/12/29/php-composer-version/"/>
    <id>https://metmoon.com/2018/12/29/php-composer-version/</id>
    <published>2018-12-29T07:14:57.000Z</published>
    <updated>2019-04-09T04:18:40.319Z</updated>
    
    <content type="html"><![CDATA[<p><code>~</code>和<code>^</code>的意思很接近，在<code>x.y</code>的情况下是一样的，都是代表<code>x.y &lt;= 版本号 &lt; (x+1).0</code>。但是在版本号是<code>x.y.z</code>的情况下有区别，举个例子：</p><ul><li><p><code>~1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 1.3.0</code></p></li><li><p><code>^1.2.3</code> 代表 <code>1.2.3 &lt;= 版本号 &lt; 2.0.0</code></p></li></ul><p>原文链接： <a href="https://www.cnblogs.com/hcpzhe/p/7909651.html" target="_blank" rel="noopener">https://www.cnblogs.com/hcpzhe/p/7909651.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;~&lt;/code&gt;和&lt;code&gt;^&lt;/code&gt;的意思很接近，在&lt;code&gt;x.y&lt;/code&gt;的情况下是一样的，都是代表&lt;code&gt;x.y &amp;lt;= 版本号 &amp;lt; (x+1).0&lt;/code&gt;。但是在版本号是&lt;code&gt;x.y.z&lt;/code&gt;的情况下有区
      
    
    </summary>
    
      <category term="PHP" scheme="https://metmoon.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Composer" scheme="https://metmoon.com/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>从SSH私钥中重新生成公钥</title>
    <link href="https://metmoon.com/2018/11/19/get-ssh-public-key-from-private-key/"/>
    <id>https://metmoon.com/2018/11/19/get-ssh-public-key-from-private-key/</id>
    <published>2018-11-19T15:59:52.000Z</published>
    <updated>2018-11-19T16:06:18.353Z</updated>
    
    <content type="html"><![CDATA[<p>从SSH私钥中重新生成公钥</p><p>假如我们的私钥是<code>id_rsa</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -y -f id_rsa</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDdqNYfRhP/4Y1Kwr5/ZfRPbQkDEKQ9sLpGYex2bzXsPIXZmpgI4yUkLkQRCyvrMoZQKOcabb+GgnrYJvPR1rO/CVI9bfUw+MD1OFvnJUI2deATTeMj2hlY/IDSS1q3AG1ZEztFLizTiJqZvkjx/WPXR/b7ZIVV5DRIeaUMCfEjNIRD+spcJ5ALBuwGPO+4irAXIxgTxbYMDD2ASnpr6v7oSzc0N5ZhZ7rV1dk6hA/RowqYO7DwIvZtOAc55sv6pSUYG3RUJhnkzcmE5VTbyTMKB6O738np6DEw5soWdL1ITPgLE+uJcTt8tcOmPkBXv+45A4TuJ5ksONil8xhfVYG3</span><br></pre></td></tr></table></figure></p><p>可以直接重定向到文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -y -f id_rsa &gt; id_rsa.pub</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从SSH私钥中重新生成公钥&lt;/p&gt;
&lt;p&gt;假如我们的私钥是&lt;code&gt;id_rsa&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
      <category term="SSH" scheme="https://metmoon.com/categories/SSH/"/>
    
    
      <category term="SSH" scheme="https://metmoon.com/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>MySQL5.7的JSON基本操作</title>
    <link href="https://metmoon.com/2018/11/18/mysql-json/"/>
    <id>https://metmoon.com/2018/11/18/mysql-json/</id>
    <published>2018-11-18T10:11:06.000Z</published>
    <updated>2019-04-09T04:18:40.316Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。</p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);</span><br></pre></td></tr></table></figure></p><p>json类型字段可以为NULL</p><h3 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaoming&apos;,&apos;&#123;&quot;sex&quot;: 1, &quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125;&apos;);</span><br></pre></td></tr></table></figure><p>json类型的字段必须时一个有效的json字符串</p><p>可以使用JSON_OBJECT()函数构造json对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaohua&apos;, JSON_OBJECT(&quot;sex&quot;, 0, &quot;age&quot;, 17));</span><br></pre></td></tr></table></figure></p><p>使用JSON_ARRAY()函数构造json数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaozhang&apos;, JSON_OBJECT(&quot;sex&quot;, 1, &quot;age&quot;, 19, &quot;tag&quot;, JSON_ARRAY(3,5,90)));</span><br></pre></td></tr></table></figure></p><p>现在查看<code>test_user</code>表中的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user;</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">| id | name      | info                                       |</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">|  1 | xiaoming  | &#123;&quot;age&quot;: 18, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小萌&quot;&#125; |</span><br><span class="line">|  2 | xiaohua   | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0&#125;                      |</span><br><span class="line">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90]&#125;   |</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>表达式： 对象为<code>json列-&gt;&#39;$.键&#39;</code>, 数组为<code>json列-&gt;&#39;$.键[index]&#39;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&apos;$.nick_name&apos;, info-&gt;&apos;$.sex&apos;, info-&gt;&apos;$.tag[0]&apos; from test_user;</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">| name      | info-&gt;&apos;$.nick_name&apos; | info-&gt;&apos;$.sex&apos; | info-&gt;&apos;$.tag[0]&apos; |</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">| xiaoming  | &quot;小萌&quot;              | 1             | NULL             |</span><br><span class="line">| xiaohua   | NULL                | 0             | NULL             |</span><br><span class="line">| xiaozhang | NULL                | 1             | 3                |</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><p>等价于：对象为<code>JSON_EXTRACT(json列 , &#39;$.键&#39;)</code>，数组为<code>JSON_EXTRACT(json列 , &#39;$.键[index]&#39;)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, JSON_EXTRACT(info, &apos;$.nick_name&apos;), JSON_EXTRACT(info, &apos;$.sex&apos;), JSON_EXTRACT(info, &apos;$.tag[0]&apos;)  from test_user;</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">| name      | JSON_EXTRACT(info, &apos;$.nick_name&apos;) | JSON_EXTRACT(info, &apos;$.sex&apos;) | JSON_EXTRACT(info, &apos;$.tag[0]&apos;) |</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">| xiaoming  | &quot;小萌&quot;                            | 1                           | NULL                           |</span><br><span class="line">| xiaohua   | NULL                              | 0                           | NULL                           |</span><br><span class="line">| xiaozhang | NULL                              | 1                           | 3                              |</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><p>不过看到上面<code>&quot;小萌&quot;</code>是带双引号的，这不是我们想要的，可以用<code>JSON_UNQUOTE</code>函数将双引号去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) from test_user where name=&apos;xiaoming&apos;;</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">| name     | JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) |</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">| xiaoming | 小萌                              |</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><p>也可以直接使用操作符<code>-&gt;&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where name=&apos;xiaoming&apos;;</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| xiaoming | 小萌                 |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>当然属性也可以作为查询条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where info-&gt;&apos;$.nick_name&apos;=&apos;小萌&apos;;</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| xiaoming | 小萌                 |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><p>值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。</p><p>创建虚拟列:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info-&gt;&gt;&apos;$.nick_name&apos;) VIRTUAL;</span><br></pre></td></tr></table></figure></p><p>注意用操作符<code>-&gt;&gt;</code></p><p>使用时和普通类型的列查询是一样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,nick_name from test_user where nick_name=&apos;小萌&apos;;</span><br><span class="line">+----------+-----------+</span><br><span class="line">| name     | nick_name |</span><br><span class="line">+----------+-----------+</span><br><span class="line">| xiaoming | 小萌      |</span><br><span class="line">+----------+-----------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>使用<code>JSON_INSERT()</code>插入新值，但不会覆盖已经存在的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_INSERT(info, &apos;$.sex&apos;, 1, &apos;$.nick_name&apos;, &apos;小花&apos;) where id=2;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=2;</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">| id | name    | info                                       | nick_name |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>使用<code>JSON_SET()</code>插入新值，并覆盖已经存在的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_SET(info, &apos;$.sex&apos;, 0, &apos;$.nick_name&apos;, &apos;小张&apos;) where id=3;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=3;</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">| id | name      | info                                                          | nick_name |</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90], &quot;nick_name&quot;: &quot;小张&quot;&#125; | 小张      |</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>使用<code>JSON_REPLACE()</code>只替换存在的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_REPLACE(info, &apos;$.sex&apos;, 1, &apos;$.tag&apos;, &apos;[1,2,3]&apos;) where id=2;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=2;</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">| id | name    | info                                       | nick_name |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到tag没有更新进去</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用<code>JSON_REMOVE()</code>删除JSON元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_REMOVE(info, &apos;$.sex&apos;, &apos;$.tag&apos;) where id=1;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=1;</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">| id | name     | info                             | nick_name |</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">|  1 | xiaoming | &#123;&quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125; | 小萌      |</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><p>最后从MySQL的官方网站查看帮助文档：<a href="http://dev.mysql.com/doc/refman/5.7/en/json.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/json.html</a></p><p>😎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。&lt;/p&gt;
&lt;h3 id=&quot;建表&quot;&gt;&lt;a href=&quot;#建表&quot; class=&quot;headerlink&quot; title=&quot;建表&quot;&gt;&lt;/a&gt;建表&lt;/h3&gt;&lt;p&gt;在新建表时字段类型可以直接设置为json类型，比如我
      
    
    </summary>
    
      <category term="MySQL" scheme="https://metmoon.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://metmoon.com/tags/MySQL/"/>
    
      <category term="JSON" scheme="https://metmoon.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>安装Jupyter笔记本</title>
    <link href="https://metmoon.com/2018/11/02/jupyter/"/>
    <id>https://metmoon.com/2018/11/02/jupyter/</id>
    <published>2018-11-02T11:07:09.000Z</published>
    <updated>2018-11-18T09:41:26.924Z</updated>
    
    <content type="html"><![CDATA[<p>安装Jupyter笔记本，做个笔记</p><p>通过pip安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install jupyter</span><br></pre></td></tr></table></figure></p><p>创建Jupyter默认配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure></p><p>生成SHA1加密的密钥，如’sha1:XXXXXX’<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipython</span><br><span class="line">--------------------------------------</span><br><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure></p><p>修改配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .jupyter/jupyter_notebook_config.py</span><br><span class="line">--------------------------------------</span><br><span class="line">c.NotebookApp.password = u<span class="string">'sha1:XXXXXX'</span></span><br></pre></td></tr></table></figure></p><p>运行jupyter<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>可选的运行参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure></p><p>打开浏览器输入 <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装Jupyter笔记本，做个笔记&lt;/p&gt;
&lt;p&gt;通过pip安装&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://metmoon.com/categories/python/"/>
    
    
      <category term="jupyter" scheme="https://metmoon.com/tags/jupyter/"/>
    
      <category term="python" scheme="https://metmoon.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>修复gitment评论</title>
    <link href="https://metmoon.com/2018/10/27/fix-gitment/"/>
    <id>https://metmoon.com/2018/10/27/fix-gitment/</id>
    <published>2018-10-27T08:17:34.000Z</published>
    <updated>2018-10-27T08:41:36.436Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。</p><p>从我开始用gitment的评论系统，总共出现过两次问题：</p><h2 id="1-github-issue-label的字符长度限制"><a href="#1-github-issue-label的字符长度限制" class="headerlink" title="1. github-issue label的字符长度限制"></a>1. github-issue label的字符长度限制</h2><p>这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page_date = <span class="string">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="keyword">if</span>(page_date &gt; <span class="string">'2018-04-31 00:00:00 +0000'</span>)&#123;</span><br><span class="line">    id = page_date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    id: id, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">    owner: <span class="string">'heropoo'</span>,</span><br><span class="line">    repo: <span class="string">'heropoo.github.io'</span>,</span><br><span class="line">    oauth: &#123;</span><br><span class="line">        client_id: <span class="string">'cccc'</span>,</span><br><span class="line">        client_secret: <span class="string">'xxxx'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">gitment.render(<span class="string">'container'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="2-gitment-作者提供的oauth授权服务不可用"><a href="#2-gitment-作者提供的oauth授权服务不可用" class="headerlink" title="2. gitment 作者提供的oauth授权服务不可用"></a>2. gitment 作者提供的oauth授权服务不可用</h2><p>这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。</p><h2 id="3-升级https"><a href="#3-升级https" class="headerlink" title="3. 升级https"></a>3. 升级https</h2><p>现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ<br>但是还得修嘛。后来仔细观察了下，原来作者是使用<code>gitment</code>和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page_date = <span class="string">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class="line"><span class="comment">//var id = window.location.href;</span></span><br><span class="line"><span class="comment">//if(page_date &gt; '2018-04-31 00:00:00 +0000')&#123;</span></span><br><span class="line"><span class="keyword">var</span> id = page_date;</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    id: id, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">    owner: <span class="string">'heropoo'</span>,</span><br><span class="line">    repo: <span class="string">'heropoo.github.io'</span>,</span><br><span class="line">    oauth: &#123;</span><br><span class="line">        client_id: <span class="string">'cccc'</span>,</span><br><span class="line">        client_secret: <span class="string">'xxxx'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">gitment.render(<span class="string">'container'</span>);</span><br></pre></td></tr></table></figure></p><p>好了，搞完收工。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。&lt;/p&gt;
&lt;p&gt;从我开始用gitment的评论系统，总共出现过两次问题：&lt;/p&gt;
&lt;h2 id=&quot;1-github-issue-label的字符长度限制&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="github-issue" scheme="https://metmoon.com/categories/github-issue/"/>
    
    
      <category term="github-issue" scheme="https://metmoon.com/tags/github-issue/"/>
    
      <category term="gitment" scheme="https://metmoon.com/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>关于Yii2查询数据对象ActiveRecord的json序列化问题</title>
    <link href="https://metmoon.com/2018/10/16/yii2-activerecord-to-json/"/>
    <id>https://metmoon.com/2018/10/16/yii2-activerecord-to-json/</id>
    <published>2018-10-16T09:53:45.000Z</published>
    <updated>2018-10-16T14:38:06.480Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用<code>json_encode</code>函数序列化Yii2查询得到的数据模型对象（通常继承<code>ActiveRecord</code>类）时，发现返回结果是<code>{}</code>,而不是预期的数据库字段键值对这种形式：<code>{&quot;name&quot;： &quot;xxx&quot;, &quot;sex&quot;: 1}</code></p><p>后来赶时间就直接在手动处理了下，改动了下模型对象让它接入<code>JsonSerializable</code>接口，并实现其接口方法，类似这样；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> <span class="keyword">implements</span> \<span class="title">JsonSerializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//... 其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonSerialize</span> <span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toArray();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后完美的解决了。 </p><p>但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： <code>\yii\helpers\BaseJson::encode($user)</code>。然后翻了翻源代码，部分代码是这样的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from \yii\helpers\BaseJson::processData</span></span><br><span class="line"><span class="keyword">if</span> (is_object($data)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($data <span class="keyword">instanceof</span> JsExpression) &#123;</span><br><span class="line">        $token = <span class="string">"!&#123;[$expPrefix="</span> . count($expressions) . <span class="string">']&#125;!'</span>;</span><br><span class="line">        $expressions[<span class="string">'"'</span> . $token . <span class="string">'"'</span>] = $data-&gt;expression;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $token;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($data <span class="keyword">instanceof</span> \JsonSerializable) &#123;</span><br><span class="line">        $data = $data-&gt;jsonSerialize();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($data <span class="keyword">instanceof</span> Arrayable) &#123; <span class="comment">// &lt;---here</span></span><br><span class="line">        $data = $data-&gt;toArray();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($data <span class="keyword">instanceof</span> \SimpleXMLElement) &#123;</span><br><span class="line">        $data = (<span class="keyword">array</span>) $data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $result = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            $result[$name] = $value;</span><br><span class="line">        &#125;</span><br><span class="line">        $data = $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($data === []) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> \stdClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作者在处理数据的时候做了判断，<code>ActiveRecord</code>类接了<code>Arrayable</code>接口，然后作者也是使用<code>toArray()</code>方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在使用&lt;code&gt;json_encode&lt;/code&gt;函数序列化Yii2查询得到的数据模型对象（通常继承&lt;code&gt;ActiveRecord&lt;/code&gt;类）时，发现返回结果是&lt;code&gt;{}&lt;/code&gt;,而不是预期的数据库字段键值对这种形式：&lt;code&gt;{&amp;quot
      
    
    </summary>
    
      <category term="PHP" scheme="https://metmoon.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="https://metmoon.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>盗将行(转)</title>
    <link href="https://metmoon.com/2018/09/18/%E7%9B%97%E5%B0%86%E8%A1%8C/"/>
    <id>https://metmoon.com/2018/09/18/盗将行/</id>
    <published>2018-09-18T10:10:52.000Z</published>
    <updated>2018-09-18T10:16:06.304Z</updated>
    
    <content type="html"><![CDATA[<p>野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……</p><p>野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……</p><p>公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”</p><p>“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”</p><p>“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……</p><p>作者：一个人的兵荒馬乱<br>链接：<a href="https://www.jianshu.com/p/7aa6bfbb0df1" target="_blank" rel="noopener">https://www.jianshu.com/p/7aa6bfbb0df1</a><br>來源：简书</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……&lt;/p&gt;
&lt;p&gt;野史记载:宋钦宗元年（1126
      
    
    </summary>
    
      <category term="听风雨" scheme="https://metmoon.com/categories/%E5%90%AC%E9%A3%8E%E9%9B%A8/"/>
    
    
      <category term="听风雨" scheme="https://metmoon.com/tags/%E5%90%AC%E9%A3%8E%E9%9B%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器动态添加端口</title>
    <link href="https://metmoon.com/2018/09/16/docker-container-port/"/>
    <id>https://metmoon.com/2018/09/16/docker-container-port/</id>
    <published>2018-09-16T15:40:33.000Z</published>
    <updated>2019-04-09T04:18:40.312Z</updated>
    
    <content type="html"><![CDATA[<p>突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/zuoshenglo/article/details/78402772" target="_blank" rel="noopener">怎么给运行中的docker容器添加新的端口</a></li><li><a href="https://blog.csdn.net/wesleyflagon/article/details/78961990" target="_blank" rel="noopener">修改docker容器端口映射的方法</a></li><li><a href="https://blog.csdn.net/xfks55/article/details/50148389" target="_blank" rel="noopener">iptable规则查看，添加，删除和修改</a></li></ul><h2 id="方法1-修改iptables端口映射"><a href="#方法1-修改iptables端口映射" class="headerlink" title="方法1 修改iptables端口映射"></a>方法1 修改iptables端口映射</h2><blockquote><p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p></blockquote><p>比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -vnL</span><br></pre></td></tr></table></figure></p><p>在结果中有一条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain DOCKER</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80</span><br></pre></td></tr></table></figure></p><p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3</p><p>也可以通过inspect命令查看容器ip<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect containerId |grep IPAddress</span><br></pre></td></tr></table></figure></p><p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81</span><br></pre></td></tr></table></figure></p><p>如果加错了或者想修改：</p><p>先显示行号查看<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -vnL DOCKER --line-number</span><br></pre></td></tr></table></figure></p><p>删除规则3<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -D DOCKER 3</span><br></pre></td></tr></table></figure></p><h2 id="方法2-修改容器配置文件"><a href="#方法2-修改容器配置文件" class="headerlink" title="方法2 修改容器配置文件"></a>方法2 修改容器配置文件</h2><p>容器的配置文件<code>/var/lib/docker/containers/[containerId]</code>目录下，<code>hostconfig.json</code>和<code>config.v2.json</code><br>修改好之后，重启容器服务。</p><h2 id="方法3-把运行中的容器生成新的镜像，然后运行新的镜像"><a href="#方法3-把运行中的容器生成新的镜像，然后运行新的镜像" class="headerlink" title="方法3 把运行中的容器生成新的镜像，然后运行新的镜像"></a>方法3 把运行中的容器生成新的镜像，然后运行新的镜像</h2><ol><li><p>提交一个运行中的容器为镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit containerid heropoo/example</span><br></pre></td></tr></table></figure></li><li><p>运行<code>heropoo/example</code>镜像并添加8080映射容器80端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:80  heropoo/example /bin/sh</span><br></pre></td></tr></table></figure></li></ol><p>试试吧~😎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zuoshenglo/article/details/78402772&quot; t
      
    
    </summary>
    
      <category term="Docker" scheme="https://metmoon.com/categories/Docker/"/>
    
    
      <category term="虚拟化" scheme="https://metmoon.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="容器" scheme="https://metmoon.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Bing搜索引擎做站内搜索</title>
    <link href="https://metmoon.com/2018/09/15/bing-site-search/"/>
    <id>https://metmoon.com/2018/09/15/bing-site-search/</id>
    <published>2018-09-15T12:14:05.000Z</published>
    <updated>2018-09-16T12:31:06.153Z</updated>
    
    <content type="html"><![CDATA[<p>因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。</p><p>大概是这样的效果<br><img src="/assets/images/20180916201818.png" alt="example-pic"></p><p>观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字<code>git site:www.ioio.pw</code>提交之后的url是<code>https://bing.com/search?q=git+site%3Awww.ioio.pw</code></p><p>所以开始写个简单的form表单就好了，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>bing search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bing Search<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://bing.com/search"</span> <span class="attr">id</span>=<span class="string">"searchForm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"www.ioio.pw"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> searchForm = <span class="built_in">document</span>.getElementById(<span class="string">'searchForm'</span>);</span></span><br><span class="line"><span class="javascript">searchForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url = <span class="keyword">this</span>.action;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> q = <span class="keyword">this</span>.children[<span class="string">'q'</span>].value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> site = <span class="keyword">this</span>.children[<span class="string">'site'</span>].value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url = url + <span class="string">'?q='</span>+q+<span class="string">' site:'</span>+ site;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.open(url);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>好了，搞定~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。&lt;/p&gt;
&lt;p&gt;大概是这样的效果&lt;br&gt;&lt;img src=&quot;/assets/images/20180916201818.png&quot; alt=&quot;ex
      
    
    </summary>
    
      <category term="搜索引擎" scheme="https://metmoon.com/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="搜索引擎" scheme="https://metmoon.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="站内搜索" scheme="https://metmoon.com/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</title>
    <link href="https://metmoon.com/2018/08/02/composer-mirrors/"/>
    <id>https://metmoon.com/2018/08/02/composer-mirrors/</id>
    <published>2018-08-02T04:11:06.000Z</published>
    <updated>2019-04-09T04:18:40.294Z</updated>
    
    <content type="html"><![CDATA[<p>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</p><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><p>被墙使用国外代理上网，总是一种行之有效的方法。加入你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置两个环境变量<code>http_proxy</code>和<code>https_proxy</code>就可以使用了。</p><p>Mac OS / Linux 终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:1080</span><br><span class="line"><span class="built_in">export</span> https_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure></p><p>windows cmd命令行<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br><span class="line"><span class="built_in">set</span> https_proxy=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure></p><p>这样就可以了，愉快的下载各种包吧~</p><h3 id="使用国内镜像地址"><a href="#使用国内镜像地址" class="headerlink" title="使用国内镜像地址"></a>使用国内镜像地址</h3><blockquote><ul><li>cnpkg提供的镜像地址： <a href="https://php.cnpkg.org" target="_blank" rel="noopener">https://php.cnpkg.org</a></li><li>LaravelChina社区提供的镜像地址： <a href="https://packagist.laravel-china.org" target="_blank" rel="noopener">https://packagist.laravel-china.org</a></li><li>Composer中文网提供的镜像地址： <a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a></li></ul></blockquote><p>镜像使用方法:</p><p>全局配置（推荐）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure></p><p>单独项目使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure></p><p>取消镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure></p><p>—- 最后更新时间： 2019-03-18 15:09:53</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Composer官方镜像太慢或者被墙无法使用时的几种解决方案&lt;/p&gt;
&lt;h3 id=&quot;使用代理&quot;&gt;&lt;a href=&quot;#使用代理&quot; class=&quot;headerlink&quot; title=&quot;使用代理&quot;&gt;&lt;/a&gt;使用代理&lt;/h3&gt;&lt;p&gt;被墙使用国外代理上网，总是一种行之有效的方法。加
      
    
    </summary>
    
      <category term="Composer" scheme="https://metmoon.com/categories/Composer/"/>
    
      <category term="PHP" scheme="https://metmoon.com/categories/Composer/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Composer" scheme="https://metmoon.com/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>使用PHP写Git的自动部署webhook脚本</title>
    <link href="https://metmoon.com/2018/05/01/git-webhook/"/>
    <id>https://metmoon.com/2018/05/01/git-webhook/</id>
    <published>2018-05-01T02:16:43.000Z</published>
    <updated>2018-07-18T03:18:33.860Z</updated>
    
    <content type="html"><![CDATA[<p>现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。</p><h3 id="最简单的流程"><a href="#最简单的流程" class="headerlink" title="最简单的流程"></a>最简单的流程</h3><p>比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是<code>git pull origin master</code>。</p><h3 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h3><ul><li>编写<code>webhook.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 在此可以写校验权限密码之类的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$path = dirname(<span class="keyword">__DIR__</span>);</span><br><span class="line">$log_file = $path.<span class="string">'/runtime/logs/webhook-pull-error-output.log'</span>;<span class="comment">//错误日志文件的路径</span></span><br><span class="line"></span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"r"</span>),  <span class="comment">// 标准输入，子进程从此管道中读取数据</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"w"</span>),  <span class="comment">// 标准输出，子进程向此管道中写入数据</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">"file"</span>, $log_file, <span class="string">"a"</span>) <span class="comment">// 标准错误，写入到一个文件</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$cwd = $path;</span><br><span class="line">$env = <span class="keyword">array</span>(<span class="string">'PATH'</span> =&gt; $_SERVER[<span class="string">'PATH'</span>]);</span><br><span class="line"></span><br><span class="line">$process = proc_open(<span class="string">'sudo git pull origin master'</span>, $descriptorspec, $pipes, $cwd, $env);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span> (is_resource($process)) &#123;</span><br><span class="line">    <span class="comment">// $pipes 现在看起来是这样的：</span></span><br><span class="line">    <span class="comment">// 0 =&gt; 可以向子进程标准输入写入的句柄</span></span><br><span class="line">    <span class="comment">// 1 =&gt; 可以从子进程标准输出读取的句柄</span></span><br><span class="line">    <span class="comment">// 错误输出将被追加到文件 /tmp/error-output.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> stream_get_contents($pipes[<span class="number">1</span>]);</span><br><span class="line">    fclose($pipes[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。</span></span><br><span class="line">    $return_value = proc_close($process);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL.<span class="string">"command returned $return_value\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加php脚本的执行用户sudoers中</li></ul><p>比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br><span class="line">--------------------------------</span><br><span class="line">...</span><br><span class="line"><span class="comment">#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的</span></span><br><span class="line">www-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git</span><br></pre></td></tr></table></figure></p><ul><li>push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。&lt;/p&gt;
&lt;h3 id=&quot;最简单的流程&quot;&gt;&lt;a href=&quot;#最简单的流程&quot; cl
      
    
    </summary>
    
      <category term="Git" scheme="https://metmoon.com/categories/Git/"/>
    
      <category term="PHP" scheme="https://metmoon.com/categories/Git/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Git" scheme="https://metmoon.com/tags/Git/"/>
    
      <category term="Webhook" scheme="https://metmoon.com/tags/Webhook/"/>
    
  </entry>
  
  <entry>
    <title>Git的一些基本操作【持续更新】</title>
    <link href="https://metmoon.com/2018/03/31/git/"/>
    <id>https://metmoon.com/2018/03/31/git/</id>
    <published>2018-03-31T13:47:05.000Z</published>
    <updated>2019-04-09T04:18:40.291Z</updated>
    
    <content type="html"><![CDATA[<p>经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li><p>查看分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch  <span class="comment">#只显示本地分支</span></span><br><span class="line">git branch -a <span class="comment">#显示本地分支和远程分支</span></span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch_name</span><br><span class="line"><span class="comment">#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name</span></span><br></pre></td></tr></table></figure></li><li><p>推送远程分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin branch_name</span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d branch_name</span><br><span class="line"><span class="comment"># 删除本地分支后并删除远程分支</span></span><br><span class="line">git push --delete origin branch_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="tag-标签操作"><a href="#tag-标签操作" class="headerlink" title="tag 标签操作"></a>tag 标签操作</h3><ul><li><p>查看tag列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></li><li><p>新增tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag tag_name <span class="comment"># 比如v1.0</span></span><br></pre></td></tr></table></figure></li><li><p>推送本地指定tag到远程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin tag_name</span><br></pre></td></tr></table></figure></li><li><p>推送全部本地tag到远程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure></li><li><p>删除tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -d </span><br><span class="line"><span class="comment"># 删除tag后并删除远程tag</span></span><br><span class="line">git push --delete origin tag_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="github中fork的项目与原作者同步"><a href="#github中fork的项目与原作者同步" class="headerlink" title="github中fork的项目与原作者同步"></a>github中fork的项目与原作者同步</h3><p>假如一个项目<code>Evil-S0ul/write-doc</code>地址: <a href="https://github.com/Evil-S0ul/write-doc" target="_blank" rel="noopener">https://github.com/Evil-S0ul/write-doc</a></p><p>我fork之后的项目是<code>heropoo/write-doc</code>地址: <a href="https://github.com/heropoo/write-doc" target="_blank" rel="noopener">https://github.com/heropoo/write-doc</a></p><p>接下来开始操作：</p><ol><li><p>切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> write-doc</span><br><span class="line">git remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc</span><br></pre></td></tr></table></figure></li><li><p>fetch刚添加的源分支到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch Evil-S0ul</span><br></pre></td></tr></table></figure></li><li><p>合并两个版本的代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge Evil-S0ul/master</span><br></pre></td></tr></table></figure></li><li><p>最后把合并后的代码push到你的Github项目上去就ok啦</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="检出远程的某个分支或者tag"><a href="#检出远程的某个分支或者tag" class="headerlink" title="检出远程的某个分支或者tag"></a>检出远程的某个分支或者tag</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git checkout branch_name</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git checkout tag_name</span><br></pre></td></tr></table></figure><h3 id="同步且merge其他远程分支到当前本地分支"><a href="#同步且merge其他远程分支到当前本地分支" class="headerlink" title="同步且merge其他远程分支到当前本地分支"></a>同步且merge其他远程分支到当前本地分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin other_branch_name</span><br></pre></td></tr></table></figure><h3 id="Git无法pull仓库refusing-to-merge-unrelated-histories"><a href="#Git无法pull仓库refusing-to-merge-unrelated-histories" class="headerlink" title="Git无法pull仓库refusing to merge unrelated histories"></a>Git无法pull仓库refusing to merge unrelated histories</h3><p>有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报<code>refusing to merge unrelated histories</code>的错。解决方法是加一个参数<code>--allow-unrelated-histories</code>。</p><p>假如我们的分支是master<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p><p>最后更新： 2018-11-18 17:59:06</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。&lt;/p&gt;
&lt;h3 id=&quot;分支操作&quot;&gt;&lt;a href=&quot;#分支操作&quot; class=&quot;headerlink&quot; title=&quot;分支操作&quot;&gt;&lt;/a&gt;分支操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看分支&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Git" scheme="https://metmoon.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://metmoon.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Rust更换国内源</title>
    <link href="https://metmoon.com/2018/01/24/change-rust-mirrors/"/>
    <id>https://metmoon.com/2018/01/24/change-rust-mirrors/</id>
    <published>2018-01-24T15:25:36.000Z</published>
    <updated>2018-05-26T02:43:44.215Z</updated>
    
    <content type="html"><![CDATA[<p>今天学cargo这节，<code>cargo build</code>时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大~(￣▽￣)~*)</p><p>教程开始：</p><p>设置两个环境变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure></p><p>或者直接写入<code>~/.bashrc</code></p><p>使用ustcu的源下载安装rust<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh</span><br></pre></td></tr></table></figure></p><p>编辑<code>~/.cargo/config</code>写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[registry]</span><br><span class="line">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line">replace-with = &apos;ustc&apos;</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure></p><p>现在cargo安装外部依赖是不是贼溜~😉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天学cargo这节，&lt;code&gt;cargo build&lt;/code&gt;时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大~(￣▽￣)~*)&lt;/p&gt;
&lt;p&gt;教程开始：&lt;/p&gt;
&lt;p&gt;设置两个环境变量&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="Rust" scheme="https://metmoon.com/categories/Rust/"/>
    
    
      <category term="Rust" scheme="https://metmoon.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>如果编程语言是一种武器(转自互联网)</title>
    <link href="https://metmoon.com/2018/01/23/If-the-programming-language-is-a-weapon/"/>
    <id>https://metmoon.com/2018/01/23/If-the-programming-language-is-a-weapon/</id>
    <published>2018-01-23T06:58:10.000Z</published>
    <updated>2018-01-23T08:16:36.447Z</updated>
    
    <content type="html"><![CDATA[<p>对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己</p><p><img src="/assets/images/uuaMZv.png" alt="pic"></p><p>C语言是M1式加兰德步枪，很老但可靠。</p><p><img src="/assets/images/mE3eaiv.png" alt="pic"></p><p>C++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。</p><p><img src="/assets/images/yuMVfu.png" alt="pic"></p><p>Perl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。</p><p><img src="/assets/images/UvUNJz.png" alt="pic"></p><p>Java是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。</p><p><img src="/assets/images/veQb227.png" alt="pic"></p><p>Scala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。</p><p><img src="/assets/images/3yYZVj2.png" alt="pic"></p><p>JavaScript是一把宝剑，但没有剑柄。</p><p><img src="/assets/images/3qIb6rU.png" alt="pic"></p><p>Go语言是一种自制的”if err != nil”发令枪，每一次发射后，你都必须要检查它是否真的发射了。</p><p><img src="/assets/images/AFZBvy2.png" alt="pic"></p><p>Rust语言是一种3D打印出的枪。将来也许真的能派上用场。</p><p><img src="/assets/images/2URZfy.png" alt="pic"></p><p>bash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。</p><p><img src="/assets/images/v2U3qef.png" alt="pic"></p><p>Python是一种”v2/v3”双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。</p><p><img src="/assets/images/7VZvMn.png" alt="pic"></p><p>Ruby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。</p><p><img src="/assets/images/iUFzqi.png" alt="pic"></p><p>PHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。</p><p><img src="/assets/images/eAj6Nra.png" alt="pic"></p><p>Mathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。</p><p><img src="/assets/images/7v6jei.png" alt="pic"></p><p>C#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。</p><p><img src="/assets/images/jUR7be.png" alt="pic"></p><p>Prolog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。</p><p><img src="/assets/images/bM3aaab.png" alt="pic"></p><p>Lisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/uuaMZv.png&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;C语言是M1式加兰德步枪，很老但可靠。&lt;/p&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
      <category term="互联网" scheme="https://metmoon.com/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="互联网" scheme="https://metmoon.com/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>整理几个常用的国内源</title>
    <link href="https://metmoon.com/2018/01/20/cn-mirrors/"/>
    <id>https://metmoon.com/2018/01/20/cn-mirrors/</id>
    <published>2018-01-20T14:20:41.000Z</published>
    <updated>2018-09-16T14:59:55.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux以及一些开源软件"><a href="#Linux以及一些开源软件" class="headerlink" title="Linux以及一些开源软件"></a>Linux以及一些开源软件</h3><p>一些企业的：</p><ul><li>网易开源镜像站 <a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></li><li>搜狐开源镜像站 <a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></li><li>阿里云源镜像站 <a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></li><li>首都在线 <a href="http://mirrors.yun-idc.com/" target="_blank" rel="noopener">http://mirrors.yun-idc.com/</a></li></ul><p>各大高校的：</p><ul><li>中科大开源镜像站 <a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a></li><li>清华大学开源软件镜像站 <a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></li><li>华中科技大学开源镜像站 <a href="http://mirror.hust.edu.cn/" target="_blank" rel="noopener">http://mirror.hust.edu.cn/</a></li><li>浙江大学开源镜像站 <a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/</a></li><li>东软信息学院开源镜像站 <a href="http://mirrors.neusoft.edu.cn/" target="_blank" rel="noopener">http://mirrors.neusoft.edu.cn/</a></li><li>北京理工大学开源软件镜像 <a href="http://mirror.bit.edu.cn/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/</a></li><li>北京交通大学自由与开源软件镜像站 <a href="https://mirror.bjtu.edu.cn/" target="_blank" rel="noopener">https://mirror.bjtu.edu.cn/</a></li><li>兰州大学开源社区镜像站 <a href="http://mirror.lzu.edu.cn/" target="_blank" rel="noopener">http://mirror.lzu.edu.cn/</a></li><li>上海交通大学 <a href="http://ftp.sjtu.edu.cn/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/</a></li><li>东北大学 <a href="http://mirror.neu.edu.cn/" target="_blank" rel="noopener">http://mirror.neu.edu.cn/</a></li></ul><h3 id="js-npm"><a href="#js-npm" class="headerlink" title="js npm"></a>js npm</h3><ul><li>淘宝NPM镜像 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li></ul><h3 id="php-composer"><a href="#php-composer" class="headerlink" title="php composer"></a>php composer</h3><ul><li>Composer中文网 <a href="http://www.phpcomposer.com/" target="_blank" rel="noopener">http://www.phpcomposer.com/</a></li><li>LaravelChina社区提供的镜像地址： <a href="https://packagist.laravel-china.org" target="_blank" rel="noopener">https://packagist.laravel-china.org</a></li></ul><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li>DaoCloud <a href="http://a42abd64.m.daocloud.io" target="_blank" rel="noopener">http://a42abd64.m.daocloud.io</a></li><li>阿里云 要注册独立分配 <a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="noopener">传送门</a></li></ul><p>大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux以及一些开源软件&quot;&gt;&lt;a href=&quot;#Linux以及一些开源软件&quot; class=&quot;headerlink&quot; title=&quot;Linux以及一些开源软件&quot;&gt;&lt;/a&gt;Linux以及一些开源软件&lt;/h3&gt;&lt;p&gt;一些企业的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网易开源镜像
      
    
    </summary>
    
      <category term="资源" scheme="https://metmoon.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="JavaScript" scheme="https://metmoon.com/tags/JavaScript/"/>
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Linux" scheme="https://metmoon.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>2018,新年快乐！</title>
    <link href="https://metmoon.com/2018/01/01/2018-happy-new-year/"/>
    <id>https://metmoon.com/2018/01/01/2018-happy-new-year/</id>
    <published>2017-12-31T16:17:50.000Z</published>
    <updated>2018-01-18T05:18:40.758Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/20180101000832.png" alt="example-pic"></p><p>2018年了，新年快乐！</p><p>加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/assets/images/20180101000832.png&quot; alt=&quot;example-pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;2018年了，新年快乐！&lt;/p&gt;
&lt;p&gt;加油！&lt;/p&gt;

      
    
    </summary>
    
      <category term="岁月静好" scheme="https://metmoon.com/categories/%E5%B2%81%E6%9C%88%E9%9D%99%E5%A5%BD/"/>
    
    
      <category term="岁月静好" scheme="https://metmoon.com/tags/%E5%B2%81%E6%9C%88%E9%9D%99%E5%A5%BD/"/>
    
  </entry>
  
</feed>
