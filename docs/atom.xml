<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>满江风雪</title>
  
  <subtitle>时光漫漫，何妨扬眉淡笑，心境从容？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://metmoon.com/"/>
  <updated>2018-11-18T14:02:31.476Z</updated>
  <id>https://metmoon.com/</id>
  
  <author>
    <name>Heropoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL5.7的JSON基本操作</title>
    <link href="https://metmoon.com/2018/11/18/mysql-json/"/>
    <id>https://metmoon.com/2018/11/18/mysql-json/</id>
    <published>2018-11-18T10:11:06.000Z</published>
    <updated>2018-11-18T14:02:31.476Z</updated>
    
    <content type="html"><![CDATA[<p>MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。</p><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><p>在新建表时字段类型可以直接设置为json类型，比如我们创建一张表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE `test_user`(`id` INT PRIMARY KEY AUTO_INCREMENT, `name` VARCHAR(50) NOT NULL, `info` JSON);</span><br></pre></td></tr></table></figure></p><p>json类型字段可以为NULL</p><h3 id="插入数据："><a href="#插入数据：" class="headerlink" title="插入数据："></a>插入数据：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaoming&apos;,&apos;&#123;&quot;sex&quot;: 1, &quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125;&apos;);</span><br></pre></td></tr></table></figure><p>json类型的字段必须时一个有效的json字符串</p><p>可以使用JSON_OBJECT()函数构造json对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaohua&apos;, JSON_OBJECT(&quot;sex&quot;, 0, &quot;age&quot;, 17));</span><br></pre></td></tr></table></figure></p><p>使用JSON_ARRAY()函数构造json数组：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO test_user(`name`, `info`) VALUES(&apos;xiaozhang&apos;, JSON_OBJECT(&quot;sex&quot;, 1, &quot;age&quot;, 19, &quot;tag&quot;, JSON_ARRAY(3,5,90)));</span><br></pre></td></tr></table></figure></p><p>现在查看<code>test_user</code>表中的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user;</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">| id | name      | info                                       |</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">|  1 | xiaoming  | &#123;&quot;age&quot;: 18, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小萌&quot;&#125; |</span><br><span class="line">|  2 | xiaohua   | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0&#125;                      |</span><br><span class="line">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90]&#125;   |</span><br><span class="line">+----+-----------+--------------------------------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>表达式： 对象为<code>json列-&gt;&#39;$.键&#39;</code>, 数组为<code>json列-&gt;&#39;$.键[index]&#39;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&apos;$.nick_name&apos;, info-&gt;&apos;$.sex&apos;, info-&gt;&apos;$.tag[0]&apos; from test_user;</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">| name      | info-&gt;&apos;$.nick_name&apos; | info-&gt;&apos;$.sex&apos; | info-&gt;&apos;$.tag[0]&apos; |</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">| xiaoming  | &quot;小萌&quot;              | 1             | NULL             |</span><br><span class="line">| xiaohua   | NULL                | 0             | NULL             |</span><br><span class="line">| xiaozhang | NULL                | 1             | 3                |</span><br><span class="line">+-----------+---------------------+---------------+------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><p>等价于：对象为<code>JSON_EXTRACT(json列 , &#39;$.键&#39;)</code>，数组为<code>JSON_EXTRACT(json列 , &#39;$.键[index]&#39;)</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, JSON_EXTRACT(info, &apos;$.nick_name&apos;), JSON_EXTRACT(info, &apos;$.sex&apos;), JSON_EXTRACT(info, &apos;$.tag[0]&apos;)  from test_user;</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">| name      | JSON_EXTRACT(info, &apos;$.nick_name&apos;) | JSON_EXTRACT(info, &apos;$.sex&apos;) | JSON_EXTRACT(info, &apos;$.tag[0]&apos;) |</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">| xiaoming  | &quot;小萌&quot;                            | 1                           | NULL                           |</span><br><span class="line">| xiaohua   | NULL                              | 0                           | NULL                           |</span><br><span class="line">| xiaozhang | NULL                              | 1                           | 3                              |</span><br><span class="line">+-----------+-----------------------------------+-----------------------------+--------------------------------+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure></p><p>不过看到上面<code>&quot;小萌&quot;</code>是带双引号的，这不是我们想要的，可以用<code>JSON_UNQUOTE</code>函数将双引号去掉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) from test_user where name=&apos;xiaoming&apos;;</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">| name     | JSON_UNQUOTE(info-&gt;&apos;$.nick_name&apos;) |</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">| xiaoming | 小萌                              |</span><br><span class="line">+----------+-----------------------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><p>也可以直接使用操作符<code>-&gt;&gt;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where name=&apos;xiaoming&apos;;</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| xiaoming | 小萌                 |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>当然属性也可以作为查询条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name, info-&gt;&gt;&apos;$.nick_name&apos; from test_user where info-&gt;&apos;$.nick_name&apos;=&apos;小萌&apos;;</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| name     | info-&gt;&gt;&apos;$.nick_name&apos; |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">| xiaoming | 小萌                 |</span><br><span class="line">+----------+----------------------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><p>值得一提的是，可以通过虚拟列对JSON类型的指定属性进行快速查询。</p><p>创建虚拟列:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER TABLE `test_user` ADD `nick_name` VARCHAR(50) GENERATED ALWAYS AS (info-&gt;&gt;&apos;$.nick_name&apos;) VIRTUAL;</span><br></pre></td></tr></table></figure></p><p>注意用操作符<code>-&gt;&gt;</code></p><p>使用时和普通类型的列查询是一样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select name,nick_name from test_user where nick_name=&apos;小萌&apos;;</span><br><span class="line">+----------+-----------+</span><br><span class="line">| name     | nick_name |</span><br><span class="line">+----------+-----------+</span><br><span class="line">| xiaoming | 小萌      |</span><br><span class="line">+----------+-----------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>使用<code>JSON_INSERT()</code>插入新值，但不会覆盖已经存在的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_INSERT(info, &apos;$.sex&apos;, 1, &apos;$.nick_name&apos;, &apos;小花&apos;) where id=2;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=2;</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">| id | name    | info                                       | nick_name |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 0, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>使用<code>JSON_SET()</code>插入新值，并覆盖已经存在的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_INSERT(info, &apos;$.sex&apos;, 0, &apos;$.nick_name&apos;, &apos;小张&apos;) where id=3;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=3;</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">| id | name      | info                                                          | nick_name |</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">|  3 | xiaozhang | &#123;&quot;age&quot;: 19, &quot;sex&quot;: 1, &quot;tag&quot;: [3, 5, 90], &quot;nick_name&quot;: &quot;小张&quot;&#125; | 小张      |</span><br><span class="line">+----+-----------+---------------------------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>使用<code>JSON_REPLACE()</code>只替换存在的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_REPLACE(info, &apos;$.sex&apos;, 1, &apos;$.tag&apos;, &apos;[1,2,3]&apos;) where id=2;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=2;</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">| id | name    | info                                       | nick_name |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">|  2 | xiaohua | &#123;&quot;age&quot;: 17, &quot;sex&quot;: 1, &quot;nick_name&quot;: &quot;小花&quot;&#125; | 小花      |</span><br><span class="line">+----+---------+--------------------------------------------+-----------+</span><br><span class="line">1 row in set (0.06 sec)</span><br></pre></td></tr></table></figure></p><p>可以看到tag没有更新进去</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>使用<code>JSON_REMOVE()</code>删除JSON元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE test_user SET info = JSON_REMOVE(info, &apos;$.sex&apos;, &apos;$.tag&apos;) where id=1;</span><br></pre></td></tr></table></figure></p><p>看下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from test_user where id=1;</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">| id | name     | info                             | nick_name |</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">|  1 | xiaoming | &#123;&quot;age&quot;: 18, &quot;nick_name&quot;: &quot;小萌&quot;&#125; | 小萌      |</span><br><span class="line">+----+----------+----------------------------------+-----------+</span><br><span class="line">1 row in set (0.05 sec)</span><br></pre></td></tr></table></figure></p><p>最后从MySQL的官方网站查看帮助文档：<a href="http://dev.mysql.com/doc/refman/5.7/en/json.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.7/en/json.html</a></p><p>😎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MySQL从5.7版本开始就支持JSON格式的数据，操作用起来挺方便的。&lt;/p&gt;
&lt;h3 id=&quot;建表&quot;&gt;&lt;a href=&quot;#建表&quot; class=&quot;headerlink&quot; title=&quot;建表&quot;&gt;&lt;/a&gt;建表&lt;/h3&gt;&lt;p&gt;在新建表时字段类型可以直接设置为json类型，比如我
      
    
    </summary>
    
      <category term="MySQL" scheme="https://metmoon.com/categories/MySQL/"/>
    
    
      <category term="MySQL" scheme="https://metmoon.com/tags/MySQL/"/>
    
      <category term="JSON" scheme="https://metmoon.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>安装Jupyter笔记本</title>
    <link href="https://metmoon.com/2018/11/02/jupyter/"/>
    <id>https://metmoon.com/2018/11/02/jupyter/</id>
    <published>2018-11-02T11:07:09.000Z</published>
    <updated>2018-11-18T09:41:26.924Z</updated>
    
    <content type="html"><![CDATA[<p>安装Jupyter笔记本，做个笔记</p><p>通过pip安装<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip3 install jupyter</span><br></pre></td></tr></table></figure></p><p>创建Jupyter默认配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --generate-config</span><br></pre></td></tr></table></figure></p><p>生成SHA1加密的密钥，如’sha1:XXXXXX’<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ipython</span><br><span class="line">--------------------------------------</span><br><span class="line">from notebook.auth import passwd</span><br><span class="line">passwd()</span><br></pre></td></tr></table></figure></p><p>修改配置文件<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim .jupyter/jupyter_notebook_config.py</span><br><span class="line">--------------------------------------</span><br><span class="line">c.NotebookApp.password = u<span class="string">'sha1:XXXXXX'</span></span><br></pre></td></tr></table></figure></p><p>运行jupyter<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook</span><br></pre></td></tr></table></figure></p><p>可选的运行参数<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter notebook --ip=0.0.0.0 --no-browser --allow-root</span><br></pre></td></tr></table></figure></p><p>打开浏览器输入 <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装Jupyter笔记本，做个笔记&lt;/p&gt;
&lt;p&gt;通过pip安装&lt;br&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;
      
    
    </summary>
    
      <category term="python" scheme="https://metmoon.com/categories/python/"/>
    
    
      <category term="jupyter" scheme="https://metmoon.com/tags/jupyter/"/>
    
      <category term="python" scheme="https://metmoon.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>修复gitment评论</title>
    <link href="https://metmoon.com/2018/10/27/fix-gitment/"/>
    <id>https://metmoon.com/2018/10/27/fix-gitment/</id>
    <published>2018-10-27T08:17:34.000Z</published>
    <updated>2018-10-27T08:41:36.436Z</updated>
    
    <content type="html"><![CDATA[<p>最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。</p><p>从我开始用gitment的评论系统，总共出现过两次问题：</p><h2 id="1-github-issue-label的字符长度限制"><a href="#1-github-issue-label的字符长度限制" class="headerlink" title="1. github-issue label的字符长度限制"></a>1. github-issue label的字符长度限制</h2><p>这次导致原本默认使用网页url地址做label初始化评论的方式无法使用，url太长了超过了50个字符。而之前已经初始化好的评论（issue）不收影响。所以后来我想了个办法来改，就是用时间来初始化，并且对于为了兼容之前的评论，加了时间判断：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page_date = <span class="string">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="keyword">if</span>(page_date &gt; <span class="string">'2018-04-31 00:00:00 +0000'</span>)&#123;</span><br><span class="line">    id = page_date;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    id: id, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">    owner: <span class="string">'heropoo'</span>,</span><br><span class="line">    repo: <span class="string">'heropoo.github.io'</span>,</span><br><span class="line">    oauth: &#123;</span><br><span class="line">        client_id: <span class="string">'cccc'</span>,</span><br><span class="line">        client_secret: <span class="string">'xxxx'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">gitment.render(<span class="string">'container'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="2-gitment-作者提供的oauth授权服务不可用"><a href="#2-gitment-作者提供的oauth授权服务不可用" class="headerlink" title="2. gitment 作者提供的oauth授权服务不可用"></a>2. gitment 作者提供的oauth授权服务不可用</h2><p>这次好像挂了使用作者提供的js的博客全挂了😂。 解决办法就是自己搭建或者使用别人搭建的oauth授权服务了。 好吧，换个授权服务总算好了。</p><h2 id="3-升级https"><a href="#3-升级https" class="headerlink" title="3. 升级https"></a>3. 升级https</h2><p>现在github-page提供强制https。升级之后发现之前兼容的使用页面url初始化的评论又不能用了。 ㄟ( ▔, ▔ )ㄏ<br>但是还得修嘛。后来仔细观察了下，原来作者是使用<code>gitment</code>和页面js中获取的id来匹配出一个issue的。所以只要去github修改issue label就可以了。把原来很长的url label改成现在的短的，比如像我一样用时间。然后页面上的兼容的js也去掉就搞定了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> page_date = <span class="string">'&#123;&#123; page.date &#125;&#125;'</span>;</span><br><span class="line"><span class="comment">//var id = window.location.href;</span></span><br><span class="line"><span class="comment">//if(page_date &gt; '2018-04-31 00:00:00 +0000')&#123;</span></span><br><span class="line"><span class="keyword">var</span> id = page_date;</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">var</span> gitment = <span class="keyword">new</span> Gitment(&#123;</span><br><span class="line">    id: id, <span class="comment">// 可选。默认为 location.href</span></span><br><span class="line">    owner: <span class="string">'heropoo'</span>,</span><br><span class="line">    repo: <span class="string">'heropoo.github.io'</span>,</span><br><span class="line">    oauth: &#123;</span><br><span class="line">        client_id: <span class="string">'cccc'</span>,</span><br><span class="line">        client_secret: <span class="string">'xxxx'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">gitment.render(<span class="string">'container'</span>);</span><br></pre></td></tr></table></figure></p><p>好了，搞完收工。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近几个月博客外挂的gitment评论老是挂，也一直没时间修复。这几天想办法修好了。就说说修复的过程吧。&lt;/p&gt;
&lt;p&gt;从我开始用gitment的评论系统，总共出现过两次问题：&lt;/p&gt;
&lt;h2 id=&quot;1-github-issue-label的字符长度限制&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="github-issue" scheme="https://metmoon.com/categories/github-issue/"/>
    
    
      <category term="github-issue" scheme="https://metmoon.com/tags/github-issue/"/>
    
      <category term="gitment" scheme="https://metmoon.com/tags/gitment/"/>
    
  </entry>
  
  <entry>
    <title>关于Yii2查询数据对象ActiveRecord的json序列化问题</title>
    <link href="https://metmoon.com/2018/10/16/yii2-activerecord-to-json/"/>
    <id>https://metmoon.com/2018/10/16/yii2-activerecord-to-json/</id>
    <published>2018-10-16T09:53:45.000Z</published>
    <updated>2018-10-16T14:38:06.480Z</updated>
    
    <content type="html"><![CDATA[<p>今天在使用<code>json_encode</code>函数序列化Yii2查询得到的数据模型对象（通常继承<code>ActiveRecord</code>类）时，发现返回结果是<code>{}</code>,而不是预期的数据库字段键值对这种形式：<code>{&quot;name&quot;： &quot;xxx&quot;, &quot;sex&quot;: 1}</code></p><p>后来赶时间就直接在手动处理了下，改动了下模型对象让它接入<code>JsonSerializable</code>接口，并实现其接口方法，类似这样；<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">ActiveRecord</span> <span class="keyword">implements</span> \<span class="title">JsonSerializable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//... 其他代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">jsonSerialize</span> <span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;toArray();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后完美的解决了。 </p><p>但是后来代码写完了，觉得这个框架应该提供了这个问题的解决方法了吧。然后找了找，果然有的： <code>\yii\helpers\BaseJson::encode($user)</code>。然后翻了翻源代码，部分代码是这样的：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from \yii\helpers\BaseJson::processData</span></span><br><span class="line"><span class="keyword">if</span> (is_object($data)) &#123;</span><br><span class="line">    <span class="keyword">if</span> ($data <span class="keyword">instanceof</span> JsExpression) &#123;</span><br><span class="line">        $token = <span class="string">"!&#123;[$expPrefix="</span> . count($expressions) . <span class="string">']&#125;!'</span>;</span><br><span class="line">        $expressions[<span class="string">'"'</span> . $token . <span class="string">'"'</span>] = $data-&gt;expression;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $token;</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($data <span class="keyword">instanceof</span> \JsonSerializable) &#123;</span><br><span class="line">        $data = $data-&gt;jsonSerialize();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($data <span class="keyword">instanceof</span> Arrayable) &#123; <span class="comment">// &lt;---here</span></span><br><span class="line">        $data = $data-&gt;toArray();</span><br><span class="line">    &#125; <span class="keyword">elseif</span> ($data <span class="keyword">instanceof</span> \SimpleXMLElement) &#123;</span><br><span class="line">        $data = (<span class="keyword">array</span>) $data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $result = [];</span><br><span class="line">        <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $name =&gt; $value) &#123;</span><br><span class="line">            $result[$name] = $value;</span><br><span class="line">        &#125;</span><br><span class="line">        $data = $result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ($data === []) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> \stdClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作者在处理数据的时候做了判断，<code>ActiveRecord</code>类接了<code>Arrayable</code>接口，然后作者也是使用<code>toArray()</code>方法。然后我觉得放心了。我的改造也没有错。当然了使用框架提供的方法更简单点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在使用&lt;code&gt;json_encode&lt;/code&gt;函数序列化Yii2查询得到的数据模型对象（通常继承&lt;code&gt;ActiveRecord&lt;/code&gt;类）时，发现返回结果是&lt;code&gt;{}&lt;/code&gt;,而不是预期的数据库字段键值对这种形式：&lt;code&gt;{&amp;quot
      
    
    </summary>
    
      <category term="PHP" scheme="https://metmoon.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Yii2" scheme="https://metmoon.com/tags/Yii2/"/>
    
  </entry>
  
  <entry>
    <title>盗将行(转)</title>
    <link href="https://metmoon.com/2018/09/18/%E7%9B%97%E5%B0%86%E8%A1%8C/"/>
    <id>https://metmoon.com/2018/09/18/盗将行/</id>
    <published>2018-09-18T10:10:52.000Z</published>
    <updated>2018-09-18T10:16:06.304Z</updated>
    
    <content type="html"><![CDATA[<p>野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……</p><p>野史记载:宋钦宗元年（1126年），金军将领完颜克图率军攻陷宋都汴梁，钦宗被俘，民不聊生。1127年，宋高宗赵构建立南宋政权，时宋军与金军交战，一小卒一箭射杀完颜克图，而后屡立战功，官至护国将军，班师回朝后，宋主欲对其大行封赏，然其自辞官职，自此匿迹……</p><p>公元1137年，一笑轩内，座无虚席，席前坐一中年男子，相貌非凡，文墨中颇有武将风采，有听者席下暗叹:此等人间琢玉郎，天应乞与点酥娘，奈何天公不作美啊……，只见男子手执醒木一敲，“今日我给诸位讲讲那位消失大盗的故事。诸位都知道这大盗在十多年前劫富济贫，百姓视之为神明，诸位可知为何这大盗消失几年后，又于南京王府盗取一支玉簪此后便再无消息……”</p><p>“没错，我就是说书人，也是大盗，亦是护国将军，二十岁之前，我从师傅那里习得武艺，学成后因喜自在生活，却看不惯贪官污吏，由此开始了劫贪济贫的生活，本以为自己一生都会这样一个人渡过，清风明月、落日余霞，却不曾想她走进了我的生活，那日，在盗取康王府珍宝夜明珠后，为躲避追捕，我纵马逃出城外，却因勒马不及，无意中轻微带起路边一女子的裙边，看官兵并未追来，我下马向女子道歉，却不想只此一眼，便是一生，自认这世间没有盗不到的东西的我，却开始担心盗不到她的心，然而自己的心却已被她带走，因为这一眼，我忽然想不再为盗，娶其为妻。老天待我不薄，我盗得了她的心，然后我渡过了此生最快乐的三年，我陪她吃巷子里的那家汤面、谈笑中窗外白雪纷飞，不惜用夜明珠做弹珠弹山雀……公元1126年，我决定娶她，听闻南京王府中有一玉簪，得之赠予心爱之人，可与其生生世世永不分离，我决定将它偷来送给她，和她说好过些日子我就会回来迎娶她，之后就踏上了去南京的路，在我盗得玉簪返途中，听闻金军攻陷汴梁，一路烧杀抢掠，民不聊生，我慌张的回到汴梁，路上不停的安慰自己她一定没事，却不得不接受她已过世的现实，可能贼就是贼吧，不论我是否劫富济贫，报应终究还是来了，我失去了最心爱的人，自此我弃盗从军，带着对她的留恋，将一腔恨意全部放在了金军身上，将士们都说我在战场勇猛异常，却不知我心中满是为她报仇的怒意与没有留在她身边的悔意。最终金军败退，我射杀了完颜克图，也因此被封为护国大将军，朝堂之上，我推却了赏赐，辞掉了官职，来到了那个有着她爱吃的汤面的巷子，开了这一笑轩，成为了一个讲尽故事，却走不出自己故事的说书人。”</p><p>“……在大将军辞官之后，便无人知晓其去处，徒留这么一个故事，我偶然闻得，讲与诸位听。今日就讲到这里，多谢诸位捧场。”一声醒木，众人还未从大盗的故事中回过神来，却发现说书人已然转进后堂，众人起身四散，说书人转进后堂已是泪流满面，看着后堂院中的枇杷树，树上挂着那只未送出的玉簪……</p><p>作者：一个人的兵荒馬乱<br>链接：<a href="https://www.jianshu.com/p/7aa6bfbb0df1" target="_blank" rel="noopener">https://www.jianshu.com/p/7aa6bfbb0df1</a><br>來源：简书</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;野史记载:宋徽宗二十年（1120年），朝野动荡，边疆不稳。时有盗者，取官济民，凡京中贪官，无一幸免，民咸敬之，却无人知其真面目。然自徽宗二十三年，此盗未曾出现，至徽宗二十六年，此盗入南京王府，未取它物，仅盗走一玉簪，自此匿迹……&lt;/p&gt;
&lt;p&gt;野史记载:宋钦宗元年（1126
      
    
    </summary>
    
      <category term="听风雨" scheme="https://metmoon.com/categories/%E5%90%AC%E9%A3%8E%E9%9B%A8/"/>
    
    
      <category term="听风雨" scheme="https://metmoon.com/tags/%E5%90%AC%E9%A3%8E%E9%9B%A8/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器动态添加端口</title>
    <link href="https://metmoon.com/2018/09/16/docker-container-port/"/>
    <id>https://metmoon.com/2018/09/16/docker-container-port/</id>
    <published>2018-09-16T15:40:33.000Z</published>
    <updated>2018-10-27T06:42:56.884Z</updated>
    
    <content type="html"><![CDATA[<p>突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。</p><p>参考：</p><ul><li><a href="https://blog.csdn.net/zuoshenglo/article/details/78402772" target="_blank" rel="noopener">怎么给运行中的docker容器添加新的端口</a></li><li><a href="https://blog.csdn.net/wesleyflagon/article/details/78961990" target="_blank" rel="noopener">修改docker容器端口映射的方法</a></li><li><a href="https://blog.csdn.net/xfks55/article/details/50148389" target="_blank" rel="noopener">iptable规则查看，添加，删除和修改</a></li></ul><h2 id="方法1-修改iptables端口映射"><a href="#方法1-修改iptables端口映射" class="headerlink" title="方法1 修改iptables端口映射"></a>方法1 修改iptables端口映射</h2><blockquote><p>docker的端口映射并不是在docker技术中实现的，而是通过宿主机的iptables来实现。通过控制网桥来做端口映射，类似路由器中设置路由端口映射。</p></blockquote><p>比如我们有一个容器的80端口映射到主机的8080端口，先查看iptables到底设置了什么规则：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -vnL</span><br></pre></td></tr></table></figure></p><p>在结果中有一条：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain DOCKER</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">RETURN     all  --  0.0.0.0/0            0.0.0.0/0</span><br><span class="line">DNAT       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:8080 to:172.17.0.3:80</span><br></pre></td></tr></table></figure></p><p>我们可以看到docker创建了一个名为DOKCER的自定义的链条Chain。而我开放80端口的容器的ip是172.17.0.3</p><p>也可以通过inspect命令查看容器ip<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect containerId |grep IPAddress</span><br></pre></td></tr></table></figure></p><p>我们想再增加一个端口映射，比如<code>8081-&gt;81</code>，就在这个链条是再加一条规则：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -A  DOCKER -p tcp --dport 8081 -j DNAT --to-destination 172.17.0.3:81</span><br></pre></td></tr></table></figure></p><p>如果加错了或者想修改：</p><p>先显示行号查看<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -vnL DOCKER</span><br></pre></td></tr></table></figure></p><p>删除规则3<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -t nat -D DOCKER 3</span><br></pre></td></tr></table></figure></p><h2 id="方法2-修改容器配置文件"><a href="#方法2-修改容器配置文件" class="headerlink" title="方法2 修改容器配置文件"></a>方法2 修改容器配置文件</h2><p>容器的配置文件<code>/var/lib/docker/containers/[containerId]</code>目录下，<code>hostconfig.json</code>和<code>config.v2.json</code><br>修改好之后，重启容器服务。</p><h2 id="方法3-把运行中的容器生成新的镜像，然后运行新的镜像"><a href="#方法3-把运行中的容器生成新的镜像，然后运行新的镜像" class="headerlink" title="方法3 把运行中的容器生成新的镜像，然后运行新的镜像"></a>方法3 把运行中的容器生成新的镜像，然后运行新的镜像</h2><ol><li><p>提交一个运行中的容器为镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit containerid heropoo/example</span><br></pre></td></tr></table></figure></li><li><p>运行<code>heropoo/example</code>镜像并添加8080映射容器80端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:80  heropoo/example /bin/sh</span><br></pre></td></tr></table></figure></li></ol><p>试试吧~😎</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然遇到一个问题怎么给一个已经在运行的docker容器添加端口，找了找资料，记个笔记。&lt;/p&gt;
&lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/zuoshenglo/article/details/78402772&quot; t
      
    
    </summary>
    
      <category term="Docker" scheme="https://metmoon.com/categories/Docker/"/>
    
    
      <category term="虚拟化" scheme="https://metmoon.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="容器" scheme="https://metmoon.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>使用Bing搜索引擎做站内搜索</title>
    <link href="https://metmoon.com/2018/09/15/bing-site-search/"/>
    <id>https://metmoon.com/2018/09/15/bing-site-search/</id>
    <published>2018-09-15T12:14:05.000Z</published>
    <updated>2018-09-16T12:31:06.153Z</updated>
    
    <content type="html"><![CDATA[<p>因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。</p><p>大概是这样的效果<br><img src="/assets/images/20180916201818.png" alt="example-pic"></p><p>观察了下，Bing指定站点搜索很简单，比如搜索框输入关键字<code>git site:www.ioio.pw</code>提交之后的url是<code>https://bing.com/search?q=git+site%3Awww.ioio.pw</code></p><p>所以开始写个简单的form表单就好了，代码如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>bing search<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bing Search<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://bing.com/search"</span> <span class="attr">id</span>=<span class="string">"searchForm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"q"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"site"</span> <span class="attr">value</span>=<span class="string">"www.ioio.pw"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> searchForm = <span class="built_in">document</span>.getElementById(<span class="string">'searchForm'</span>);</span></span><br><span class="line"><span class="javascript">searchForm.onsubmit = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url = <span class="keyword">this</span>.action;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> q = <span class="keyword">this</span>.children[<span class="string">'q'</span>].value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> site = <span class="keyword">this</span>.children[<span class="string">'site'</span>].value;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url = url + <span class="string">'?q='</span>+q+<span class="string">' site:'</span>+ site;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.open(url);</span></span><br><span class="line"><span class="javascript"><span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>好了，搞定~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为自己的博客百度未收录╮(╯-╰)╭，本来之前用的谷歌，但是谷歌毕竟翻墙才能用。决定还是换微软的Bing搜索引擎来做站内搜索吧。&lt;/p&gt;
&lt;p&gt;大概是这样的效果&lt;br&gt;&lt;img src=&quot;/assets/images/20180916201818.png&quot; alt=&quot;ex
      
    
    </summary>
    
      <category term="搜索引擎" scheme="https://metmoon.com/categories/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="搜索引擎" scheme="https://metmoon.com/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
    
      <category term="站内搜索" scheme="https://metmoon.com/tags/%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</title>
    <link href="https://metmoon.com/2018/08/02/composer-mirrors/"/>
    <id>https://metmoon.com/2018/08/02/composer-mirrors/</id>
    <published>2018-08-02T04:11:06.000Z</published>
    <updated>2018-10-16T10:55:36.117Z</updated>
    
    <content type="html"><![CDATA[<p>Composer官方镜像太慢或者被墙无法使用时的几种解决方案</p><h3 id="使用代理"><a href="#使用代理" class="headerlink" title="使用代理"></a>使用代理</h3><p>被墙使用国外代理上网，总是一种行之有效的方法。加入你使用shadowsocks代理，开启之后默认的本地端口是1080。只要设置一个环境变量<code>http_proxy</code>就可以使用了。</p><p>Mac OS / Linux 终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=127.0.0.1:1080</span><br></pre></td></tr></table></figure></p><p>windows cmd命令行<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> http_proxy=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure></p><p>这样就可以了，愉快的下载各种包吧~</p><h3 id="使用国内镜像地址"><a href="#使用国内镜像地址" class="headerlink" title="使用国内镜像地址"></a>使用国内镜像地址</h3><blockquote><ul><li>cnpkg提供的镜像地址： <a href="https://php.cnpkg.org" target="_blank" rel="noopener">https://php.cnpkg.org</a></li><li>LaravelChina社区提供的镜像地址： <a href="https://packagist.laravel-china.org" target="_blank" rel="noopener">https://packagist.laravel-china.org</a></li><li>Composer中文网提供的镜像地址： <a href="https://packagist.phpcomposer.com" target="_blank" rel="noopener">https://packagist.phpcomposer.com</a></li></ul></blockquote><p>镜像使用方法:</p><p>全局配置（推荐）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure></p><p>单独项目使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config repo.packagist composer https://php.cnpkg.org</span><br></pre></td></tr></table></figure></p><p>取消镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --unset repos.packagist</span><br></pre></td></tr></table></figure></p><p>—- 最后更新时间： 2018-10-16 18:55:18</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Composer官方镜像太慢或者被墙无法使用时的几种解决方案&lt;/p&gt;
&lt;h3 id=&quot;使用代理&quot;&gt;&lt;a href=&quot;#使用代理&quot; class=&quot;headerlink&quot; title=&quot;使用代理&quot;&gt;&lt;/a&gt;使用代理&lt;/h3&gt;&lt;p&gt;被墙使用国外代理上网，总是一种行之有效的方法。加
      
    
    </summary>
    
      <category term="Composer" scheme="https://metmoon.com/categories/Composer/"/>
    
      <category term="PHP" scheme="https://metmoon.com/categories/Composer/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Composer" scheme="https://metmoon.com/tags/Composer/"/>
    
  </entry>
  
  <entry>
    <title>使用PHP写Git的自动部署webhook脚本</title>
    <link href="https://metmoon.com/2018/05/01/git-webhook/"/>
    <id>https://metmoon.com/2018/05/01/git-webhook/</id>
    <published>2018-05-01T02:16:43.000Z</published>
    <updated>2018-07-18T03:18:33.860Z</updated>
    
    <content type="html"><![CDATA[<p>现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。</p><h3 id="最简单的流程"><a href="#最简单的流程" class="headerlink" title="最简单的流程"></a>最简单的流程</h3><p>比如你的项目有两个分支，一个是代码已经经过测试可用于部署到服务器的master分支，一个用于开发的dev分支。那么我们上线的过程就是merge dev的代码到master分支。那么我们可以设置一个代码push触发的webhook。这个webhook脚本的代码也非常简单，就是<code>git pull origin master</code>。</p><h3 id="最简单的实现"><a href="#最简单的实现" class="headerlink" title="最简单的实现"></a>最简单的实现</h3><ul><li>编写<code>webhook.php</code></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// todo 在此可以写校验权限密码之类的代码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$path = dirname(<span class="keyword">__DIR__</span>);</span><br><span class="line">$log_file = $path.<span class="string">'/runtime/logs/webhook-pull-error-output.log'</span>;<span class="comment">//错误日志文件的路径</span></span><br><span class="line"></span><br><span class="line">$descriptorspec = <span class="keyword">array</span>(</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"r"</span>),  <span class="comment">// 标准输入，子进程从此管道中读取数据</span></span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">"pipe"</span>, <span class="string">"w"</span>),  <span class="comment">// 标准输出，子进程向此管道中写入数据</span></span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">"file"</span>, $log_file, <span class="string">"a"</span>) <span class="comment">// 标准错误，写入到一个文件</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$cwd = $path;</span><br><span class="line">$env = <span class="keyword">array</span>(<span class="string">'PATH'</span> =&gt; $_SERVER[<span class="string">'PATH'</span>]);</span><br><span class="line"></span><br><span class="line">$process = proc_open(<span class="string">'sudo git pull origin master'</span>, $descriptorspec, $pipes, $cwd, $env);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line"><span class="keyword">if</span> (is_resource($process)) &#123;</span><br><span class="line">    <span class="comment">// $pipes 现在看起来是这样的：</span></span><br><span class="line">    <span class="comment">// 0 =&gt; 可以向子进程标准输入写入的句柄</span></span><br><span class="line">    <span class="comment">// 1 =&gt; 可以从子进程标准输出读取的句柄</span></span><br><span class="line">    <span class="comment">// 错误输出将被追加到文件 /tmp/error-output.txt</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> stream_get_contents($pipes[<span class="number">1</span>]);</span><br><span class="line">    fclose($pipes[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 切记：在调用 proc_close 之前关闭所有的管道以避免死锁。</span></span><br><span class="line">    $return_value = proc_close($process);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> PHP_EOL.<span class="string">"command returned $return_value\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加php脚本的执行用户sudoers中</li></ul><p>比如你使用nginx+php-fpm的服务器架构，你的php-fpm的用户是www-data<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">visudo</span><br><span class="line">--------------------------------</span><br><span class="line">...</span><br><span class="line"><span class="comment">#Defaults   !visiblepw   #注释掉这句 这句是限制sudo只能在命令行执行的</span></span><br><span class="line">www-data ALL=(ALL:ALL) NOPASSWD: /usr/bin/git</span><br></pre></td></tr></table></figure></p><ul><li>push代码到master分支测试下吧~ 登陆服务器看看代码是不是已经同步好了　</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在开发项目大多使用git作为版本控制器，而且现在大多数的代码托管平台都支持自定义webhook脚本。正好利用这个脚本，结合git的workflow，我们可以轻松的做到项目代码的自动发布部署。&lt;/p&gt;
&lt;h3 id=&quot;最简单的流程&quot;&gt;&lt;a href=&quot;#最简单的流程&quot; cl
      
    
    </summary>
    
      <category term="Git" scheme="https://metmoon.com/categories/Git/"/>
    
      <category term="PHP" scheme="https://metmoon.com/categories/Git/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Git" scheme="https://metmoon.com/tags/Git/"/>
    
      <category term="Webhook" scheme="https://metmoon.com/tags/Webhook/"/>
    
  </entry>
  
  <entry>
    <title>Git的一些基本操作【持续更新】</title>
    <link href="https://metmoon.com/2018/03/31/git/"/>
    <id>https://metmoon.com/2018/03/31/git/</id>
    <published>2018-03-31T13:47:05.000Z</published>
    <updated>2018-11-18T10:03:03.333Z</updated>
    
    <content type="html"><![CDATA[<p>经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。</p><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><ul><li><p>查看分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch  <span class="comment">#只显示本地分支</span></span><br><span class="line">git branch -a <span class="comment">#显示本地分支和远程分支</span></span><br></pre></td></tr></table></figure></li><li><p>创建分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b branch_name</span><br><span class="line"><span class="comment">#如果有一个远程分支remotes/origin/branch_name,那么执行这个命令将会创建新的名为`branch_name`本地分支并且跟踪同名的远程分支remotes/origin/branch_name</span></span><br></pre></td></tr></table></figure></li><li><p>推送远程分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin branch_name</span><br></pre></td></tr></table></figure></li><li><p>删除分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -d branch_name</span><br><span class="line"><span class="comment"># 删除本地分支后并删除远程分支</span></span><br><span class="line">git push --delete origin branch_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="tag-标签操作"><a href="#tag-标签操作" class="headerlink" title="tag 标签操作"></a>tag 标签操作</h3><ul><li><p>查看tag列表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure></li><li><p>新增tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag tag_name <span class="comment"># 比如v1.0</span></span><br></pre></td></tr></table></figure></li><li><p>推送本地指定tag到远程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin tag_name</span><br></pre></td></tr></table></figure></li><li><p>推送全部本地tag到远程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --tags</span><br></pre></td></tr></table></figure></li><li><p>删除tag</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag -d </span><br><span class="line"><span class="comment"># 删除tag后并删除远程tag</span></span><br><span class="line">git push --delete tag tag_name</span><br></pre></td></tr></table></figure></li></ul><h3 id="github中fork的项目与原作者同步"><a href="#github中fork的项目与原作者同步" class="headerlink" title="github中fork的项目与原作者同步"></a>github中fork的项目与原作者同步</h3><p>假如一个项目<code>Evil-S0ul/write-doc</code>地址: <a href="https://github.com/Evil-S0ul/write-doc" target="_blank" rel="noopener">https://github.com/Evil-S0ul/write-doc</a></p><p>我fork之后的项目是<code>heropoo/write-doc</code>地址: <a href="https://github.com/heropoo/write-doc" target="_blank" rel="noopener">https://github.com/heropoo/write-doc</a></p><p>接下来开始操作：</p><ol><li><p>切换到我fork的项目目录里，然后增加源仓库地址到你项目的远程分支中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> write-doc</span><br><span class="line">git remote add Evil-S0ul https://github.com/Evil-S0ul/write-doc</span><br></pre></td></tr></table></figure></li><li><p>fetch刚添加的源分支到本地</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch Evil-S0ul</span><br></pre></td></tr></table></figure></li><li><p>合并两个版本的代码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge Evil-S0ul/master</span><br></pre></td></tr></table></figure></li><li><p>最后把合并后的代码push到你的Github项目上去就ok啦</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></li></ol><h3 id="检出远程的某个分支或者tag"><a href="#检出远程的某个分支或者tag" class="headerlink" title="检出远程的某个分支或者tag"></a>检出远程的某个分支或者tag</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git fetch</span><br><span class="line">git checkout branch_name</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">git checkout tag_name</span><br></pre></td></tr></table></figure><h3 id="同步且merge其他远程分支到当前本地分支"><a href="#同步且merge其他远程分支到当前本地分支" class="headerlink" title="同步且merge其他远程分支到当前本地分支"></a>同步且merge其他远程分支到当前本地分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin other_branch_name</span><br></pre></td></tr></table></figure><h3 id="Git无法pull仓库refusing-to-merge-unrelated-histories"><a href="#Git无法pull仓库refusing-to-merge-unrelated-histories" class="headerlink" title="Git无法pull仓库refusing to merge unrelated histories"></a>Git无法pull仓库refusing to merge unrelated histories</h3><p>有时候我们的本地仓库添加了一个远程仓库地址，pull代码时会报<code>refusing to merge unrelated histories</code>的错。解决方法是加一个参数<code>--allow-unrelated-histories</code>。</p><p>假如我们的分支是master<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure></p><p>最后更新： 2018-11-18 17:59:06</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经常用git，但好多命令总是记不住，每次都百度。现在整理下做个笔记吧。&lt;/p&gt;
&lt;h3 id=&quot;分支操作&quot;&gt;&lt;a href=&quot;#分支操作&quot; class=&quot;headerlink&quot; title=&quot;分支操作&quot;&gt;&lt;/a&gt;分支操作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;查看分支&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Git" scheme="https://metmoon.com/categories/Git/"/>
    
    
      <category term="Git" scheme="https://metmoon.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Rust更换国内源</title>
    <link href="https://metmoon.com/2018/01/24/change-rust-mirrors/"/>
    <id>https://metmoon.com/2018/01/24/change-rust-mirrors/</id>
    <published>2018-01-24T15:25:36.000Z</published>
    <updated>2018-05-26T02:43:44.215Z</updated>
    
    <content type="html"><![CDATA[<p>今天学cargo这节，<code>cargo build</code>时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大~(￣▽￣)~*)</p><p>教程开始：</p><p>设置两个环境变量<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure></p><p>或者直接写入<code>~/.bashrc</code></p><p>使用ustcu的源下载安装rust<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSf https://mirrors.ustc.edu.cn/rust-static/rustup.sh | sh</span><br></pre></td></tr></table></figure></p><p>编辑<code>~/.cargo/config</code>写入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[registry]</span><br><span class="line">index = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br><span class="line">[source.crates-io]</span><br><span class="line">registry = &quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="line">replace-with = &apos;ustc&apos;</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = &quot;https://mirrors.ustc.edu.cn/crates.io-index/&quot;</span><br></pre></td></tr></table></figure></p><p>现在cargo安装外部依赖是不是贼溜~😉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天学cargo这节，&lt;code&gt;cargo build&lt;/code&gt;时安装外部依赖真的慢啊。果断找国内源,果断又是ustc(中科大, emmm以前应该努力一点考中科大~(￣▽￣)~*)&lt;/p&gt;
&lt;p&gt;教程开始：&lt;/p&gt;
&lt;p&gt;设置两个环境变量&lt;br&gt;&lt;figure cla
      
    
    </summary>
    
      <category term="Rust" scheme="https://metmoon.com/categories/Rust/"/>
    
    
      <category term="Rust" scheme="https://metmoon.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>如果编程语言是一种武器(转自互联网)</title>
    <link href="https://metmoon.com/2018/01/23/If-the-programming-language-is-a-weapon/"/>
    <id>https://metmoon.com/2018/01/23/If-the-programming-language-is-a-weapon/</id>
    <published>2018-01-23T06:58:10.000Z</published>
    <updated>2018-01-23T08:16:36.447Z</updated>
    
    <content type="html"><![CDATA[<p>对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己</p><p><img src="/assets/images/uuaMZv.png" alt="pic"></p><p>C语言是M1式加兰德步枪，很老但可靠。</p><p><img src="/assets/images/mE3eaiv.png" alt="pic"></p><p>C++是双截棍，挥舞起来很强悍，很吸引人，但需要你多年的磨练来掌握，很多人希望改用别的武器。</p><p><img src="/assets/images/yuMVfu.png" alt="pic"></p><p>Perl语言是燃烧弹，曾经在战场上很有用，但现在很少人使用它。</p><p><img src="/assets/images/UvUNJz.png" alt="pic"></p><p>Java是M240通用弹夹式自动机枪，有时它的弹夹是圆的，但有时候不是，如果不是，当你开火时，会遇到NullPointerException问题，枪就会爆炸，你被炸死。</p><p><img src="/assets/images/veQb227.png" alt="pic"></p><p>Scala是M240通用机枪的变种，但它的使用手册是用一种看不懂的方言写的，很多人怀疑那只是一些梦话。</p><p><img src="/assets/images/3yYZVj2.png" alt="pic"></p><p>JavaScript是一把宝剑，但没有剑柄。</p><p><img src="/assets/images/3qIb6rU.png" alt="pic"></p><p>Go语言是一种自制的”if err != nil”发令枪，每一次发射后，你都必须要检查它是否真的发射了。</p><p><img src="/assets/images/AFZBvy2.png" alt="pic"></p><p>Rust语言是一种3D打印出的枪。将来也许真的能派上用场。</p><p><img src="/assets/images/2URZfy.png" alt="pic"></p><p>bash是一个十分碍手的锤子，你抡起它时会发现所有东西看起来都像钉子，尤其是你的指头。</p><p><img src="/assets/images/v2U3qef.png" alt="pic"></p><p>Python是一种”v2/v3”双管枪，每次只能用一个管子发射，你永远不知道该用哪个管子发射好。</p><p><img src="/assets/images/7VZvMn.png" alt="pic"></p><p>Ruby是一把外嵌红宝石的宝刀，人们使用它通常是因为看起来很炫。</p><p><img src="/assets/images/iUFzqi.png" alt="pic"></p><p>PHP是水管子，你通常会把它的一段接到汽车的排气管，另一端插进车窗里，然后你坐进车里，开动引擎。</p><p><img src="/assets/images/eAj6Nra.png" alt="pic"></p><p>Mathematica是一种地球低轨道粒子大炮，它也许能够干出很神奇的事情，但只有付得起费用的人才能使用它。</p><p><img src="/assets/images/7v6jei.png" alt="pic"></p><p>C#是一种强悍的激光大炮，架子一头驴子上，如果从驴子上卸下来，它好像就发不出激光。</p><p><img src="/assets/images/jUR7be.png" alt="pic"></p><p>Prolog语言是一种人工智能武器，你告诉它要做什么，它会照做不误，但之后，它会弄几个终结者出来，烧掉你的房子。</p><p><img src="/assets/images/bM3aaab.png" alt="pic"></p><p>Lisp语言是一把剃须刀，有很多款式。只有寻求刺激和危险的人才会使用它。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对程序员来说，编程语言就是武器，但有的武器好用，有的武器不好用，有的武器甚至会杀了自己&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/assets/images/uuaMZv.png&quot; alt=&quot;pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;C语言是M1式加兰德步枪，很老但可靠。&lt;/p&gt;
&lt;p&gt;&lt;img
      
    
    </summary>
    
      <category term="互联网" scheme="https://metmoon.com/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="互联网" scheme="https://metmoon.com/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>整理几个常用的国内源</title>
    <link href="https://metmoon.com/2018/01/20/cn-mirrors/"/>
    <id>https://metmoon.com/2018/01/20/cn-mirrors/</id>
    <published>2018-01-20T14:20:41.000Z</published>
    <updated>2018-09-16T14:59:55.216Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux以及一些开源软件"><a href="#Linux以及一些开源软件" class="headerlink" title="Linux以及一些开源软件"></a>Linux以及一些开源软件</h3><p>一些企业的：</p><ul><li>网易开源镜像站 <a href="http://mirrors.163.com/" target="_blank" rel="noopener">http://mirrors.163.com/</a></li><li>搜狐开源镜像站 <a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">http://mirrors.sohu.com/</a></li><li>阿里云源镜像站 <a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></li><li>首都在线 <a href="http://mirrors.yun-idc.com/" target="_blank" rel="noopener">http://mirrors.yun-idc.com/</a></li></ul><p>各大高校的：</p><ul><li>中科大开源镜像站 <a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/</a></li><li>清华大学开源软件镜像站 <a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/</a></li><li>华中科技大学开源镜像站 <a href="http://mirror.hust.edu.cn/" target="_blank" rel="noopener">http://mirror.hust.edu.cn/</a></li><li>浙江大学开源镜像站 <a href="http://mirrors.zju.edu.cn/" target="_blank" rel="noopener">http://mirrors.zju.edu.cn/</a></li><li>东软信息学院开源镜像站 <a href="http://mirrors.neusoft.edu.cn/" target="_blank" rel="noopener">http://mirrors.neusoft.edu.cn/</a></li><li>北京理工大学开源软件镜像 <a href="http://mirror.bit.edu.cn/" target="_blank" rel="noopener">http://mirror.bit.edu.cn/</a></li><li>北京交通大学自由与开源软件镜像站 <a href="https://mirror.bjtu.edu.cn/" target="_blank" rel="noopener">https://mirror.bjtu.edu.cn/</a></li><li>兰州大学开源社区镜像站 <a href="http://mirror.lzu.edu.cn/" target="_blank" rel="noopener">http://mirror.lzu.edu.cn/</a></li><li>上海交通大学 <a href="http://ftp.sjtu.edu.cn/" target="_blank" rel="noopener">http://ftp.sjtu.edu.cn/</a></li><li>东北大学 <a href="http://mirror.neu.edu.cn/" target="_blank" rel="noopener">http://mirror.neu.edu.cn/</a></li></ul><h3 id="js-npm"><a href="#js-npm" class="headerlink" title="js npm"></a>js npm</h3><ul><li>淘宝NPM镜像 <a href="http://npm.taobao.org/" target="_blank" rel="noopener">http://npm.taobao.org/</a></li></ul><h3 id="php-composer"><a href="#php-composer" class="headerlink" title="php composer"></a>php composer</h3><ul><li>Composer中文网 <a href="http://www.phpcomposer.com/" target="_blank" rel="noopener">http://www.phpcomposer.com/</a></li><li>LaravelChina社区提供的镜像地址： <a href="https://packagist.laravel-china.org" target="_blank" rel="noopener">https://packagist.laravel-china.org</a></li></ul><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><ul><li>DaoCloud <a href="http://a42abd64.m.daocloud.io" target="_blank" rel="noopener">http://a42abd64.m.daocloud.io</a></li><li>阿里云 要注册独立分配 <a href="https://yq.aliyun.com/articles/29941" target="_blank" rel="noopener">传送门</a></li></ul><p>大概就整理这么多了，至于各个镜像的更换方法大家根据自己的应用自行百度吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Linux以及一些开源软件&quot;&gt;&lt;a href=&quot;#Linux以及一些开源软件&quot; class=&quot;headerlink&quot; title=&quot;Linux以及一些开源软件&quot;&gt;&lt;/a&gt;Linux以及一些开源软件&lt;/h3&gt;&lt;p&gt;一些企业的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网易开源镜像
      
    
    </summary>
    
      <category term="资源" scheme="https://metmoon.com/categories/%E8%B5%84%E6%BA%90/"/>
    
    
      <category term="JavaScript" scheme="https://metmoon.com/tags/JavaScript/"/>
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="Linux" scheme="https://metmoon.com/tags/Linux/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>2018,新年快乐！</title>
    <link href="https://metmoon.com/2018/01/01/2018-happy-new-year/"/>
    <id>https://metmoon.com/2018/01/01/2018-happy-new-year/</id>
    <published>2017-12-31T16:17:50.000Z</published>
    <updated>2018-01-18T05:18:40.758Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/assets/images/20180101000832.png" alt="example-pic"></p><p>2018年了，新年快乐！</p><p>加油！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/assets/images/20180101000832.png&quot; alt=&quot;example-pic&quot;&gt;&lt;/p&gt;
&lt;p&gt;2018年了，新年快乐！&lt;/p&gt;
&lt;p&gt;加油！&lt;/p&gt;

      
    
    </summary>
    
      <category term="岁月静好" scheme="https://metmoon.com/categories/%E5%B2%81%E6%9C%88%E9%9D%99%E5%A5%BD/"/>
    
    
      <category term="岁月静好" scheme="https://metmoon.com/tags/%E5%B2%81%E6%9C%88%E9%9D%99%E5%A5%BD/"/>
    
  </entry>
  
  <entry>
    <title>使用docker玩转php开发环境</title>
    <link href="https://metmoon.com/2017/11/16/%E4%BD%BF%E7%94%A8docker%E7%8E%A9%E8%BD%ACphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://metmoon.com/2017/11/16/使用docker玩转php开发环境/</id>
    <published>2017-11-16T07:25:01.000Z</published>
    <updated>2018-05-26T02:44:29.787Z</updated>
    
    <content type="html"><![CDATA[<p>还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁</p><p>先看<code>Dockerfile</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用基于alpine linux 的镜像，体积小，下载快</span><br><span class="line">FROM php:7.0-cli-alpine</span><br><span class="line"></span><br><span class="line"># 使用中科大的源加快下载速度</span><br><span class="line">RUN sed -i &apos;s/dl-cdn.alpinelinux.org/mirrors.ustc.edu.cn/g&apos; /etc/apk/repositories</span><br><span class="line"></span><br><span class="line"># 安装下基本的php扩展</span><br><span class="line">RUN docker-php-ext-install pdo pdo_mysql mysqli</span><br></pre></td></tr></table></figure></p><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t heropoo/php-cli-alpine .  <span class="comment">#先切换到你的Dockerfile目录</span></span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm --name php-cli-server -p 8080:80  -v //c/Users/ttt/www:/usr/src/www -w /usr/src/www php:7.0-cli-alpine php -S 0.0.0.0:80</span><br></pre></td></tr></table></figure><p>这句好长啊，解释下各个参数：</p><blockquote><p>-t在新容器内指定一个伪终端或终端</p><p>-i    允许你对容器内的标准输入 (STDIN) </p><p>-p 映射宿主机端口到容器的端口，上面就是宿主机的8080到容器的80</p><p>-v 挂载宿主机目录到容器的目录，上面就是宿主机/c/Users/ttt/www到容器/usr/src/www    </p><p>-w    设置工作目录</p><p>–rm 容器运行完之后删除</p><p>–name    给容器名字</p><p>php -S 0.0.0.0:80 就是用php内置的服务器启动一个web服务了，简单点来 哈哈 </p></blockquote><p>我系统是windows，我在浏览器访问docker的web服务：<code>http://ip:8080</code>,ip是你的docker的ip,就可以了。</p><p>是不是很好玩😜</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还是忙里偷闲研究了下怎么用docker这个东东来整php开发。做点笔记😁&lt;/p&gt;
&lt;p&gt;先看&lt;code&gt;Dockerfile&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="Docker" scheme="https://metmoon.com/categories/Docker/"/>
    
      <category term="PHP" scheme="https://metmoon.com/categories/Docker/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="虚拟化" scheme="https://metmoon.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="容器" scheme="https://metmoon.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>百度UEditor自定义上传地址</title>
    <link href="https://metmoon.com/2017/10/26/%E7%99%BE%E5%BA%A6ueditor%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8A%E4%BC%A0%E5%9C%B0%E5%9D%80/"/>
    <id>https://metmoon.com/2017/10/26/百度ueditor自定义上传地址/</id>
    <published>2017-10-26T03:03:11.000Z</published>
    <updated>2018-01-18T05:18:40.738Z</updated>
    
    <content type="html"><![CDATA[<p>之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。</p><p>在ue实例化的时候你服务端上传的请求地址赋值给<code>serverUrl</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ue;</span><br><span class="line">ue = UE.getEditor(<span class="string">'editor'</span>, &#123;</span><br><span class="line">    toolbars: [<span class="comment">//这个是工具栏配置，自己定义和今天主题无关</span></span><br><span class="line">        [</span><br><span class="line">            <span class="string">'fullscreen'</span>, <span class="string">'source'</span>, <span class="string">'|'</span>, <span class="string">'undo'</span>, <span class="string">'redo'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'bold'</span>, <span class="string">'italic'</span>, <span class="string">'underline'</span>, <span class="string">'fontborder'</span>, <span class="string">'strikethrough'</span>, <span class="string">'superscript'</span>, <span class="string">'subscript'</span>, <span class="string">'removeformat'</span>, <span class="string">'formatmatch'</span>, <span class="string">'autotypeset'</span>, <span class="string">'blockquote'</span>, <span class="string">'pasteplain'</span>, <span class="string">'|'</span>, <span class="string">'forecolor'</span>, <span class="string">'backcolor'</span>, <span class="string">'insertorderedlist'</span>, <span class="string">'insertunorderedlist'</span>, <span class="string">'selectall'</span>, <span class="string">'cleardoc'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'rowspacingtop'</span>, <span class="string">'rowspacingbottom'</span>, <span class="string">'lineheight'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'customstyle'</span>, <span class="string">'paragraph'</span>, <span class="string">'fontfamily'</span>, <span class="string">'fontsize'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'directionalityltr'</span>, <span class="string">'directionalityrtl'</span>, <span class="string">'indent'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'justifyleft'</span>, <span class="string">'justifycenter'</span>, <span class="string">'justifyright'</span>, <span class="string">'justifyjustify'</span>, <span class="string">'|'</span>, <span class="string">'touppercase'</span>, <span class="string">'tolowercase'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'link'</span>, <span class="string">'unlink'</span>, <span class="string">'anchor'</span>, <span class="string">'|'</span>, <span class="string">'imagenone'</span>, <span class="string">'imageleft'</span>, <span class="string">'imageright'</span>, <span class="string">'imagecenter'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'simpleupload'</span>, <span class="string">'|'</span>, <span class="string">'pagebreak'</span>, <span class="string">'template'</span>, <span class="string">'background'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'horizontal'</span>, <span class="string">'date'</span>, <span class="string">'time'</span>, <span class="string">'spechars'</span>, <span class="string">'snapscreen'</span>, <span class="string">'wordimage'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'inserttable'</span>, <span class="string">'deletetable'</span>, <span class="string">'insertparagraphbeforetable'</span>, <span class="string">'insertrow'</span>, <span class="string">'deleterow'</span>, <span class="string">'insertcol'</span>, <span class="string">'deletecol'</span>, <span class="string">'mergecells'</span>, <span class="string">'mergeright'</span>, <span class="string">'mergedown'</span>, <span class="string">'splittocells'</span>, <span class="string">'splittorows'</span>, <span class="string">'splittocols'</span>, <span class="string">'charts'</span>, <span class="string">'|'</span>,</span><br><span class="line">            <span class="string">'preview'</span></span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    serverUrl: <span class="string">'http://your-server-address'</span>  <span class="comment">//这里是你服务端上传的请求地址</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在上面自定义了服务端地址之后，我们刷新页面，ue实例化的时候会自动请求你的地址并且带着query参数，大概是这样：<code>http://your-server-address?action=config</code>。这是ue实例化会请求配置文件，简单点你可以直接返回ue插件文件夹中<code>ueditor/1.4.3.3/php/config.json</code>的内容就可以了。当然了具体配置你是可以自己按自己需求改动。</p><p>接下来上传图片，随便上传一张图片，会发现ue的请求地址是<code>http://your-server-address?action=uploadimage</code>。这样是不是恍然大悟：</p><blockquote><p>   action参数是config，你就给他返回配置内容;<br>   action参数是uploadimage就是图片上传，你就保存图片文件，返回成功或者失败的结果。</p></blockquote><p>上传结果返回格式是这样的：</p><p>失败的情况<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"state"</span>: <span class="string">"Failed"</span>,</span><br><span class="line"><span class="attr">"msg"</span>: <span class="string">"error msg"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>成功的情况<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"state"</span>: <span class="string">"SUCCESS"</span>,</span><br><span class="line"><span class="attr">"msg"</span>: <span class="string">"ok"</span>,</span><br><span class="line">"original": "aaa.jpg",//图片源文件名</span><br><span class="line">"type": ".jpg",//图片后缀</span><br><span class="line">"size": 10240000,//图片大小</span><br><span class="line">"title": "aaa",//图片img标签上的属性title</span><br><span class="line">"url": "/upload/fsf3r.jpg"//图片上传之后的url</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好了就这样</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前有个小朋友问我百度UEditor怎么自定义服务端上传地址, 正好也用过，现在做下笔记吧。&lt;/p&gt;
&lt;p&gt;在ue实例化的时候你服务端上传的请求地址赋值给&lt;code&gt;serverUrl&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight javascrip
      
    
    </summary>
    
      <category term="PHP" scheme="https://metmoon.com/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://metmoon.com/tags/PHP/"/>
    
      <category term="UEditor" scheme="https://metmoon.com/tags/UEditor/"/>
    
  </entry>
  
  <entry>
    <title>Docker基础命令</title>
    <link href="https://metmoon.com/2017/10/26/Docker%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    <id>https://metmoon.com/2017/10/26/Docker基础命令/</id>
    <published>2017-10-26T02:27:39.000Z</published>
    <updated>2018-05-26T02:50:00.604Z</updated>
    
    <content type="html"><![CDATA[<p>最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>列出镜像列表<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p><p>获取一个新的镜像<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull base/archlinux</span><br></pre></td></tr></table></figure></p><p>删除镜像<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi imageID</span><br></pre></td></tr></table></figure></p><p>查找镜像<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search php</span><br></pre></td></tr></table></figure></p><p>构建<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/Dockerfile</span><br><span class="line">docker build -t imageName ./</span><br></pre></td></tr></table></figure></p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  base/archlinux /bin/echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><p>运行交互式的容器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t base/archlinux /bin/bash</span><br></pre></td></tr></table></figure></p><pre><code>* -t:在新容器内指定一个伪终端或终端。* -i:允许你对容器内的标准输入 (STDIN) 进行交互。</code></pre><p>分配端口<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -P php7.0-app    <span class="comment">#自动分配</span></span><br><span class="line">docker run -p 5000:80       <span class="comment">#容器内部的 80 端口映射到主机的 5000 端口上</span></span><br></pre></td></tr></table></figure></p><p>查看正在运行的容器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker container ls <span class="comment">#或者</span></span><br></pre></td></tr></table></figure></p><p>查看端口<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker port containerID/contaienrName</span><br></pre></td></tr></table></figure></p><p>查看日志<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker logs </span><br><span class="line">docker -f containerID/contaienrName</span><br></pre></td></tr></table></figure></p><p>查看进程<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top containerID/contaienrName</span><br></pre></td></tr></table></figure></p><p>查看Docker的底层信息<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect containerID/contaienrName</span><br></pre></td></tr></table></figure></p><p>停止容器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop containerID/contaienrName</span><br></pre></td></tr></table></figure></p><p>启动容器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start containerID/contaienrName</span><br></pre></td></tr></table></figure></p><p>正在运行的容器，我们可以使用 <code>docker restart</code> 命令来重启</p><p>查看最后一次创建的容器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -l</span><br></pre></td></tr></table></figure></p><p>移除容器<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm containerID/contaienrName</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近忙里偷闲研究了下docker这个很火的东东。做点笔记😁&lt;/p&gt;
&lt;h3 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像&quot; class=&quot;headerlink&quot; title=&quot;镜像&quot;&gt;&lt;/a&gt;镜像&lt;/h3&gt;&lt;p&gt;列出镜像列表&lt;br&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="Docker" scheme="https://metmoon.com/categories/Docker/"/>
    
    
      <category term="虚拟化" scheme="https://metmoon.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
      <category term="容器" scheme="https://metmoon.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Docker" scheme="https://metmoon.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>搭建Git服务器、编写自动部署脚本</title>
    <link href="https://metmoon.com/2017/09/29/%E6%90%AD%E5%BB%BAGit%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81%E7%BC%96%E5%86%99%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC/"/>
    <id>https://metmoon.com/2017/09/29/搭建Git服务器、编写自动部署脚本/</id>
    <published>2017-09-29T05:51:23.000Z</published>
    <updated>2018-05-26T02:49:11.586Z</updated>
    
    <content type="html"><![CDATA[<p>今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。</p><p>主要参考 <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137583770360579bc4b458f044ce7afed3df579123eca000" target="_blank" rel="noopener">廖雪峰-GIT教程-搭建Git服务器</a></p><p>现在开始吧！</p><h3 id="创建一个git用户，用来运行git服务"><a href="#创建一个git用户，用来运行git服务" class="headerlink" title="创建一个git用户，用来运行git服务"></a>创建一个<code>git</code>用户，用来运行<code>git</code>服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><h3 id="创建证书登录"><a href="#创建证书登录" class="headerlink" title="创建证书登录"></a>创建证书登录</h3><p>收集所有需要登录的用户的公钥，就是他们自己的<code>id_rsa.pub</code>文件，把所有公钥导入到<code>/home/git/.ssh/authorized_keys</code>文件里，一行一个。</p><h3 id="初始化Git仓库"><a href="#初始化Git仓库" class="headerlink" title="初始化Git仓库"></a>初始化Git仓库</h3><p>先选定一个目录作为Git仓库，假定是<code>/home/git/sample.git</code>，在<code>/home/git</code>目录下输入命令<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init --bare sample.git</span><br></pre></td></tr></table></figure></p><p>Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以<code>.git</code>结尾。然后，把owner改为<code>git</code><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git sample.git</span><br></pre></td></tr></table></figure></p><h3 id="禁用git用户shell登录"><a href="#禁用git用户shell登录" class="headerlink" title="禁用git用户shell登录"></a>禁用git用户shell登录</h3><p>通过编辑<code>/etc/passwd</code>文件完成，找到你的git用户的一行,例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br></pre></td></tr></table></figure></p><p>把<code>/bin/bash</code>改为<code>/usr/bin/git-shell</code>,例如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p><p>这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。</p><h3 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server:sample.git</span><br></pre></td></tr></table></figure><p>server是你的服务器域名或ip地址</p><p>如果git仓库和web目录在同一台服务器主机上:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure></p><p>如果不是在git用户的家目录中创建的,比如<code>/srv/gits/sample.git</code>：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@server:/srv/gits/sample.git</span><br></pre></td></tr></table></figure></p><p>如果clone成功，那么你的git服务器就搭建成功了。</p><p>接下来：</p><h3 id="自动同步钩子脚本"><a href="#自动同步钩子脚本" class="headerlink" title="自动同步钩子脚本"></a>自动同步钩子脚本</h3><p>因为我是web目录和git是同一台服务器</p><p>编辑 <code>/home/git/sample.git/hooks/post-receive</code>, <code>post-receive</code>就是在git服务器收到代码推送后(<code>push</code>完成之后)执行的脚本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">while read oldrev newrev refname</span><br><span class="line">do</span><br><span class="line">    branch=$(git rev-parse --symbolic --abbrev-ref $refname)</span><br><span class="line">    if [ &quot;master&quot; == &quot;$branch&quot; ]; then</span><br><span class="line">        # Do something</span><br><span class="line">        echo &quot;post-receive in branch master&quot; &gt;&gt; /tmp/git-sample.log</span><br><span class="line">        unset GIT_DIR</span><br><span class="line">        wwwPath=/var/www/html/sample</span><br><span class="line">        cd $wwwPath &amp;&amp; /usr/bin/git pull origin master</span><br><span class="line">        exit 0</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>从脚本内容可以看出，我们在判断当前<code>push</code>的分支是<code>master</code>时执行<code>git pull origin master</code>操作。</p><p>给执行权限<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /home/git/sample.git/hooks/post-receive</span><br><span class="line">chmod +x /home/git/sample.git/hooks/post-receive</span><br></pre></td></tr></table></figure></p><p>因为是git仓库和web目录在同一台服务器主机上,这里clone使用的是:<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> /home/git/sample.git</span><br></pre></td></tr></table></figure></p><p>因为同步脚本的执行用户是git，所以要保证项目目录要赋予git写权限。容易出问题的也是权限问题。</p><p>好了，试试吧~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天试了下在linux服务器上搭建Git服务器，并且编写一个简单的自动部署脚本。&lt;/p&gt;
&lt;p&gt;主要参考 &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8
      
    
    </summary>
    
      <category term="Linux" scheme="https://metmoon.com/categories/Linux/"/>
    
      <category term="Git" scheme="https://metmoon.com/categories/Linux/Git/"/>
    
    
      <category term="Linux" scheme="https://metmoon.com/tags/Linux/"/>
    
      <category term="Git" scheme="https://metmoon.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>MSYS2初体验</title>
    <link href="https://metmoon.com/2017/09/22/MSYS2%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>https://metmoon.com/2017/09/22/MSYS2初体验/</id>
    <published>2017-09-22T08:07:54.000Z</published>
    <updated>2018-05-26T02:51:39.315Z</updated>
    
    <content type="html"><![CDATA[<p>作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。</p><p>发现这家伙还不错，这是<a href="https://baike.baidu.com/item/MSYS2" target="_blank" rel="noopener">百度百科</a>的介绍：</p><blockquote><p>MSYS2 （Minimal SYStem 2） 是一个MSYS的独立改写版本，主要用于 shell 命令行开发环境。同时它也是一个在Cygwin （POSIX 兼容性层） 和 MinGW-w64（从”MinGW-生成”）基础上产生的，追求更好的互操作性的 Windows 软件。<br>MSYS2 是MSYS的一个升级版,准确的说是集成了pacman(我喜欢叫吃豆人)和Mingw-w64的Cygwin升级版, 提供了bash shell等linux环境、版本控制软件（git/hg）和MinGW-w64 工具链。与MSYS最大的区别是移植了 Arch Linux的软件包管理系统 Pacman(其实是与Cygwin的区别)。</p></blockquote><p>看起来还不错，这是<a href="http://www.msys2.org/" target="_blank" rel="noopener">官网</a></p><p>安装就下载二进制安装程序安装就可以了。</p><p>安装之后急切地 <code>pacman -Sy</code> 刷新软件包数据，官网的源还有点慢。换<a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大</a>的源吧。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/pacman.d</span><br><span class="line">ls</span><br><span class="line">-------------------</span><br><span class="line">gnupg mirrorlist.mingw32  mirrorlist.mingw64  mirrorlist.msys</span><br></pre></td></tr></table></figure><p>三个<code>mirrorlist</code>开头的文件就是源的配置文件</p><p>编辑 /etc/pacman.d/mirrorlist.mingw32 ，在文件开头添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/mingw/i686</span><br></pre></td></tr></table></figure><p>编辑 /etc/pacman.d/mirrorlist.mingw64 ，在文件开头添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/mingw/x86_64</span><br></pre></td></tr></table></figure><p>编辑 /etc/pacman.d/mirrorlist.msys ，在文件开头添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Server = http://mirrors.ustc.edu.cn/msys2/msys/$arch</span><br></pre></td></tr></table></figure><p>然后执行 <code>pacman -Sy</code> 刷新软件包数据即可。</p><p>还有一点，cygwin切换系统磁盘是<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /cygdrive/d/   <span class="comment">#比如切换到d盘</span></span><br></pre></td></tr></table></figure></p><p>MYSYS2是：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d</span><br></pre></td></tr></table></figure></p><p>使用windows原生命令比如ping会中文乱码，这么解决：</p><p>新建 /bin/win：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="variable">$@</span> |iconv -f gbk -t utf-8</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/win ping baidu.com</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一名windows下面开发者，之前工作Cygwin做为辅助。前些天突然发现了一个叫MSYS2的家伙。&lt;/p&gt;
&lt;p&gt;发现这家伙还不错，这是&lt;a href=&quot;https://baike.baidu.com/item/MSYS2&quot; target=&quot;_blank&quot; rel=&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="https://metmoon.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://metmoon.com/tags/Linux/"/>
    
      <category term="Win10" scheme="https://metmoon.com/tags/Win10/"/>
    
      <category term="MSYS2" scheme="https://metmoon.com/tags/MSYS2/"/>
    
  </entry>
  
  <entry>
    <title>Win10子系统ubuntu更换源</title>
    <link href="https://metmoon.com/2017/09/17/win10%E5%AD%90%E7%B3%BB%E7%BB%9Fubuntu%E6%9B%B4%E6%8D%A2%E6%BA%90/"/>
    <id>https://metmoon.com/2017/09/17/win10子系统ubuntu更换源/</id>
    <published>2017-09-17T04:04:01.000Z</published>
    <updated>2018-05-26T02:44:47.894Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。</p><p>现在win10的linux子系统已经有ubuntu和opensuse两个版本了,应该后续还会推出更多的linux发行版。大家按个人喜好安装吧。</p><p>安装过程，网上很多也不难，就略过了，大家自行搜索吧。</p><p>我的linux子系统用的是ubuntu，使用起来简单方便啊😁</p><p>安装完成之后，顺手就是一个 <code>apt update</code>，但是默认的源太慢了，没法忍。那我们就换国内源吧。</p><p>国内有好多源，<a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">阿里云</a>，<a href="http://mirrors.163.com/" target="_blank" rel="noopener">163</a>，<a href="http://mirrors.sohu.com/" target="_blank" rel="noopener">搜狐</a>，<a href="http://mirrors.ustc.edu.cn/" target="_blank" rel="noopener">中科大</a>等等。我们就以阿里云做个例子吧：</p><p>浏览器打开 <a href="http://mirrors.aliyun.com/" target="_blank" rel="noopener">http://mirrors.aliyun.com/</a></p><p><img src="/assets/images/20170917191649.png" alt="example-pic"></p><p>找到ubuntu的help </p><p><img src="/assets/images/20170917192021.png" alt="pic"></p><p>发现里面最新的是 Quantal(12.10) 看来不能直接复制</p><p>在你的子系统bash中执行<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/apt/sources.list</span><br><span class="line">-------------------------</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://security.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure></p><p>索性最新版ubuntu16.04代号叫xenial</p><p>那直接把url换换就行了<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bk     <span class="comment"># 改配置文件，先备份是个好习惯</span></span><br><span class="line">sudo vim /etc/apt/sources.list   <span class="comment"># 把内容换成下面的就行了，其实就是url变了</span></span><br><span class="line">-------------------------</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">-------------------------</span><br></pre></td></tr></table></figure></p><p>搞定了，测试下：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></p><p>没问题就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个windows下面的开发者，之前工作一直用cygwin。cygwin虽然方便但是很多时候安装一些东西，比如jekyll,是各种依赖不足，太痛苦了。好在微软win10出了针对开发者的linux子系统，那就先试用一段时间吧。&lt;/p&gt;
&lt;p&gt;现在win10的linux子系
      
    
    </summary>
    
      <category term="Linux" scheme="https://metmoon.com/categories/Linux/"/>
    
    
      <category term="Win10" scheme="https://metmoon.com/tags/Win10/"/>
    
      <category term="Ubuntu" scheme="https://metmoon.com/tags/Ubuntu/"/>
    
  </entry>
  
</feed>
